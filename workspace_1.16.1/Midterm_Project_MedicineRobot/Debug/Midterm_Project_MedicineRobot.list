
Midterm_Project_MedicineRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d10  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ea8  08002ea8  00003ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec0  08002ec0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ec0  08002ec0  00003ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ec8  08002ec8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec8  08002ec8  00003ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ecc  08002ecc  00003ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ed0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002edc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002edc  00004104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba18  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001894  00000000  00000000  0000fa54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  000112e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000920  00000000  00000000  00011e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015615  00000000  00000000  000127a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2e3  00000000  00000000  00027db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a50f  00000000  00000000  00035098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf5a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000313c  00000000  00000000  000bf5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000c2728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002e90 	.word	0x08002e90

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002e90 	.word	0x08002e90

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b0c0      	sub	sp, #256	@ 0x100
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fbcd 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f843 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9d9 	bl	800088c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 f9ad 	bl	8000838 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004de:	f000 f947 	bl	8000770 <MX_TIM2_Init>
  MX_TIM1_Init();
 80004e2:	f000 f8a5 	bl	8000630 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004e6:	2100      	movs	r1, #0
 80004e8:	4818      	ldr	r0, [pc, #96]	@ (800054c <main+0x84>)
 80004ea:	f001 fc0f 	bl	8001d0c <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 250;
 80004ee:	4b18      	ldr	r3, [pc, #96]	@ (8000550 <main+0x88>)
 80004f0:	22fa      	movs	r2, #250	@ 0xfa
 80004f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2110      	movs	r1, #16
 80004f8:	4816      	ldr	r0, [pc, #88]	@ (8000554 <main+0x8c>)
 80004fa:	f000 feb7 	bl	800126c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2120      	movs	r1, #32
 8000502:	4814      	ldr	r0, [pc, #80]	@ (8000554 <main+0x8c>)
 8000504:	f000 feb2 	bl	800126c <HAL_GPIO_WritePin>
	  TIM1->CCR1 = 250;
 8000508:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <main+0x88>)
 800050a:	22fa      	movs	r2, #250	@ 0xfa
 800050c:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800050e:	2100      	movs	r1, #0
 8000510:	4811      	ldr	r0, [pc, #68]	@ (8000558 <main+0x90>)
 8000512:	f001 fbfb 	bl	8001d0c <HAL_TIM_PWM_Start>
	  HAL_Delay(3000);
 8000516:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800051a:	f000 fc19 	bl	8000d50 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2110      	movs	r1, #16
 8000522:	480c      	ldr	r0, [pc, #48]	@ (8000554 <main+0x8c>)
 8000524:	f000 fea2 	bl	800126c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	2120      	movs	r1, #32
 800052c:	4809      	ldr	r0, [pc, #36]	@ (8000554 <main+0x8c>)
 800052e:	f000 fe9d 	bl	800126c <HAL_GPIO_WritePin>
	  TIM1->CCR1 = 250;
 8000532:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <main+0x88>)
 8000534:	22fa      	movs	r2, #250	@ 0xfa
 8000536:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000538:	2100      	movs	r1, #0
 800053a:	4807      	ldr	r0, [pc, #28]	@ (8000558 <main+0x90>)
 800053c:	f001 fbe6 	bl	8001d0c <HAL_TIM_PWM_Start>
	  HAL_Delay(3000);
 8000540:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000544:	f000 fc04 	bl	8000d50 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000548:	bf00      	nop
 800054a:	e7d3      	b.n	80004f4 <main+0x2c>
 800054c:	20000070 	.word	0x20000070
 8000550:	40010000 	.word	0x40010000
 8000554:	40020400 	.word	0x40020400
 8000558:	20000028 	.word	0x20000028

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	@ 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fc64 	bl	8002e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b28      	ldr	r3, [pc, #160]	@ (8000628 <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	4a27      	ldr	r2, [pc, #156]	@ (8000628 <SystemClock_Config+0xcc>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000590:	4b25      	ldr	r3, [pc, #148]	@ (8000628 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b22      	ldr	r3, [pc, #136]	@ (800062c <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <SystemClock_Config+0xd0>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005cc:	2310      	movs	r3, #16
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005da:	2304      	movs	r3, #4
 80005dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fe5c 	bl	80012a0 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ee:	f000 f9bb 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2102      	movs	r1, #2
 800060e:	4618      	mov	r0, r3
 8000610:	f001 f8be 	bl	8001790 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061a:	f000 f9a5 	bl	8000968 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	@ 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b096      	sub	sp, #88	@ 0x58
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000636:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000644:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800064e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]
 800065e:	615a      	str	r2, [r3, #20]
 8000660:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2220      	movs	r2, #32
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fbe5 	bl	8002e38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800066e:	4b3e      	ldr	r3, [pc, #248]	@ (8000768 <MX_TIM1_Init+0x138>)
 8000670:	4a3e      	ldr	r2, [pc, #248]	@ (800076c <MX_TIM1_Init+0x13c>)
 8000672:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000674:	4b3c      	ldr	r3, [pc, #240]	@ (8000768 <MX_TIM1_Init+0x138>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b3b      	ldr	r3, [pc, #236]	@ (8000768 <MX_TIM1_Init+0x138>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000680:	4b39      	ldr	r3, [pc, #228]	@ (8000768 <MX_TIM1_Init+0x138>)
 8000682:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000686:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000688:	4b37      	ldr	r3, [pc, #220]	@ (8000768 <MX_TIM1_Init+0x138>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800068e:	4b36      	ldr	r3, [pc, #216]	@ (8000768 <MX_TIM1_Init+0x138>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000694:	4b34      	ldr	r3, [pc, #208]	@ (8000768 <MX_TIM1_Init+0x138>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800069a:	4833      	ldr	r0, [pc, #204]	@ (8000768 <MX_TIM1_Init+0x138>)
 800069c:	f001 fa98 	bl	8001bd0 <HAL_TIM_Base_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80006a6:	f000 f95f 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006b4:	4619      	mov	r1, r3
 80006b6:	482c      	ldr	r0, [pc, #176]	@ (8000768 <MX_TIM1_Init+0x138>)
 80006b8:	f001 fc9a 	bl	8001ff0 <HAL_TIM_ConfigClockSource>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006c2:	f000 f951 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006c6:	4828      	ldr	r0, [pc, #160]	@ (8000768 <MX_TIM1_Init+0x138>)
 80006c8:	f001 fad1 	bl	8001c6e <HAL_TIM_PWM_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80006d2:	f000 f949 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d6:	2300      	movs	r3, #0
 80006d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006e2:	4619      	mov	r1, r3
 80006e4:	4820      	ldr	r0, [pc, #128]	@ (8000768 <MX_TIM1_Init+0x138>)
 80006e6:	f002 f823 	bl	8002730 <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006f0:	f000 f93a 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f4:	2360      	movs	r3, #96	@ 0x60
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000700:	2300      	movs	r3, #0
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000708:	2300      	movs	r3, #0
 800070a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800070c:	2300      	movs	r3, #0
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	4813      	ldr	r0, [pc, #76]	@ (8000768 <MX_TIM1_Init+0x138>)
 800071a:	f001 fba7 	bl	8001e6c <HAL_TIM_PWM_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000724:	f000 f920 	bl	8000968 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800073c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000740:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4807      	ldr	r0, [pc, #28]	@ (8000768 <MX_TIM1_Init+0x138>)
 800074c:	f002 f85e 	bl	800280c <HAL_TIMEx_ConfigBreakDeadTime>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000756:	f000 f907 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800075a:	4803      	ldr	r0, [pc, #12]	@ (8000768 <MX_TIM1_Init+0x138>)
 800075c:	f000 f974 	bl	8000a48 <HAL_TIM_MspPostInit>

}
 8000760:	bf00      	nop
 8000762:	3758      	adds	r7, #88	@ 0x58
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000028 	.word	0x20000028
 800076c:	40010000 	.word	0x40010000

08000770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000792:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <MX_TIM2_Init+0xc4>)
 8000794:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800079a:	4b26      	ldr	r3, [pc, #152]	@ (8000834 <MX_TIM2_Init+0xc4>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <MX_TIM2_Init+0xc4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 80007a6:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <MX_TIM2_Init+0xc4>)
 80007a8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80007ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_TIM2_Init+0xc4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_TIM2_Init+0xc4>)
 80007b6:	2280      	movs	r2, #128	@ 0x80
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ba:	481e      	ldr	r0, [pc, #120]	@ (8000834 <MX_TIM2_Init+0xc4>)
 80007bc:	f001 fa57 	bl	8001c6e <HAL_TIM_PWM_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007c6:	f000 f8cf 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	4619      	mov	r1, r3
 80007d8:	4816      	ldr	r0, [pc, #88]	@ (8000834 <MX_TIM2_Init+0xc4>)
 80007da:	f001 ffa9 	bl	8002730 <HAL_TIMEx_MasterConfigSynchronization>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80007e4:	f000 f8c0 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e8:	2360      	movs	r3, #96	@ 0x60
 80007ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	4619      	mov	r1, r3
 80007fe:	480d      	ldr	r0, [pc, #52]	@ (8000834 <MX_TIM2_Init+0xc4>)
 8000800:	f001 fb34 	bl	8001e6c <HAL_TIM_PWM_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800080a:	f000 f8ad 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2204      	movs	r2, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	@ (8000834 <MX_TIM2_Init+0xc4>)
 8000816:	f001 fb29 	bl	8001e6c <HAL_TIM_PWM_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000820:	f000 f8a2 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000824:	4803      	ldr	r0, [pc, #12]	@ (8000834 <MX_TIM2_Init+0xc4>)
 8000826:	f000 f90f 	bl	8000a48 <HAL_TIM_MspPostInit>

}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	@ 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000070 	.word	0x20000070

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <MX_USART2_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000870:	f002 f81e 	bl	80028b0 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f875 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000b8 	.word	0x200000b8
 8000888:	40004400 	.word	0x40004400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a2c      	ldr	r2, [pc, #176]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b2a      	ldr	r3, [pc, #168]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b26      	ldr	r3, [pc, #152]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a25      	ldr	r2, [pc, #148]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b23      	ldr	r3, [pc, #140]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a1e      	ldr	r2, [pc, #120]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b18      	ldr	r3, [pc, #96]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a17      	ldr	r2, [pc, #92]	@ (800095c <MX_GPIO_Init+0xd0>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b15      	ldr	r3, [pc, #84]	@ (800095c <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2130      	movs	r1, #48	@ 0x30
 8000916:	4812      	ldr	r0, [pc, #72]	@ (8000960 <MX_GPIO_Init+0xd4>)
 8000918:	f000 fca8 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000922:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_GPIO_Init+0xd8>)
 8000934:	f000 fb16 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000938:	2330      	movs	r3, #48	@ 0x30
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_GPIO_Init+0xd4>)
 8000950:	f000 fb08 	bl	8000f64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	@ 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40020400 	.word	0x40020400
 8000964:	40020800 	.word	0x40020800

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <Error_Handler+0x8>

08000974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	@ (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000988:	6453      	str	r3, [r2, #68]	@ 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	@ (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009b2:	2007      	movs	r0, #7
 80009b4:	f000 faa2 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <HAL_TIM_Base_MspInit+0x3c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d10d      	bne.n	80009f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <HAL_TIM_Base_MspInit+0x40>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	4a09      	ldr	r2, [pc, #36]	@ (8000a04 <HAL_TIM_Base_MspInit+0x40>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e6:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <HAL_TIM_Base_MspInit+0x40>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40010000 	.word	0x40010000
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a18:	d10d      	bne.n	8000a36 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a24      	ldr	r2, [pc, #144]	@ (8000af8 <HAL_TIM_MspPostInit+0xb0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d11f      	bne.n	8000aaa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b23      	ldr	r3, [pc, #140]	@ (8000afc <HAL_TIM_MspPostInit+0xb4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a22      	ldr	r2, [pc, #136]	@ (8000afc <HAL_TIM_MspPostInit+0xb4>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <HAL_TIM_MspPostInit+0xb4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4817      	ldr	r0, [pc, #92]	@ (8000b00 <HAL_TIM_MspPostInit+0xb8>)
 8000aa4:	f000 fa5e 	bl	8000f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aa8:	e022      	b.n	8000af0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ab2:	d11d      	bne.n	8000af0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <HAL_TIM_MspPostInit+0xb4>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	4a0f      	ldr	r2, [pc, #60]	@ (8000afc <HAL_TIM_MspPostInit+0xb4>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <HAL_TIM_MspPostInit+0xb4>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000ad0:	2322      	movs	r3, #34	@ 0x22
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <HAL_TIM_MspPostInit+0xb8>)
 8000aec:	f000 fa3a 	bl	8000f64 <HAL_GPIO_Init>
}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	@ 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40010000 	.word	0x40010000
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	@ (8000b88 <HAL_UART_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12b      	bne.n	8000b7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <HAL_UART_MspInit+0x88>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	4a17      	ldr	r2, [pc, #92]	@ (8000b8c <HAL_UART_MspInit+0x88>)
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <HAL_UART_MspInit+0x88>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <HAL_UART_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	@ (8000b8c <HAL_UART_MspInit+0x88>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <HAL_UART_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b5e:	230c      	movs	r3, #12
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <HAL_UART_MspInit+0x8c>)
 8000b7a:	f000 f9f3 	bl	8000f64 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	@ 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <NMI_Handler+0x4>

08000b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <MemManage_Handler+0x4>

08000bac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bea:	f000 f891 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1c:	f7ff ffea 	bl	8000bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c46:	f002 f8ff 	bl	8002e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fc3d 	bl	80004c8 <main>
  bx  lr    
 8000c4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c5c:	08002ed0 	.word	0x08002ed0
  ldr r2, =_sbss
 8000c60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c64:	20000104 	.word	0x20000104

08000c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <HAL_Init+0x40>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_Init+0x40>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	@ (8000cac <HAL_Init+0x40>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 f931 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 f808 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca0:	f7ff fe68 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023c00 	.word	0x40023c00

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_InitTick+0x54>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_InitTick+0x58>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f93b 	bl	8000f4a <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f000 f911 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	@ (8000d0c <HAL_InitTick+0x5c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000100 	.word	0x20000100

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000100 	.word	0x20000100

08000d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff ffee 	bl	8000d38 <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d68:	d005      	beq.n	8000d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <HAL_Delay+0x44>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d76:	bf00      	nop
 8000d78:	f7ff ffde 	bl	8000d38 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8f7      	bhi.n	8000d78 <HAL_Delay+0x28>
  {
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	@ (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	@ (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	@ 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff47 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff5c 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff8e 	bl	8000e50 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5d 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffb0 	bl	8000eb8 <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	@ 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	e159      	b.n	8001234 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f040 8148 	bne.w	800122e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d005      	beq.n	8000fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d130      	bne.n	8001018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	f003 0201 	and.w	r2, r3, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b03      	cmp	r3, #3
 8001022:	d017      	beq.n	8001054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d123      	bne.n	80010a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	69b9      	ldr	r1, [r7, #24]
 80010a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0203 	and.w	r2, r3, #3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80a2 	beq.w	800122e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b57      	ldr	r3, [pc, #348]	@ (800124c <HAL_GPIO_Init+0x2e8>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	4a56      	ldr	r2, [pc, #344]	@ (800124c <HAL_GPIO_Init+0x2e8>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fa:	4b54      	ldr	r3, [pc, #336]	@ (800124c <HAL_GPIO_Init+0x2e8>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001106:	4a52      	ldr	r2, [pc, #328]	@ (8001250 <HAL_GPIO_Init+0x2ec>)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a49      	ldr	r2, [pc, #292]	@ (8001254 <HAL_GPIO_Init+0x2f0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x202>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a48      	ldr	r2, [pc, #288]	@ (8001258 <HAL_GPIO_Init+0x2f4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x1fe>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a47      	ldr	r2, [pc, #284]	@ (800125c <HAL_GPIO_Init+0x2f8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x1fa>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a46      	ldr	r2, [pc, #280]	@ (8001260 <HAL_GPIO_Init+0x2fc>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x1f6>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a45      	ldr	r2, [pc, #276]	@ (8001264 <HAL_GPIO_Init+0x300>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x1f2>
 8001152:	2304      	movs	r3, #4
 8001154:	e008      	b.n	8001168 <HAL_GPIO_Init+0x204>
 8001156:	2307      	movs	r3, #7
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x204>
 800115a:	2303      	movs	r3, #3
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x204>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x204>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x204>
 8001166:	2300      	movs	r3, #0
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	f002 0203 	and.w	r2, r2, #3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001178:	4935      	ldr	r1, [pc, #212]	@ (8001250 <HAL_GPIO_Init+0x2ec>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001186:	4b38      	ldr	r3, [pc, #224]	@ (8001268 <HAL_GPIO_Init+0x304>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001268 <HAL_GPIO_Init+0x304>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001268 <HAL_GPIO_Init+0x304>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d4:	4a24      	ldr	r2, [pc, #144]	@ (8001268 <HAL_GPIO_Init+0x304>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011da:	4b23      	ldr	r3, [pc, #140]	@ (8001268 <HAL_GPIO_Init+0x304>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001268 <HAL_GPIO_Init+0x304>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001204:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <HAL_GPIO_Init+0x304>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001228:	4a0f      	ldr	r2, [pc, #60]	@ (8001268 <HAL_GPIO_Init+0x304>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3301      	adds	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	f67f aea2 	bls.w	8000f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40013800 	.word	0x40013800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e267      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d075      	beq.n	80013aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012be:	4b88      	ldr	r3, [pc, #544]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d00c      	beq.n	80012e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ca:	4b85      	ldr	r3, [pc, #532]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d112      	bne.n	80012fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d6:	4b82      	ldr	r3, [pc, #520]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012e2:	d10b      	bne.n	80012fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	4b7e      	ldr	r3, [pc, #504]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d05b      	beq.n	80013a8 <HAL_RCC_OscConfig+0x108>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d157      	bne.n	80013a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e242      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001304:	d106      	bne.n	8001314 <HAL_RCC_OscConfig+0x74>
 8001306:	4b76      	ldr	r3, [pc, #472]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a75      	ldr	r2, [pc, #468]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e01d      	b.n	8001350 <HAL_RCC_OscConfig+0xb0>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x98>
 800131e:	4b70      	ldr	r3, [pc, #448]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a6f      	ldr	r2, [pc, #444]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b6d      	ldr	r3, [pc, #436]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a6c      	ldr	r2, [pc, #432]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e00b      	b.n	8001350 <HAL_RCC_OscConfig+0xb0>
 8001338:	4b69      	ldr	r3, [pc, #420]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a68      	ldr	r2, [pc, #416]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 800133e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b66      	ldr	r3, [pc, #408]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a65      	ldr	r2, [pc, #404]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 800134a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800134e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d013      	beq.n	8001380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fcee 	bl	8000d38 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fcea 	bl	8000d38 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	@ 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e207      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b5b      	ldr	r3, [pc, #364]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0xc0>
 800137e:	e014      	b.n	80013aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fcda 	bl	8000d38 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fcd6 	bl	8000d38 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	@ 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1f3      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	4b51      	ldr	r3, [pc, #324]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0xe8>
 80013a6:	e000      	b.n	80013aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d063      	beq.n	800147e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013b6:	4b4a      	ldr	r3, [pc, #296]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00b      	beq.n	80013da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c2:	4b47      	ldr	r3, [pc, #284]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d11c      	bne.n	8001408 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ce:	4b44      	ldr	r3, [pc, #272]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d116      	bne.n	8001408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	4b41      	ldr	r3, [pc, #260]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_RCC_OscConfig+0x152>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e1c7      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f2:	4b3b      	ldr	r3, [pc, #236]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4937      	ldr	r1, [pc, #220]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	e03a      	b.n	800147e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001410:	4b34      	ldr	r3, [pc, #208]	@ (80014e4 <HAL_RCC_OscConfig+0x244>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff fc8f 	bl	8000d38 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fc8b 	bl	8000d38 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e1a8      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	4b2b      	ldr	r3, [pc, #172]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b28      	ldr	r3, [pc, #160]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4925      	ldr	r1, [pc, #148]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	e015      	b.n	800147e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001452:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <HAL_RCC_OscConfig+0x244>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fc6e 	bl	8000d38 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001460:	f7ff fc6a 	bl	8000d38 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e187      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d036      	beq.n	80014f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d016      	beq.n	80014c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <HAL_RCC_OscConfig+0x248>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff fc4e 	bl	8000d38 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc4a 	bl	8000d38 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e167      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <HAL_RCC_OscConfig+0x240>)
 80014b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x200>
 80014be:	e01b      	b.n	80014f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <HAL_RCC_OscConfig+0x248>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fc37 	bl	8000d38 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	e00e      	b.n	80014ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff fc33 	bl	8000d38 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d907      	bls.n	80014ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e150      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
 80014e0:	40023800 	.word	0x40023800
 80014e4:	42470000 	.word	0x42470000
 80014e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	4b88      	ldr	r3, [pc, #544]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 80014ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ea      	bne.n	80014ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 8097 	beq.w	8001634 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150a:	4b81      	ldr	r3, [pc, #516]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10f      	bne.n	8001536 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b7d      	ldr	r3, [pc, #500]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	4a7c      	ldr	r2, [pc, #496]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	@ 0x40
 8001526:	4b7a      	ldr	r3, [pc, #488]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001532:	2301      	movs	r3, #1
 8001534:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001536:	4b77      	ldr	r3, [pc, #476]	@ (8001714 <HAL_RCC_OscConfig+0x474>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153e:	2b00      	cmp	r3, #0
 8001540:	d118      	bne.n	8001574 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001542:	4b74      	ldr	r3, [pc, #464]	@ (8001714 <HAL_RCC_OscConfig+0x474>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a73      	ldr	r2, [pc, #460]	@ (8001714 <HAL_RCC_OscConfig+0x474>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154e:	f7ff fbf3 	bl	8000d38 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001556:	f7ff fbef 	bl	8000d38 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e10c      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	4b6a      	ldr	r3, [pc, #424]	@ (8001714 <HAL_RCC_OscConfig+0x474>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d106      	bne.n	800158a <HAL_RCC_OscConfig+0x2ea>
 800157c:	4b64      	ldr	r3, [pc, #400]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001580:	4a63      	ldr	r2, [pc, #396]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6713      	str	r3, [r2, #112]	@ 0x70
 8001588:	e01c      	b.n	80015c4 <HAL_RCC_OscConfig+0x324>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b05      	cmp	r3, #5
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x30c>
 8001592:	4b5f      	ldr	r3, [pc, #380]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001596:	4a5e      	ldr	r2, [pc, #376]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6713      	str	r3, [r2, #112]	@ 0x70
 800159e:	4b5c      	ldr	r3, [pc, #368]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0x324>
 80015ac:	4b58      	ldr	r3, [pc, #352]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b0:	4a57      	ldr	r2, [pc, #348]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b8:	4b55      	ldr	r3, [pc, #340]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015bc:	4a54      	ldr	r2, [pc, #336]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 80015be:	f023 0304 	bic.w	r3, r3, #4
 80015c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d015      	beq.n	80015f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015cc:	f7ff fbb4 	bl	8000d38 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d4:	f7ff fbb0 	bl	8000d38 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e0cb      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ea:	4b49      	ldr	r3, [pc, #292]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0ee      	beq.n	80015d4 <HAL_RCC_OscConfig+0x334>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f8:	f7ff fb9e 	bl	8000d38 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001600:	f7ff fb9a 	bl	8000d38 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e0b5      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001616:	4b3e      	ldr	r3, [pc, #248]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ee      	bne.n	8001600 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001622:	7dfb      	ldrb	r3, [r7, #23]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d105      	bne.n	8001634 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001628:	4b39      	ldr	r3, [pc, #228]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162c:	4a38      	ldr	r2, [pc, #224]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 800162e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001632:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80a1 	beq.w	8001780 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800163e:	4b34      	ldr	r3, [pc, #208]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b08      	cmp	r3, #8
 8001648:	d05c      	beq.n	8001704 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d141      	bne.n	80016d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	4b31      	ldr	r3, [pc, #196]	@ (8001718 <HAL_RCC_OscConfig+0x478>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fb6e 	bl	8000d38 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff fb6a 	bl	8000d38 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e087      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69da      	ldr	r2, [r3, #28]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168c:	019b      	lsls	r3, r3, #6
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	3b01      	subs	r3, #1
 8001698:	041b      	lsls	r3, r3, #16
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	061b      	lsls	r3, r3, #24
 80016a2:	491b      	ldr	r1, [pc, #108]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <HAL_RCC_OscConfig+0x478>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fb43 	bl	8000d38 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff fb3f 	bl	8000d38 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e05c      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c8:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x416>
 80016d4:	e054      	b.n	8001780 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d6:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <HAL_RCC_OscConfig+0x478>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff fb2c 	bl	8000d38 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e4:	f7ff fb28 	bl	8000d38 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e045      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <HAL_RCC_OscConfig+0x470>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x444>
 8001702:	e03d      	b.n	8001780 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d107      	bne.n	800171c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e038      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
 8001710:	40023800 	.word	0x40023800
 8001714:	40007000 	.word	0x40007000
 8001718:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <HAL_RCC_OscConfig+0x4ec>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d028      	beq.n	800177c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d121      	bne.n	800177c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d11a      	bne.n	800177c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800174c:	4013      	ands	r3, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001752:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001754:	4293      	cmp	r3, r2
 8001756:	d111      	bne.n	800177c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	085b      	lsrs	r3, r3, #1
 8001764:	3b01      	subs	r3, #1
 8001766:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d107      	bne.n	800177c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001776:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0cc      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017a4:	4b68      	ldr	r3, [pc, #416]	@ (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d90c      	bls.n	80017cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b65      	ldr	r3, [pc, #404]	@ (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b63      	ldr	r3, [pc, #396]	@ (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0b8      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e4:	4b59      	ldr	r3, [pc, #356]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a58      	ldr	r2, [pc, #352]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017fc:	4b53      	ldr	r3, [pc, #332]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4a52      	ldr	r2, [pc, #328]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001808:	4b50      	ldr	r3, [pc, #320]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	494d      	ldr	r1, [pc, #308]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	4313      	orrs	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d044      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4b47      	ldr	r3, [pc, #284]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d119      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e07f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d003      	beq.n	800184e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184a:	2b03      	cmp	r3, #3
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	4b3f      	ldr	r3, [pc, #252]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e06f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185e:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e067      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186e:	4b37      	ldr	r3, [pc, #220]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f023 0203 	bic.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4934      	ldr	r1, [pc, #208]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	4313      	orrs	r3, r2
 800187e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001880:	f7ff fa5a 	bl	8000d38 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	e00a      	b.n	800189e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001888:	f7ff fa56 	bl	8000d38 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e04f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 020c 	and.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1eb      	bne.n	8001888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018b0:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d20c      	bcs.n	80018d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b22      	ldr	r3, [pc, #136]	@ (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b20      	ldr	r3, [pc, #128]	@ (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e032      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e4:	4b19      	ldr	r3, [pc, #100]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4916      	ldr	r1, [pc, #88]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001902:	4b12      	ldr	r3, [pc, #72]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	490e      	ldr	r1, [pc, #56]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001916:	f000 f821 	bl	800195c <HAL_RCC_GetSysClockFreq>
 800191a:	4602      	mov	r2, r0
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	490a      	ldr	r1, [pc, #40]	@ (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	5ccb      	ldrb	r3, [r1, r3]
 800192a:	fa22 f303 	lsr.w	r3, r2, r3
 800192e:	4a09      	ldr	r2, [pc, #36]	@ (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <HAL_RCC_ClockConfig+0x1c8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f9ba 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023c00 	.word	0x40023c00
 800194c:	40023800 	.word	0x40023800
 8001950:	08002ea8 	.word	0x08002ea8
 8001954:	20000000 	.word	0x20000000
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001960:	b094      	sub	sp, #80	@ 0x50
 8001962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001974:	4b79      	ldr	r3, [pc, #484]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	d00d      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x40>
 8001980:	2b08      	cmp	r3, #8
 8001982:	f200 80e1 	bhi.w	8001b48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x34>
 800198a:	2b04      	cmp	r3, #4
 800198c:	d003      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x3a>
 800198e:	e0db      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b73      	ldr	r3, [pc, #460]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001992:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001994:	e0db      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001996:	4b73      	ldr	r3, [pc, #460]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x208>)
 8001998:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800199a:	e0d8      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800199c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x200>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x200>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d063      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x200>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	2200      	movs	r2, #0
 80019ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80019c6:	2300      	movs	r3, #0
 80019c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019ce:	4622      	mov	r2, r4
 80019d0:	462b      	mov	r3, r5
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	0159      	lsls	r1, r3, #5
 80019dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e0:	0150      	lsls	r0, r2, #5
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4621      	mov	r1, r4
 80019e8:	1a51      	subs	r1, r2, r1
 80019ea:	6139      	str	r1, [r7, #16]
 80019ec:	4629      	mov	r1, r5
 80019ee:	eb63 0301 	sbc.w	r3, r3, r1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a00:	4659      	mov	r1, fp
 8001a02:	018b      	lsls	r3, r1, #6
 8001a04:	4651      	mov	r1, sl
 8001a06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a0a:	4651      	mov	r1, sl
 8001a0c:	018a      	lsls	r2, r1, #6
 8001a0e:	4651      	mov	r1, sl
 8001a10:	ebb2 0801 	subs.w	r8, r2, r1
 8001a14:	4659      	mov	r1, fp
 8001a16:	eb63 0901 	sbc.w	r9, r3, r1
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a2e:	4690      	mov	r8, r2
 8001a30:	4699      	mov	r9, r3
 8001a32:	4623      	mov	r3, r4
 8001a34:	eb18 0303 	adds.w	r3, r8, r3
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	462b      	mov	r3, r5
 8001a3c:	eb49 0303 	adc.w	r3, r9, r3
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a4e:	4629      	mov	r1, r5
 8001a50:	024b      	lsls	r3, r1, #9
 8001a52:	4621      	mov	r1, r4
 8001a54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a58:	4621      	mov	r1, r4
 8001a5a:	024a      	lsls	r2, r1, #9
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a62:	2200      	movs	r2, #0
 8001a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a6c:	f7fe fbb4 	bl	80001d8 <__aeabi_uldivmod>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4613      	mov	r3, r2
 8001a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a78:	e058      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7a:	4b38      	ldr	r3, [pc, #224]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	099b      	lsrs	r3, r3, #6
 8001a80:	2200      	movs	r2, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	4611      	mov	r1, r2
 8001a86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a8a:	623b      	str	r3, [r7, #32]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a94:	4642      	mov	r2, r8
 8001a96:	464b      	mov	r3, r9
 8001a98:	f04f 0000 	mov.w	r0, #0
 8001a9c:	f04f 0100 	mov.w	r1, #0
 8001aa0:	0159      	lsls	r1, r3, #5
 8001aa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa6:	0150      	lsls	r0, r2, #5
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4641      	mov	r1, r8
 8001aae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ab2:	4649      	mov	r1, r9
 8001ab4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ac4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ac8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001acc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ad0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	00eb      	lsls	r3, r5, #3
 8001ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ae2:	00e2      	lsls	r2, r4, #3
 8001ae4:	4614      	mov	r4, r2
 8001ae6:	461d      	mov	r5, r3
 8001ae8:	4643      	mov	r3, r8
 8001aea:	18e3      	adds	r3, r4, r3
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	464b      	mov	r3, r9
 8001af0:	eb45 0303 	adc.w	r3, r5, r3
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b02:	4629      	mov	r1, r5
 8001b04:	028b      	lsls	r3, r1, #10
 8001b06:	4621      	mov	r1, r4
 8001b08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	028a      	lsls	r2, r1, #10
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b16:	2200      	movs	r2, #0
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	61fa      	str	r2, [r7, #28]
 8001b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b20:	f7fe fb5a 	bl	80001d8 <__aeabi_uldivmod>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4613      	mov	r3, r2
 8001b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	0c1b      	lsrs	r3, r3, #16
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	3301      	adds	r3, #1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b46:	e002      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3750      	adds	r7, #80	@ 0x50
 8001b54:	46bd      	mov	sp, r7
 8001b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	00f42400 	.word	0x00f42400
 8001b64:	007a1200 	.word	0x007a1200

08001b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	@ (8001b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000

08001b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b84:	f7ff fff0 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	0a9b      	lsrs	r3, r3, #10
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	4903      	ldr	r1, [pc, #12]	@ (8001ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b96:	5ccb      	ldrb	r3, [r1, r3]
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	08002eb8 	.word	0x08002eb8

08001ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bac:	f7ff ffdc 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0b5b      	lsrs	r3, r3, #13
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4903      	ldr	r1, [pc, #12]	@ (8001bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	08002eb8 	.word	0x08002eb8

08001bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e041      	b.n	8001c66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe fee4 	bl	80009c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f000 fab6 	bl	8002180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e041      	b.n	8001d04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d106      	bne.n	8001c9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7fe feb7 	bl	8000a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4610      	mov	r0, r2
 8001cae:	f000 fa67 	bl	8002180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_TIM_PWM_Start+0x24>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	e022      	b.n	8001d76 <HAL_TIM_PWM_Start+0x6a>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d109      	bne.n	8001d4a <HAL_TIM_PWM_Start+0x3e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	bf14      	ite	ne
 8001d42:	2301      	movne	r3, #1
 8001d44:	2300      	moveq	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	e015      	b.n	8001d76 <HAL_TIM_PWM_Start+0x6a>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d109      	bne.n	8001d64 <HAL_TIM_PWM_Start+0x58>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	bf14      	ite	ne
 8001d5c:	2301      	movne	r3, #1
 8001d5e:	2300      	moveq	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	e008      	b.n	8001d76 <HAL_TIM_PWM_Start+0x6a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	bf14      	ite	ne
 8001d70:	2301      	movne	r3, #1
 8001d72:	2300      	moveq	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e068      	b.n	8001e50 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d104      	bne.n	8001d8e <HAL_TIM_PWM_Start+0x82>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d8c:	e013      	b.n	8001db6 <HAL_TIM_PWM_Start+0xaa>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d104      	bne.n	8001d9e <HAL_TIM_PWM_Start+0x92>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d9c:	e00b      	b.n	8001db6 <HAL_TIM_PWM_Start+0xaa>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d104      	bne.n	8001dae <HAL_TIM_PWM_Start+0xa2>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dac:	e003      	b.n	8001db6 <HAL_TIM_PWM_Start+0xaa>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2202      	movs	r2, #2
 8001db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	6839      	ldr	r1, [r7, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fc90 	bl	80026e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	@ (8001e58 <HAL_TIM_PWM_Start+0x14c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d107      	bne.n	8001dde <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <HAL_TIM_PWM_Start+0x14c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d018      	beq.n	8001e1a <HAL_TIM_PWM_Start+0x10e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df0:	d013      	beq.n	8001e1a <HAL_TIM_PWM_Start+0x10e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a19      	ldr	r2, [pc, #100]	@ (8001e5c <HAL_TIM_PWM_Start+0x150>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00e      	beq.n	8001e1a <HAL_TIM_PWM_Start+0x10e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a17      	ldr	r2, [pc, #92]	@ (8001e60 <HAL_TIM_PWM_Start+0x154>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d009      	beq.n	8001e1a <HAL_TIM_PWM_Start+0x10e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a16      	ldr	r2, [pc, #88]	@ (8001e64 <HAL_TIM_PWM_Start+0x158>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d004      	beq.n	8001e1a <HAL_TIM_PWM_Start+0x10e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <HAL_TIM_PWM_Start+0x15c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d111      	bne.n	8001e3e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b06      	cmp	r3, #6
 8001e2a:	d010      	beq.n	8001e4e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3c:	e007      	b.n	8001e4e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40000800 	.word	0x40000800
 8001e64:	40000c00 	.word	0x40000c00
 8001e68:	40014000 	.word	0x40014000

08001e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e0ae      	b.n	8001fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b0c      	cmp	r3, #12
 8001e96:	f200 809f 	bhi.w	8001fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea0:	08001ed5 	.word	0x08001ed5
 8001ea4:	08001fd9 	.word	0x08001fd9
 8001ea8:	08001fd9 	.word	0x08001fd9
 8001eac:	08001fd9 	.word	0x08001fd9
 8001eb0:	08001f15 	.word	0x08001f15
 8001eb4:	08001fd9 	.word	0x08001fd9
 8001eb8:	08001fd9 	.word	0x08001fd9
 8001ebc:	08001fd9 	.word	0x08001fd9
 8001ec0:	08001f57 	.word	0x08001f57
 8001ec4:	08001fd9 	.word	0x08001fd9
 8001ec8:	08001fd9 	.word	0x08001fd9
 8001ecc:	08001fd9 	.word	0x08001fd9
 8001ed0:	08001f97 	.word	0x08001f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f9dc 	bl	8002298 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0208 	orr.w	r2, r2, #8
 8001eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0204 	bic.w	r2, r2, #4
 8001efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6999      	ldr	r1, [r3, #24]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	619a      	str	r2, [r3, #24]
      break;
 8001f12:	e064      	b.n	8001fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fa22 	bl	8002364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6999      	ldr	r1, [r3, #24]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	021a      	lsls	r2, r3, #8
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	619a      	str	r2, [r3, #24]
      break;
 8001f54:	e043      	b.n	8001fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68b9      	ldr	r1, [r7, #8]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fa6d 	bl	800243c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	69da      	ldr	r2, [r3, #28]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0208 	orr.w	r2, r2, #8
 8001f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0204 	bic.w	r2, r2, #4
 8001f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69d9      	ldr	r1, [r3, #28]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	61da      	str	r2, [r3, #28]
      break;
 8001f94:	e023      	b.n	8001fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68b9      	ldr	r1, [r7, #8]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fab7 	bl	8002510 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69da      	ldr	r2, [r3, #28]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69d9      	ldr	r1, [r3, #28]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	021a      	lsls	r2, r3, #8
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	61da      	str	r2, [r3, #28]
      break;
 8001fd6:	e002      	b.n	8001fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	75fb      	strb	r3, [r7, #23]
      break;
 8001fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_TIM_ConfigClockSource+0x1c>
 8002008:	2302      	movs	r3, #2
 800200a:	e0b4      	b.n	8002176 <HAL_TIM_ConfigClockSource+0x186>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800202a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002044:	d03e      	beq.n	80020c4 <HAL_TIM_ConfigClockSource+0xd4>
 8002046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800204a:	f200 8087 	bhi.w	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800204e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002052:	f000 8086 	beq.w	8002162 <HAL_TIM_ConfigClockSource+0x172>
 8002056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800205a:	d87f      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	2b70      	cmp	r3, #112	@ 0x70
 800205e:	d01a      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0xa6>
 8002060:	2b70      	cmp	r3, #112	@ 0x70
 8002062:	d87b      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 8002064:	2b60      	cmp	r3, #96	@ 0x60
 8002066:	d050      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x11a>
 8002068:	2b60      	cmp	r3, #96	@ 0x60
 800206a:	d877      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800206c:	2b50      	cmp	r3, #80	@ 0x50
 800206e:	d03c      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0xfa>
 8002070:	2b50      	cmp	r3, #80	@ 0x50
 8002072:	d873      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 8002074:	2b40      	cmp	r3, #64	@ 0x40
 8002076:	d058      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x13a>
 8002078:	2b40      	cmp	r3, #64	@ 0x40
 800207a:	d86f      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800207c:	2b30      	cmp	r3, #48	@ 0x30
 800207e:	d064      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x15a>
 8002080:	2b30      	cmp	r3, #48	@ 0x30
 8002082:	d86b      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 8002084:	2b20      	cmp	r3, #32
 8002086:	d060      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x15a>
 8002088:	2b20      	cmp	r3, #32
 800208a:	d867      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800208c:	2b00      	cmp	r3, #0
 800208e:	d05c      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x15a>
 8002090:	2b10      	cmp	r3, #16
 8002092:	d05a      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x15a>
 8002094:	e062      	b.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020a6:	f000 fafd 	bl	80026a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80020b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	609a      	str	r2, [r3, #8]
      break;
 80020c2:	e04f      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020d4:	f000 fae6 	bl	80026a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020e6:	609a      	str	r2, [r3, #8]
      break;
 80020e8:	e03c      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f6:	461a      	mov	r2, r3
 80020f8:	f000 fa5a 	bl	80025b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2150      	movs	r1, #80	@ 0x50
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fab3 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 8002108:	e02c      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002116:	461a      	mov	r2, r3
 8002118:	f000 fa79 	bl	800260e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2160      	movs	r1, #96	@ 0x60
 8002122:	4618      	mov	r0, r3
 8002124:	f000 faa3 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 8002128:	e01c      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002136:	461a      	mov	r2, r3
 8002138:	f000 fa3a 	bl	80025b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2140      	movs	r1, #64	@ 0x40
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fa93 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 8002148:	e00c      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4619      	mov	r1, r3
 8002154:	4610      	mov	r0, r2
 8002156:	f000 fa8a 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 800215a:	e003      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
      break;
 8002160:	e000      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3a      	ldr	r2, [pc, #232]	@ (800227c <TIM_Base_SetConfig+0xfc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00f      	beq.n	80021b8 <TIM_Base_SetConfig+0x38>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800219e:	d00b      	beq.n	80021b8 <TIM_Base_SetConfig+0x38>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a37      	ldr	r2, [pc, #220]	@ (8002280 <TIM_Base_SetConfig+0x100>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d007      	beq.n	80021b8 <TIM_Base_SetConfig+0x38>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a36      	ldr	r2, [pc, #216]	@ (8002284 <TIM_Base_SetConfig+0x104>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <TIM_Base_SetConfig+0x38>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a35      	ldr	r2, [pc, #212]	@ (8002288 <TIM_Base_SetConfig+0x108>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d108      	bne.n	80021ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2b      	ldr	r2, [pc, #172]	@ (800227c <TIM_Base_SetConfig+0xfc>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01b      	beq.n	800220a <TIM_Base_SetConfig+0x8a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d8:	d017      	beq.n	800220a <TIM_Base_SetConfig+0x8a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a28      	ldr	r2, [pc, #160]	@ (8002280 <TIM_Base_SetConfig+0x100>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <TIM_Base_SetConfig+0x8a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a27      	ldr	r2, [pc, #156]	@ (8002284 <TIM_Base_SetConfig+0x104>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00f      	beq.n	800220a <TIM_Base_SetConfig+0x8a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a26      	ldr	r2, [pc, #152]	@ (8002288 <TIM_Base_SetConfig+0x108>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00b      	beq.n	800220a <TIM_Base_SetConfig+0x8a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a25      	ldr	r2, [pc, #148]	@ (800228c <TIM_Base_SetConfig+0x10c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <TIM_Base_SetConfig+0x8a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a24      	ldr	r2, [pc, #144]	@ (8002290 <TIM_Base_SetConfig+0x110>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <TIM_Base_SetConfig+0x8a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a23      	ldr	r2, [pc, #140]	@ (8002294 <TIM_Base_SetConfig+0x114>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d108      	bne.n	800221c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a0e      	ldr	r2, [pc, #56]	@ (800227c <TIM_Base_SetConfig+0xfc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d103      	bne.n	8002250 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d105      	bne.n	800226e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f023 0201 	bic.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	611a      	str	r2, [r3, #16]
  }
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40010000 	.word	0x40010000
 8002280:	40000400 	.word	0x40000400
 8002284:	40000800 	.word	0x40000800
 8002288:	40000c00 	.word	0x40000c00
 800228c:	40014000 	.word	0x40014000
 8002290:	40014400 	.word	0x40014400
 8002294:	40014800 	.word	0x40014800

08002298 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f023 0201 	bic.w	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0303 	bic.w	r3, r3, #3
 80022ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f023 0302 	bic.w	r3, r3, #2
 80022e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002360 <TIM_OC1_SetConfig+0xc8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d10c      	bne.n	800230e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f023 0308 	bic.w	r3, r3, #8
 80022fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	4313      	orrs	r3, r2
 8002304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f023 0304 	bic.w	r3, r3, #4
 800230c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a13      	ldr	r2, [pc, #76]	@ (8002360 <TIM_OC1_SetConfig+0xc8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d111      	bne.n	800233a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800231c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	621a      	str	r2, [r3, #32]
}
 8002354:	bf00      	nop
 8002356:	371c      	adds	r7, #28
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40010000 	.word	0x40010000

08002364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f023 0210 	bic.w	r2, r3, #16
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800239a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f023 0320 	bic.w	r3, r3, #32
 80023ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a1e      	ldr	r2, [pc, #120]	@ (8002438 <TIM_OC2_SetConfig+0xd4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d10d      	bne.n	80023e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a15      	ldr	r2, [pc, #84]	@ (8002438 <TIM_OC2_SetConfig+0xd4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d113      	bne.n	8002410 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	621a      	str	r2, [r3, #32]
}
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40010000 	.word	0x40010000

0800243c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800246a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 0303 	bic.w	r3, r3, #3
 8002472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1d      	ldr	r2, [pc, #116]	@ (800250c <TIM_OC3_SetConfig+0xd0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10d      	bne.n	80024b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a14      	ldr	r2, [pc, #80]	@ (800250c <TIM_OC3_SetConfig+0xd0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d113      	bne.n	80024e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	621a      	str	r2, [r3, #32]
}
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40010000 	.word	0x40010000

08002510 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800253e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800255a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	031b      	lsls	r3, r3, #12
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a10      	ldr	r2, [pc, #64]	@ (80025ac <TIM_OC4_SetConfig+0x9c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d109      	bne.n	8002584 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002576:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	019b      	lsls	r3, r3, #6
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	621a      	str	r2, [r3, #32]
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40010000 	.word	0x40010000

080025b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	f023 0201 	bic.w	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f023 030a 	bic.w	r3, r3, #10
 80025ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	621a      	str	r2, [r3, #32]
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800260e:	b480      	push	{r7}
 8002610:	b087      	sub	sp, #28
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f023 0210 	bic.w	r2, r3, #16
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	031b      	lsls	r3, r3, #12
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800264a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	621a      	str	r2, [r3, #32]
}
 8002662:	bf00      	nop
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	f043 0307 	orr.w	r3, r3, #7
 8002690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	609a      	str	r2, [r3, #8]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	021a      	lsls	r2, r3, #8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	609a      	str	r2, [r3, #8]
}
 80026d8:	bf00      	nop
 80026da:	371c      	adds	r7, #28
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2201      	movs	r2, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1a      	ldr	r2, [r3, #32]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	43db      	mvns	r3, r3
 8002706:	401a      	ands	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a1a      	ldr	r2, [r3, #32]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	431a      	orrs	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	621a      	str	r2, [r3, #32]
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002744:	2302      	movs	r3, #2
 8002746:	e050      	b.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800276e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1c      	ldr	r2, [pc, #112]	@ (80027f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d018      	beq.n	80027be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002794:	d013      	beq.n	80027be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a18      	ldr	r2, [pc, #96]	@ (80027fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00e      	beq.n	80027be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a16      	ldr	r2, [pc, #88]	@ (8002800 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a15      	ldr	r2, [pc, #84]	@ (8002804 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a13      	ldr	r2, [pc, #76]	@ (8002808 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10c      	bne.n	80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40010000 	.word	0x40010000
 80027fc:	40000400 	.word	0x40000400
 8002800:	40000800 	.word	0x40000800
 8002804:	40000c00 	.word	0x40000c00
 8002808:	40014000 	.word	0x40014000

0800280c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002824:	2302      	movs	r3, #2
 8002826:	e03d      	b.n	80028a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e042      	b.n	8002948 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe f914 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2224      	movs	r2, #36	@ 0x24
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f82b 	bl	8002950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002954:	b0c0      	sub	sp, #256	@ 0x100
 8002956:	af00      	add	r7, sp, #0
 8002958:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296c:	68d9      	ldr	r1, [r3, #12]
 800296e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	ea40 0301 	orr.w	r3, r0, r1
 8002978:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800297a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	431a      	orrs	r2, r3
 8002988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	431a      	orrs	r2, r3
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029a8:	f021 010c 	bic.w	r1, r1, #12
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029b6:	430b      	orrs	r3, r1
 80029b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ca:	6999      	ldr	r1, [r3, #24]
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	ea40 0301 	orr.w	r3, r0, r1
 80029d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4b8f      	ldr	r3, [pc, #572]	@ (8002c1c <UART_SetConfig+0x2cc>)
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d005      	beq.n	80029f0 <UART_SetConfig+0xa0>
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002c20 <UART_SetConfig+0x2d0>)
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d104      	bne.n	80029fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029f0:	f7ff f8da 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
 80029f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029f8:	e003      	b.n	8002a02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029fa:	f7ff f8c1 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 80029fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a0c:	f040 810c 	bne.w	8002c28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a14:	2200      	movs	r2, #0
 8002a16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a1a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a22:	4622      	mov	r2, r4
 8002a24:	462b      	mov	r3, r5
 8002a26:	1891      	adds	r1, r2, r2
 8002a28:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a2a:	415b      	adcs	r3, r3
 8002a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a32:	4621      	mov	r1, r4
 8002a34:	eb12 0801 	adds.w	r8, r2, r1
 8002a38:	4629      	mov	r1, r5
 8002a3a:	eb43 0901 	adc.w	r9, r3, r1
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a52:	4690      	mov	r8, r2
 8002a54:	4699      	mov	r9, r3
 8002a56:	4623      	mov	r3, r4
 8002a58:	eb18 0303 	adds.w	r3, r8, r3
 8002a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a60:	462b      	mov	r3, r5
 8002a62:	eb49 0303 	adc.w	r3, r9, r3
 8002a66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a76:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a7e:	460b      	mov	r3, r1
 8002a80:	18db      	adds	r3, r3, r3
 8002a82:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a84:	4613      	mov	r3, r2
 8002a86:	eb42 0303 	adc.w	r3, r2, r3
 8002a8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a94:	f7fd fba0 	bl	80001d8 <__aeabi_uldivmod>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4b61      	ldr	r3, [pc, #388]	@ (8002c24 <UART_SetConfig+0x2d4>)
 8002a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	011c      	lsls	r4, r3, #4
 8002aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ab0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ab4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ab8:	4642      	mov	r2, r8
 8002aba:	464b      	mov	r3, r9
 8002abc:	1891      	adds	r1, r2, r2
 8002abe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ac0:	415b      	adcs	r3, r3
 8002ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ac4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ac8:	4641      	mov	r1, r8
 8002aca:	eb12 0a01 	adds.w	sl, r2, r1
 8002ace:	4649      	mov	r1, r9
 8002ad0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ae0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ae4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ae8:	4692      	mov	sl, r2
 8002aea:	469b      	mov	fp, r3
 8002aec:	4643      	mov	r3, r8
 8002aee:	eb1a 0303 	adds.w	r3, sl, r3
 8002af2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002af6:	464b      	mov	r3, r9
 8002af8:	eb4b 0303 	adc.w	r3, fp, r3
 8002afc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b14:	460b      	mov	r3, r1
 8002b16:	18db      	adds	r3, r3, r3
 8002b18:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	eb42 0303 	adc.w	r3, r2, r3
 8002b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b2a:	f7fd fb55 	bl	80001d8 <__aeabi_uldivmod>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4611      	mov	r1, r2
 8002b34:	4b3b      	ldr	r3, [pc, #236]	@ (8002c24 <UART_SetConfig+0x2d4>)
 8002b36:	fba3 2301 	umull	r2, r3, r3, r1
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2264      	movs	r2, #100	@ 0x64
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	1acb      	subs	r3, r1, r3
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b4a:	4b36      	ldr	r3, [pc, #216]	@ (8002c24 <UART_SetConfig+0x2d4>)
 8002b4c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b58:	441c      	add	r4, r3
 8002b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	1891      	adds	r1, r2, r2
 8002b72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b74:	415b      	adcs	r3, r3
 8002b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	1851      	adds	r1, r2, r1
 8002b80:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b82:	4649      	mov	r1, r9
 8002b84:	414b      	adcs	r3, r1
 8002b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b94:	4659      	mov	r1, fp
 8002b96:	00cb      	lsls	r3, r1, #3
 8002b98:	4651      	mov	r1, sl
 8002b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9e:	4651      	mov	r1, sl
 8002ba0:	00ca      	lsls	r2, r1, #3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4642      	mov	r2, r8
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bb0:	464b      	mov	r3, r9
 8002bb2:	460a      	mov	r2, r1
 8002bb4:	eb42 0303 	adc.w	r3, r2, r3
 8002bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bc8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002bcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	18db      	adds	r3, r3, r3
 8002bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	eb42 0303 	adc.w	r3, r2, r3
 8002bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002be2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002be6:	f7fd faf7 	bl	80001d8 <__aeabi_uldivmod>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <UART_SetConfig+0x2d4>)
 8002bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	2164      	movs	r1, #100	@ 0x64
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	3332      	adds	r3, #50	@ 0x32
 8002c02:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <UART_SetConfig+0x2d4>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	f003 0207 	and.w	r2, r3, #7
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4422      	add	r2, r4
 8002c16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c18:	e106      	b.n	8002e28 <UART_SetConfig+0x4d8>
 8002c1a:	bf00      	nop
 8002c1c:	40011000 	.word	0x40011000
 8002c20:	40011400 	.word	0x40011400
 8002c24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c3a:	4642      	mov	r2, r8
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	1891      	adds	r1, r2, r2
 8002c40:	6239      	str	r1, [r7, #32]
 8002c42:	415b      	adcs	r3, r3
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c4a:	4641      	mov	r1, r8
 8002c4c:	1854      	adds	r4, r2, r1
 8002c4e:	4649      	mov	r1, r9
 8002c50:	eb43 0501 	adc.w	r5, r3, r1
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	00eb      	lsls	r3, r5, #3
 8002c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c62:	00e2      	lsls	r2, r4, #3
 8002c64:	4614      	mov	r4, r2
 8002c66:	461d      	mov	r5, r3
 8002c68:	4643      	mov	r3, r8
 8002c6a:	18e3      	adds	r3, r4, r3
 8002c6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c70:	464b      	mov	r3, r9
 8002c72:	eb45 0303 	adc.w	r3, r5, r3
 8002c76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c96:	4629      	mov	r1, r5
 8002c98:	008b      	lsls	r3, r1, #2
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	008a      	lsls	r2, r1, #2
 8002ca4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ca8:	f7fd fa96 	bl	80001d8 <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4b60      	ldr	r3, [pc, #384]	@ (8002e34 <UART_SetConfig+0x4e4>)
 8002cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	011c      	lsls	r4, r3, #4
 8002cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ccc:	4642      	mov	r2, r8
 8002cce:	464b      	mov	r3, r9
 8002cd0:	1891      	adds	r1, r2, r2
 8002cd2:	61b9      	str	r1, [r7, #24]
 8002cd4:	415b      	adcs	r3, r3
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cdc:	4641      	mov	r1, r8
 8002cde:	1851      	adds	r1, r2, r1
 8002ce0:	6139      	str	r1, [r7, #16]
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	414b      	adcs	r3, r1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf4:	4659      	mov	r1, fp
 8002cf6:	00cb      	lsls	r3, r1, #3
 8002cf8:	4651      	mov	r1, sl
 8002cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfe:	4651      	mov	r1, sl
 8002d00:	00ca      	lsls	r2, r1, #3
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	4642      	mov	r2, r8
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d10:	464b      	mov	r3, r9
 8002d12:	460a      	mov	r2, r1
 8002d14:	eb42 0303 	adc.w	r3, r2, r3
 8002d18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d34:	4649      	mov	r1, r9
 8002d36:	008b      	lsls	r3, r1, #2
 8002d38:	4641      	mov	r1, r8
 8002d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d3e:	4641      	mov	r1, r8
 8002d40:	008a      	lsls	r2, r1, #2
 8002d42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d46:	f7fd fa47 	bl	80001d8 <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4b38      	ldr	r3, [pc, #224]	@ (8002e34 <UART_SetConfig+0x4e4>)
 8002d52:	fba3 2301 	umull	r2, r3, r3, r1
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2264      	movs	r2, #100	@ 0x64
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	1acb      	subs	r3, r1, r3
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	3332      	adds	r3, #50	@ 0x32
 8002d64:	4a33      	ldr	r2, [pc, #204]	@ (8002e34 <UART_SetConfig+0x4e4>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d70:	441c      	add	r4, r3
 8002d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d76:	2200      	movs	r2, #0
 8002d78:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d80:	4642      	mov	r2, r8
 8002d82:	464b      	mov	r3, r9
 8002d84:	1891      	adds	r1, r2, r2
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	415b      	adcs	r3, r3
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d90:	4641      	mov	r1, r8
 8002d92:	1851      	adds	r1, r2, r1
 8002d94:	6039      	str	r1, [r7, #0]
 8002d96:	4649      	mov	r1, r9
 8002d98:	414b      	adcs	r3, r1
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002da8:	4659      	mov	r1, fp
 8002daa:	00cb      	lsls	r3, r1, #3
 8002dac:	4651      	mov	r1, sl
 8002dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002db2:	4651      	mov	r1, sl
 8002db4:	00ca      	lsls	r2, r1, #3
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4642      	mov	r2, r8
 8002dbe:	189b      	adds	r3, r3, r2
 8002dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	eb42 0303 	adc.w	r3, r2, r3
 8002dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dd6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002de4:	4649      	mov	r1, r9
 8002de6:	008b      	lsls	r3, r1, #2
 8002de8:	4641      	mov	r1, r8
 8002dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dee:	4641      	mov	r1, r8
 8002df0:	008a      	lsls	r2, r1, #2
 8002df2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002df6:	f7fd f9ef 	bl	80001d8 <__aeabi_uldivmod>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002e34 <UART_SetConfig+0x4e4>)
 8002e00:	fba3 1302 	umull	r1, r3, r3, r2
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	2164      	movs	r1, #100	@ 0x64
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	3332      	adds	r3, #50	@ 0x32
 8002e12:	4a08      	ldr	r2, [pc, #32]	@ (8002e34 <UART_SetConfig+0x4e4>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	f003 020f 	and.w	r2, r3, #15
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4422      	add	r2, r4
 8002e26:	609a      	str	r2, [r3, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e34:	51eb851f 	.word	0x51eb851f

08002e38 <memset>:
 8002e38:	4402      	add	r2, r0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d100      	bne.n	8002e42 <memset+0xa>
 8002e40:	4770      	bx	lr
 8002e42:	f803 1b01 	strb.w	r1, [r3], #1
 8002e46:	e7f9      	b.n	8002e3c <memset+0x4>

08002e48 <__libc_init_array>:
 8002e48:	b570      	push	{r4, r5, r6, lr}
 8002e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8002e80 <__libc_init_array+0x38>)
 8002e4c:	4c0d      	ldr	r4, [pc, #52]	@ (8002e84 <__libc_init_array+0x3c>)
 8002e4e:	1b64      	subs	r4, r4, r5
 8002e50:	10a4      	asrs	r4, r4, #2
 8002e52:	2600      	movs	r6, #0
 8002e54:	42a6      	cmp	r6, r4
 8002e56:	d109      	bne.n	8002e6c <__libc_init_array+0x24>
 8002e58:	4d0b      	ldr	r5, [pc, #44]	@ (8002e88 <__libc_init_array+0x40>)
 8002e5a:	4c0c      	ldr	r4, [pc, #48]	@ (8002e8c <__libc_init_array+0x44>)
 8002e5c:	f000 f818 	bl	8002e90 <_init>
 8002e60:	1b64      	subs	r4, r4, r5
 8002e62:	10a4      	asrs	r4, r4, #2
 8002e64:	2600      	movs	r6, #0
 8002e66:	42a6      	cmp	r6, r4
 8002e68:	d105      	bne.n	8002e76 <__libc_init_array+0x2e>
 8002e6a:	bd70      	pop	{r4, r5, r6, pc}
 8002e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e70:	4798      	blx	r3
 8002e72:	3601      	adds	r6, #1
 8002e74:	e7ee      	b.n	8002e54 <__libc_init_array+0xc>
 8002e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e7a:	4798      	blx	r3
 8002e7c:	3601      	adds	r6, #1
 8002e7e:	e7f2      	b.n	8002e66 <__libc_init_array+0x1e>
 8002e80:	08002ec8 	.word	0x08002ec8
 8002e84:	08002ec8 	.word	0x08002ec8
 8002e88:	08002ec8 	.word	0x08002ec8
 8002e8c:	08002ecc 	.word	0x08002ecc

08002e90 <_init>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	bf00      	nop
 8002e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e96:	bc08      	pop	{r3}
 8002e98:	469e      	mov	lr, r3
 8002e9a:	4770      	bx	lr

08002e9c <_fini>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	bf00      	nop
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr
