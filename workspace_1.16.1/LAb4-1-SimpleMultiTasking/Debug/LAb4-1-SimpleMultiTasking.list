
LAb4-1-SimpleMultiTasking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005484  08005484  00006484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054fc  080054fc  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  080054fc  080054fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005504  08005504  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005504  08005504  00006504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005508  08005508  00006508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800550c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a0c  20000010  0800551c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a1c  0800551c  00007a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016183  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e8  00000000  00000000  0001d1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  000202b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f5c  00000000  00000000  00021668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002dc5  00000000  00000000  000225c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016114  00000000  00000000  00025389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000980a6  00000000  00000000  0003b49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3543  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000537c  00000000  00000000  000d3588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000d8904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800546c 	.word	0x0800546c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800546c 	.word	0x0800546c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <secondTask>:
};
/* USER CODE BEGIN PV */
osThreadId_t secondTaskHandle;
osThreadId_t thirdTaskHandle;

void secondTask(void *argument) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	char ch = 'A';
 80004d8:	2341      	movs	r3, #65	@ 0x41
 80004da:	73fb      	strb	r3, [r7, #15]
	while (1) {
		HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 80004dc:	f107 010f 	add.w	r1, r7, #15
 80004e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004e4:	2201      	movs	r2, #1
 80004e6:	4804      	ldr	r0, [pc, #16]	@ (80004f8 <secondTask+0x28>)
 80004e8:	f001 fd70 	bl	8001fcc <HAL_UART_Transmit>
		osDelay(1000);
 80004ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004f0:	f002 fade 	bl	8002ab0 <osDelay>
		HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 80004f4:	bf00      	nop
 80004f6:	e7f1      	b.n	80004dc <secondTask+0xc>
 80004f8:	2000002c 	.word	0x2000002c

080004fc <thirdTask>:
	}
	vTaskDelete(NULL);
}

void thirdTask(void *argument) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	char ch;
	while (1) {
		osDelay(1);
 8000504:	2001      	movs	r0, #1
 8000506:	f002 fad3 	bl	8002ab0 <osDelay>
		if (HAL_UART_Receive(&huart2, &ch, 1, 0) == HAL_OK) {
 800050a:	f107 010f 	add.w	r1, r7, #15
 800050e:	2300      	movs	r3, #0
 8000510:	2201      	movs	r2, #1
 8000512:	480d      	ldr	r0, [pc, #52]	@ (8000548 <thirdTask+0x4c>)
 8000514:	f001 fde5 	bl	80020e2 <HAL_UART_Receive>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d1f2      	bne.n	8000504 <thirdTask+0x8>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800051e:	2140      	movs	r1, #64	@ 0x40
 8000520:	480a      	ldr	r0, [pc, #40]	@ (800054c <thirdTask+0x50>)
 8000522:	f000 fdaa 	bl	800107a <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 8000526:	f107 010f 	add.w	r1, r7, #15
 800052a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800052e:	2201      	movs	r2, #1
 8000530:	4805      	ldr	r0, [pc, #20]	@ (8000548 <thirdTask+0x4c>)
 8000532:	f001 fd4b 	bl	8001fcc <HAL_UART_Transmit>
			osDelay(10);
 8000536:	200a      	movs	r0, #10
 8000538:	f002 faba 	bl	8002ab0 <osDelay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800053c:	2140      	movs	r1, #64	@ 0x40
 800053e:	4803      	ldr	r0, [pc, #12]	@ (800054c <thirdTask+0x50>)
 8000540:	f000 fd9b 	bl	800107a <HAL_GPIO_TogglePin>
		osDelay(1);
 8000544:	e7de      	b.n	8000504 <thirdTask+0x8>
 8000546:	bf00      	nop
 8000548:	2000002c 	.word	0x2000002c
 800054c:	40020000 	.word	0x40020000

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b092      	sub	sp, #72	@ 0x48
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 facf 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f851 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 f8e3 	bl	8000728 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000562:	f000 f8b7 	bl	80006d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000566:	f002 f9c7 	bl	80028f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800056a:	4a1c      	ldr	r2, [pc, #112]	@ (80005dc <main+0x8c>)
 800056c:	2100      	movs	r1, #0
 800056e:	481c      	ldr	r0, [pc, #112]	@ (80005e0 <main+0x90>)
 8000570:	f002 fa0c 	bl	800298c <osThreadNew>
 8000574:	4603      	mov	r3, r0
 8000576:	4a1b      	ldr	r2, [pc, #108]	@ (80005e4 <main+0x94>)
 8000578:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  const osThreadAttr_t secondTask_attributes = {
 800057a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800057e:	2224      	movs	r2, #36	@ 0x24
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f004 ff38 	bl	80053f8 <memset>
 8000588:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <main+0x98>)
 800058a:	627b      	str	r3, [r7, #36]	@ 0x24
 800058c:	2380      	movs	r3, #128	@ 0x80
 800058e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000590:	2318      	movs	r3, #24
 8000592:	63fb      	str	r3, [r7, #60]	@ 0x3c
		  .name = "secondTask",
		  .priority = (osPriority_t) osPriorityNormal,
		  .stack_size = 128
  };
  secondTaskHandle = osThreadNew(secondTask, NULL, &secondTask_attributes);
 8000594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000598:	461a      	mov	r2, r3
 800059a:	2100      	movs	r1, #0
 800059c:	4813      	ldr	r0, [pc, #76]	@ (80005ec <main+0x9c>)
 800059e:	f002 f9f5 	bl	800298c <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a12      	ldr	r2, [pc, #72]	@ (80005f0 <main+0xa0>)
 80005a6:	6013      	str	r3, [r2, #0]

  const osThreadAttr_t thirdTask_attributes = {
 80005a8:	463b      	mov	r3, r7
 80005aa:	2224      	movs	r2, #36	@ 0x24
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 ff22 	bl	80053f8 <memset>
 80005b4:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <main+0xa4>)
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	2318      	movs	r3, #24
 80005be:	61bb      	str	r3, [r7, #24]
		  .name = "thirdTask",
		  .priority = (osPriority_t) osPriorityNormal,
		  .stack_size = 128
  };
  thirdTaskHandle = osThreadNew(thirdTask, NULL, &thirdTask_attributes);
 80005c0:	463b      	mov	r3, r7
 80005c2:	461a      	mov	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <main+0xa8>)
 80005c8:	f002 f9e0 	bl	800298c <osThreadNew>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a0b      	ldr	r2, [pc, #44]	@ (80005fc <main+0xac>)
 80005d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d2:	f002 f9b5 	bl	8002940 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d6:	bf00      	nop
 80005d8:	e7fd      	b.n	80005d6 <main+0x86>
 80005da:	bf00      	nop
 80005dc:	080054c0 	.word	0x080054c0
 80005e0:	08000805 	.word	0x08000805
 80005e4:	20000074 	.word	0x20000074
 80005e8:	08005490 	.word	0x08005490
 80005ec:	080004d1 	.word	0x080004d1
 80005f0:	20000078 	.word	0x20000078
 80005f4:	0800549c 	.word	0x0800549c
 80005f8:	080004fd 	.word	0x080004fd
 80005fc:	2000007c 	.word	0x2000007c

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	@ 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 fef2 	bl	80053f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a27      	ldr	r2, [pc, #156]	@ (80006cc <SystemClock_Config+0xcc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	@ (80006d0 <SystemClock_Config+0xd0>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000670:	2310      	movs	r3, #16
 8000672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000674:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000678:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067a:	2304      	movs	r3, #4
 800067c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067e:	2304      	movs	r3, #4
 8000680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fd12 	bl	80010b0 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000692:	f000 f8d9 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ff74 	bl	80015a0 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006be:	f000 f8c3 	bl	8000848 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	@ 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <MX_USART2_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 800070c:	f001 fc0e 	bl	8001f2c <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f897 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000002c 	.word	0x2000002c
 8000724:	40004400 	.word	0x40004400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	@ 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b2d      	ldr	r3, [pc, #180]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a25      	ldr	r2, [pc, #148]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a1e      	ldr	r2, [pc, #120]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a17      	ldr	r2, [pc, #92]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red1_Pin|LED_Red2_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2150      	movs	r1, #80	@ 0x50
 80007b2:	4812      	ldr	r0, [pc, #72]	@ (80007fc <MX_GPIO_Init+0xd4>)
 80007b4:	f000 fc48 	bl	8001048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	480c      	ldr	r0, [pc, #48]	@ (8000800 <MX_GPIO_Init+0xd8>)
 80007d0:	f000 fab6 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Red1_Pin LED_Red2_Pin */
  GPIO_InitStruct.Pin = LED_Red1_Pin|LED_Red2_Pin;
 80007d4:	2350      	movs	r3, #80	@ 0x50
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	@ (80007fc <MX_GPIO_Init+0xd4>)
 80007ec:	f000 faa8 	bl	8000d40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	@ 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020800 	.word	0x40020800

08000804 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//The external red LED is set to pin 4 (PA4 as GPIO)
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800080c:	2110      	movs	r1, #16
 800080e:	4804      	ldr	r0, [pc, #16]	@ (8000820 <StartDefaultTask+0x1c>)
 8000810:	f000 fc33 	bl	800107a <HAL_GPIO_TogglePin>
    osDelay(50);
 8000814:	2032      	movs	r0, #50	@ 0x32
 8000816:	f002 f94b 	bl	8002ab0 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800081a:	bf00      	nop
 800081c:	e7f6      	b.n	800080c <StartDefaultTask+0x8>
 800081e:	bf00      	nop
 8000820:	40020000 	.word	0x40020000

08000824 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	@ (8000844 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d101      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000836:	f000 f981 	bl	8000b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40000800 	.word	0x40000800

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <Error_Handler+0x8>

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <HAL_MspInit+0x54>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	4a11      	ldr	r2, [pc, #68]	@ (80008a8 <HAL_MspInit+0x54>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000868:	6453      	str	r3, [r2, #68]	@ 0x44
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_MspInit+0x54>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <HAL_MspInit+0x54>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a0a      	ldr	r2, [pc, #40]	@ (80008a8 <HAL_MspInit+0x54>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <HAL_MspInit+0x54>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	210f      	movs	r1, #15
 8000896:	f06f 0001 	mvn.w	r0, #1
 800089a:	f000 fa27 	bl	8000cec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	@ 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a19      	ldr	r2, [pc, #100]	@ (8000930 <HAL_UART_MspInit+0x84>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d12b      	bne.n	8000926 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <HAL_UART_MspInit+0x88>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	4a17      	ldr	r2, [pc, #92]	@ (8000934 <HAL_UART_MspInit+0x88>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008de:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <HAL_UART_MspInit+0x88>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <HAL_UART_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a10      	ldr	r2, [pc, #64]	@ (8000934 <HAL_UART_MspInit+0x88>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <HAL_UART_MspInit+0x88>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000906:	230c      	movs	r3, #12
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000916:	2307      	movs	r3, #7
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	@ (8000938 <HAL_UART_MspInit+0x8c>)
 8000922:	f000 fa0d 	bl	8000d40 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	@ 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40004400 	.word	0x40004400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	@ 0x38
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4b33      	ldr	r3, [pc, #204]	@ (8000a20 <HAL_InitTick+0xe4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	4a32      	ldr	r2, [pc, #200]	@ (8000a20 <HAL_InitTick+0xe4>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	6413      	str	r3, [r2, #64]	@ 0x40
 800095c:	4b30      	ldr	r3, [pc, #192]	@ (8000a20 <HAL_InitTick+0xe4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000968:	f107 0210 	add.w	r2, r7, #16
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f834 	bl	80019e0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800097c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800097e:	2b00      	cmp	r3, #0
 8000980:	d103      	bne.n	800098a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000982:	f001 f805 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8000986:	6378      	str	r0, [r7, #52]	@ 0x34
 8000988:	e004      	b.n	8000994 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800098a:	f001 f801 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 800098e:	4603      	mov	r3, r0
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000996:	4a23      	ldr	r2, [pc, #140]	@ (8000a24 <HAL_InitTick+0xe8>)
 8000998:	fba2 2303 	umull	r2, r3, r2, r3
 800099c:	0c9b      	lsrs	r3, r3, #18
 800099e:	3b01      	subs	r3, #1
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <HAL_InitTick+0xec>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	@ (8000a2c <HAL_InitTick+0xf0>)
 80009a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <HAL_InitTick+0xec>)
 80009aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009ae:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a28 <HAL_InitTick+0xec>)
 80009b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b4:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <HAL_InitTick+0xec>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <HAL_InitTick+0xec>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <HAL_InitTick+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80009c8:	4817      	ldr	r0, [pc, #92]	@ (8000a28 <HAL_InitTick+0xec>)
 80009ca:	f001 f83b 	bl	8001a44 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d11b      	bne.n	8000a14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80009dc:	4812      	ldr	r0, [pc, #72]	@ (8000a28 <HAL_InitTick+0xec>)
 80009de:	f001 f88b 	bl	8001af8 <HAL_TIM_Base_Start_IT>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d111      	bne.n	8000a14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009f0:	201e      	movs	r0, #30
 80009f2:	f000 f997 	bl	8000d24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d808      	bhi.n	8000a0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	201e      	movs	r0, #30
 8000a02:	f000 f973 	bl	8000cec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <HAL_InitTick+0xf4>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e002      	b.n	8000a14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3738      	adds	r7, #56	@ 0x38
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	431bde83 	.word	0x431bde83
 8000a28:	20000080 	.word	0x20000080
 8000a2c:	40000800 	.word	0x40000800
 8000a30:	20000004 	.word	0x20000004

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <NMI_Handler+0x4>

08000a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a70:	4802      	ldr	r0, [pc, #8]	@ (8000a7c <TIM4_IRQHandler+0x10>)
 8000a72:	f001 f8a3 	bl	8001bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000080 	.word	0x20000080

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000adc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aa8:	f7ff ffea 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	@ (8000ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8000af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f004 fc99 	bl	8005408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f7ff fd3b 	bl	8000550 <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ae8:	0800550c 	.word	0x0800550c
  ldr r2, =_sbss
 8000aec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000af0:	20004a1c 	.word	0x20004a1c

08000af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000afc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <HAL_Init+0x40>)
 8000b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <HAL_Init+0x40>)
 8000b0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <HAL_Init+0x40>)
 8000b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f8d8 	bl	8000cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f7ff ff08 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fe92 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023c00 	.word	0x40023c00

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	200000c8 	.word	0x200000c8

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	@ (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	200000c8 	.word	0x200000c8

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	@ (8000c18 <__NVIC_EnableIRQ+0x38>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	@ (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	@ (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	@ 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	@ 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff4c 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfe:	f7ff ff61 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	6978      	ldr	r0, [r7, #20]
 8000d0a:	f7ff ffb1 	bl	8000c70 <NVIC_EncodePriority>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff80 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d1c:	bf00      	nop
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff54 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	@ 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
 8000d5a:	e159      	b.n	8001010 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	f040 8148 	bne.w	800100a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d005      	beq.n	8000d92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d130      	bne.n	8000df4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	68da      	ldr	r2, [r3, #12]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	091b      	lsrs	r3, r3, #4
 8000dde:	f003 0201 	and.w	r2, r3, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d017      	beq.n	8000e30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d123      	bne.n	8000e84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	220f      	movs	r2, #15
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	691a      	ldr	r2, [r3, #16]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	69b9      	ldr	r1, [r7, #24]
 8000e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0203 	and.w	r2, r3, #3
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 80a2 	beq.w	800100a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b57      	ldr	r3, [pc, #348]	@ (8001028 <HAL_GPIO_Init+0x2e8>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ece:	4a56      	ldr	r2, [pc, #344]	@ (8001028 <HAL_GPIO_Init+0x2e8>)
 8000ed0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed6:	4b54      	ldr	r3, [pc, #336]	@ (8001028 <HAL_GPIO_Init+0x2e8>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee2:	4a52      	ldr	r2, [pc, #328]	@ (800102c <HAL_GPIO_Init+0x2ec>)
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a49      	ldr	r2, [pc, #292]	@ (8001030 <HAL_GPIO_Init+0x2f0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d019      	beq.n	8000f42 <HAL_GPIO_Init+0x202>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a48      	ldr	r2, [pc, #288]	@ (8001034 <HAL_GPIO_Init+0x2f4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d013      	beq.n	8000f3e <HAL_GPIO_Init+0x1fe>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a47      	ldr	r2, [pc, #284]	@ (8001038 <HAL_GPIO_Init+0x2f8>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00d      	beq.n	8000f3a <HAL_GPIO_Init+0x1fa>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a46      	ldr	r2, [pc, #280]	@ (800103c <HAL_GPIO_Init+0x2fc>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d007      	beq.n	8000f36 <HAL_GPIO_Init+0x1f6>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a45      	ldr	r2, [pc, #276]	@ (8001040 <HAL_GPIO_Init+0x300>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <HAL_GPIO_Init+0x1f2>
 8000f2e:	2304      	movs	r3, #4
 8000f30:	e008      	b.n	8000f44 <HAL_GPIO_Init+0x204>
 8000f32:	2307      	movs	r3, #7
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x204>
 8000f36:	2303      	movs	r3, #3
 8000f38:	e004      	b.n	8000f44 <HAL_GPIO_Init+0x204>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e002      	b.n	8000f44 <HAL_GPIO_Init+0x204>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <HAL_GPIO_Init+0x204>
 8000f42:	2300      	movs	r3, #0
 8000f44:	69fa      	ldr	r2, [r7, #28]
 8000f46:	f002 0203 	and.w	r2, r2, #3
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	4093      	lsls	r3, r2
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f54:	4935      	ldr	r1, [pc, #212]	@ (800102c <HAL_GPIO_Init+0x2ec>)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f62:	4b38      	ldr	r3, [pc, #224]	@ (8001044 <HAL_GPIO_Init+0x304>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f86:	4a2f      	ldr	r2, [pc, #188]	@ (8001044 <HAL_GPIO_Init+0x304>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <HAL_GPIO_Init+0x304>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb0:	4a24      	ldr	r2, [pc, #144]	@ (8001044 <HAL_GPIO_Init+0x304>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <HAL_GPIO_Init+0x304>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fda:	4a1a      	ldr	r2, [pc, #104]	@ (8001044 <HAL_GPIO_Init+0x304>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe0:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <HAL_GPIO_Init+0x304>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001004:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <HAL_GPIO_Init+0x304>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3301      	adds	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	f67f aea2 	bls.w	8000d5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3724      	adds	r7, #36	@ 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40013800 	.word	0x40013800
 8001030:	40020000 	.word	0x40020000
 8001034:	40020400 	.word	0x40020400
 8001038:	40020800 	.word	0x40020800
 800103c:	40020c00 	.word	0x40020c00
 8001040:	40021000 	.word	0x40021000
 8001044:	40013c00 	.word	0x40013c00

08001048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
 8001054:	4613      	mov	r3, r2
 8001056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001058:	787b      	ldrb	r3, [r7, #1]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001064:	e003      	b.n	800106e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001066:	887b      	ldrh	r3, [r7, #2]
 8001068:	041a      	lsls	r2, r3, #16
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	619a      	str	r2, [r3, #24]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800107a:	b480      	push	{r7}
 800107c:	b085      	sub	sp, #20
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800108c:	887a      	ldrh	r2, [r7, #2]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4013      	ands	r3, r2
 8001092:	041a      	lsls	r2, r3, #16
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43d9      	mvns	r1, r3
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	400b      	ands	r3, r1
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	619a      	str	r2, [r3, #24]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e267      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d075      	beq.n	80011ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010ce:	4b88      	ldr	r3, [pc, #544]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d00c      	beq.n	80010f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010da:	4b85      	ldr	r3, [pc, #532]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d112      	bne.n	800110c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e6:	4b82      	ldr	r3, [pc, #520]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010f2:	d10b      	bne.n	800110c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	4b7e      	ldr	r3, [pc, #504]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d05b      	beq.n	80011b8 <HAL_RCC_OscConfig+0x108>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d157      	bne.n	80011b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e242      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001114:	d106      	bne.n	8001124 <HAL_RCC_OscConfig+0x74>
 8001116:	4b76      	ldr	r3, [pc, #472]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a75      	ldr	r2, [pc, #468]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e01d      	b.n	8001160 <HAL_RCC_OscConfig+0xb0>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x98>
 800112e:	4b70      	ldr	r3, [pc, #448]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6f      	ldr	r2, [pc, #444]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b6d      	ldr	r3, [pc, #436]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a6c      	ldr	r2, [pc, #432]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e00b      	b.n	8001160 <HAL_RCC_OscConfig+0xb0>
 8001148:	4b69      	ldr	r3, [pc, #420]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a68      	ldr	r2, [pc, #416]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800114e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b66      	ldr	r3, [pc, #408]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a65      	ldr	r2, [pc, #404]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d013      	beq.n	8001190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fcfc 	bl	8000b64 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fcf8 	bl	8000b64 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	@ 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e207      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	4b5b      	ldr	r3, [pc, #364]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0xc0>
 800118e:	e014      	b.n	80011ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fce8 	bl	8000b64 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff fce4 	bl	8000b64 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	@ 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e1f3      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011aa:	4b51      	ldr	r3, [pc, #324]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <HAL_RCC_OscConfig+0xe8>
 80011b6:	e000      	b.n	80011ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d063      	beq.n	800128e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011c6:	4b4a      	ldr	r3, [pc, #296]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d2:	4b47      	ldr	r3, [pc, #284]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d11c      	bne.n	8001218 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011de:	4b44      	ldr	r3, [pc, #272]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d116      	bne.n	8001218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	4b41      	ldr	r3, [pc, #260]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <HAL_RCC_OscConfig+0x152>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d001      	beq.n	8001202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e1c7      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4937      	ldr	r1, [pc, #220]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001212:	4313      	orrs	r3, r2
 8001214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001216:	e03a      	b.n	800128e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d020      	beq.n	8001262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001220:	4b34      	ldr	r3, [pc, #208]	@ (80012f4 <HAL_RCC_OscConfig+0x244>)
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001226:	f7ff fc9d 	bl	8000b64 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff fc99 	bl	8000b64 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e1a8      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4925      	ldr	r1, [pc, #148]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
 8001260:	e015      	b.n	800128e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001262:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <HAL_RCC_OscConfig+0x244>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fc7c 	bl	8000b64 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001270:	f7ff fc78 	bl	8000b64 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e187      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d036      	beq.n	8001308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d016      	beq.n	80012d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <HAL_RCC_OscConfig+0x248>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a8:	f7ff fc5c 	bl	8000b64 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc58 	bl	8000b64 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e167      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80012c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x200>
 80012ce:	e01b      	b.n	8001308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_RCC_OscConfig+0x248>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fc45 	bl	8000b64 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	e00e      	b.n	80012fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012de:	f7ff fc41 	bl	8000b64 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d907      	bls.n	80012fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e150      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
 80012f0:	40023800 	.word	0x40023800
 80012f4:	42470000 	.word	0x42470000
 80012f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	4b88      	ldr	r3, [pc, #544]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80012fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1ea      	bne.n	80012de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 8097 	beq.w	8001444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b81      	ldr	r3, [pc, #516]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b7d      	ldr	r3, [pc, #500]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	4a7c      	ldr	r2, [pc, #496]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	@ 0x40
 8001336:	4b7a      	ldr	r3, [pc, #488]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001342:	2301      	movs	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b77      	ldr	r3, [pc, #476]	@ (8001524 <HAL_RCC_OscConfig+0x474>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d118      	bne.n	8001384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001352:	4b74      	ldr	r3, [pc, #464]	@ (8001524 <HAL_RCC_OscConfig+0x474>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a73      	ldr	r2, [pc, #460]	@ (8001524 <HAL_RCC_OscConfig+0x474>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800135c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135e:	f7ff fc01 	bl	8000b64 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001366:	f7ff fbfd 	bl	8000b64 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e10c      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	4b6a      	ldr	r3, [pc, #424]	@ (8001524 <HAL_RCC_OscConfig+0x474>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x2ea>
 800138c:	4b64      	ldr	r3, [pc, #400]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001390:	4a63      	ldr	r2, [pc, #396]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6713      	str	r3, [r2, #112]	@ 0x70
 8001398:	e01c      	b.n	80013d4 <HAL_RCC_OscConfig+0x324>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x30c>
 80013a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ba:	e00b      	b.n	80013d4 <HAL_RCC_OscConfig+0x324>
 80013bc:	4b58      	ldr	r3, [pc, #352]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c0:	4a57      	ldr	r2, [pc, #348]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013c2:	f023 0301 	bic.w	r3, r3, #1
 80013c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80013c8:	4b55      	ldr	r3, [pc, #340]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013cc:	4a54      	ldr	r2, [pc, #336]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013ce:	f023 0304 	bic.w	r3, r3, #4
 80013d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d015      	beq.n	8001408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff fbc2 	bl	8000b64 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e2:	e00a      	b.n	80013fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e4:	f7ff fbbe 	bl	8000b64 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e0cb      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fa:	4b49      	ldr	r3, [pc, #292]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0ee      	beq.n	80013e4 <HAL_RCC_OscConfig+0x334>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001408:	f7ff fbac 	bl	8000b64 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140e:	e00a      	b.n	8001426 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001410:	f7ff fba8 	bl	8000b64 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800141e:	4293      	cmp	r3, r2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e0b5      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001426:	4b3e      	ldr	r3, [pc, #248]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1ee      	bne.n	8001410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001438:	4b39      	ldr	r3, [pc, #228]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143c:	4a38      	ldr	r2, [pc, #224]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800143e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001442:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80a1 	beq.w	8001590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800144e:	4b34      	ldr	r3, [pc, #208]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b08      	cmp	r3, #8
 8001458:	d05c      	beq.n	8001514 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d141      	bne.n	80014e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001462:	4b31      	ldr	r3, [pc, #196]	@ (8001528 <HAL_RCC_OscConfig+0x478>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fb7c 	bl	8000b64 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001470:	f7ff fb78 	bl	8000b64 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e087      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001482:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69da      	ldr	r2, [r3, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149c:	019b      	lsls	r3, r3, #6
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	3b01      	subs	r3, #1
 80014a8:	041b      	lsls	r3, r3, #16
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	491b      	ldr	r1, [pc, #108]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <HAL_RCC_OscConfig+0x478>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff fb51 	bl	8000b64 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c6:	f7ff fb4d 	bl	8000b64 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e05c      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x416>
 80014e4:	e054      	b.n	8001590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <HAL_RCC_OscConfig+0x478>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fb3a 	bl	8000b64 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff fb36 	bl	8000b64 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e045      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x444>
 8001512:	e03d      	b.n	8001590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d107      	bne.n	800152c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e038      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
 8001520:	40023800 	.word	0x40023800
 8001524:	40007000 	.word	0x40007000
 8001528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <HAL_RCC_OscConfig+0x4ec>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d028      	beq.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d121      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	429a      	cmp	r2, r3
 8001554:	d11a      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800155c:	4013      	ands	r3, r2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001564:	4293      	cmp	r3, r2
 8001566:	d111      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	3b01      	subs	r3, #1
 8001576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001578:	429a      	cmp	r2, r3
 800157a:	d107      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0cc      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b4:	4b68      	ldr	r3, [pc, #416]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d90c      	bls.n	80015dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b65      	ldr	r3, [pc, #404]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b63      	ldr	r3, [pc, #396]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0b8      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f4:	4b59      	ldr	r3, [pc, #356]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a58      	ldr	r2, [pc, #352]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800160c:	4b53      	ldr	r3, [pc, #332]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a52      	ldr	r2, [pc, #328]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001618:	4b50      	ldr	r3, [pc, #320]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	494d      	ldr	r1, [pc, #308]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d044      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b47      	ldr	r3, [pc, #284]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d119      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e07f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d003      	beq.n	800165e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165a:	2b03      	cmp	r3, #3
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	4b3f      	ldr	r3, [pc, #252]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e06f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	4b3b      	ldr	r3, [pc, #236]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e067      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167e:	4b37      	ldr	r3, [pc, #220]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f023 0203 	bic.w	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4934      	ldr	r1, [pc, #208]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001690:	f7ff fa68 	bl	8000b64 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	e00a      	b.n	80016ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001698:	f7ff fa64 	bl	8000b64 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e04f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 020c 	and.w	r2, r3, #12
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	429a      	cmp	r2, r3
 80016be:	d1eb      	bne.n	8001698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c0:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d20c      	bcs.n	80016e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b22      	ldr	r3, [pc, #136]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e032      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f4:	4b19      	ldr	r3, [pc, #100]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4916      	ldr	r1, [pc, #88]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001712:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	490e      	ldr	r1, [pc, #56]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001726:	f000 f821 	bl	800176c <HAL_RCC_GetSysClockFreq>
 800172a:	4602      	mov	r2, r0
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	490a      	ldr	r1, [pc, #40]	@ (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	5ccb      	ldrb	r3, [r1, r3]
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	4a09      	ldr	r2, [pc, #36]	@ (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f8f8 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00
 800175c:	40023800 	.word	0x40023800
 8001760:	080054e4 	.word	0x080054e4
 8001764:	20000000 	.word	0x20000000
 8001768:	20000004 	.word	0x20000004

0800176c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800176c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001770:	b094      	sub	sp, #80	@ 0x50
 8001772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001784:	4b79      	ldr	r3, [pc, #484]	@ (800196c <HAL_RCC_GetSysClockFreq+0x200>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b08      	cmp	r3, #8
 800178e:	d00d      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0x40>
 8001790:	2b08      	cmp	r3, #8
 8001792:	f200 80e1 	bhi.w	8001958 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x34>
 800179a:	2b04      	cmp	r3, #4
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800179e:	e0db      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a0:	4b73      	ldr	r3, [pc, #460]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x204>)
 80017a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017a4:	e0db      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017a6:	4b73      	ldr	r3, [pc, #460]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x208>)
 80017a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017aa:	e0d8      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ac:	4b6f      	ldr	r3, [pc, #444]	@ (800196c <HAL_RCC_GetSysClockFreq+0x200>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017b6:	4b6d      	ldr	r3, [pc, #436]	@ (800196c <HAL_RCC_GetSysClockFreq+0x200>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d063      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c2:	4b6a      	ldr	r3, [pc, #424]	@ (800196c <HAL_RCC_GetSysClockFreq+0x200>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	2200      	movs	r2, #0
 80017ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017d6:	2300      	movs	r3, #0
 80017d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80017da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017de:	4622      	mov	r2, r4
 80017e0:	462b      	mov	r3, r5
 80017e2:	f04f 0000 	mov.w	r0, #0
 80017e6:	f04f 0100 	mov.w	r1, #0
 80017ea:	0159      	lsls	r1, r3, #5
 80017ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f0:	0150      	lsls	r0, r2, #5
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4621      	mov	r1, r4
 80017f8:	1a51      	subs	r1, r2, r1
 80017fa:	6139      	str	r1, [r7, #16]
 80017fc:	4629      	mov	r1, r5
 80017fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001810:	4659      	mov	r1, fp
 8001812:	018b      	lsls	r3, r1, #6
 8001814:	4651      	mov	r1, sl
 8001816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800181a:	4651      	mov	r1, sl
 800181c:	018a      	lsls	r2, r1, #6
 800181e:	4651      	mov	r1, sl
 8001820:	ebb2 0801 	subs.w	r8, r2, r1
 8001824:	4659      	mov	r1, fp
 8001826:	eb63 0901 	sbc.w	r9, r3, r1
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800183a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800183e:	4690      	mov	r8, r2
 8001840:	4699      	mov	r9, r3
 8001842:	4623      	mov	r3, r4
 8001844:	eb18 0303 	adds.w	r3, r8, r3
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	462b      	mov	r3, r5
 800184c:	eb49 0303 	adc.w	r3, r9, r3
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800185e:	4629      	mov	r1, r5
 8001860:	024b      	lsls	r3, r1, #9
 8001862:	4621      	mov	r1, r4
 8001864:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001868:	4621      	mov	r1, r4
 800186a:	024a      	lsls	r2, r1, #9
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001872:	2200      	movs	r2, #0
 8001874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800187c:	f7fe fcb0 	bl	80001e0 <__aeabi_uldivmod>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4613      	mov	r3, r2
 8001886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001888:	e058      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188a:	4b38      	ldr	r3, [pc, #224]	@ (800196c <HAL_RCC_GetSysClockFreq+0x200>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	099b      	lsrs	r3, r3, #6
 8001890:	2200      	movs	r2, #0
 8001892:	4618      	mov	r0, r3
 8001894:	4611      	mov	r1, r2
 8001896:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800189a:	623b      	str	r3, [r7, #32]
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018a4:	4642      	mov	r2, r8
 80018a6:	464b      	mov	r3, r9
 80018a8:	f04f 0000 	mov.w	r0, #0
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	0159      	lsls	r1, r3, #5
 80018b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b6:	0150      	lsls	r0, r2, #5
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4641      	mov	r1, r8
 80018be:	ebb2 0a01 	subs.w	sl, r2, r1
 80018c2:	4649      	mov	r1, r9
 80018c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018dc:	ebb2 040a 	subs.w	r4, r2, sl
 80018e0:	eb63 050b 	sbc.w	r5, r3, fp
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	00eb      	lsls	r3, r5, #3
 80018ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018f2:	00e2      	lsls	r2, r4, #3
 80018f4:	4614      	mov	r4, r2
 80018f6:	461d      	mov	r5, r3
 80018f8:	4643      	mov	r3, r8
 80018fa:	18e3      	adds	r3, r4, r3
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	464b      	mov	r3, r9
 8001900:	eb45 0303 	adc.w	r3, r5, r3
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001912:	4629      	mov	r1, r5
 8001914:	028b      	lsls	r3, r1, #10
 8001916:	4621      	mov	r1, r4
 8001918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800191c:	4621      	mov	r1, r4
 800191e:	028a      	lsls	r2, r1, #10
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001926:	2200      	movs	r2, #0
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	61fa      	str	r2, [r7, #28]
 800192c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001930:	f7fe fc56 	bl	80001e0 <__aeabi_uldivmod>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4613      	mov	r3, r2
 800193a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_RCC_GetSysClockFreq+0x200>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	0c1b      	lsrs	r3, r3, #16
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	3301      	adds	r3, #1
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800194c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800194e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001950:	fbb2 f3f3 	udiv	r3, r2, r3
 8001954:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001956:	e002      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x204>)
 800195a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800195c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001960:	4618      	mov	r0, r3
 8001962:	3750      	adds	r7, #80	@ 0x50
 8001964:	46bd      	mov	sp, r7
 8001966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	00f42400 	.word	0x00f42400
 8001974:	007a1200 	.word	0x007a1200

08001978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800197c:	4b03      	ldr	r3, [pc, #12]	@ (800198c <HAL_RCC_GetHCLKFreq+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000000 	.word	0x20000000

08001990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001994:	f7ff fff0 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 8001998:	4602      	mov	r2, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	0a9b      	lsrs	r3, r3, #10
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4903      	ldr	r1, [pc, #12]	@ (80019b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	080054f4 	.word	0x080054f4

080019b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019bc:	f7ff ffdc 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	0b5b      	lsrs	r3, r3, #13
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	@ (80019dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	080054f4 	.word	0x080054f4

080019e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	220f      	movs	r2, #15
 80019ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a14:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <HAL_RCC_GetClockConfig+0x60>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0207 	and.w	r2, r3, #7
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40023c00 	.word	0x40023c00

08001a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e041      	b.n	8001ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f839 	bl	8001ae2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3304      	adds	r3, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4610      	mov	r0, r2
 8001a84:	f000 f9b2 	bl	8001dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d001      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e044      	b.n	8001b9a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d018      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x6c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b3a:	d013      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x6c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1a      	ldr	r2, [pc, #104]	@ (8001bac <HAL_TIM_Base_Start_IT+0xb4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00e      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x6c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a19      	ldr	r2, [pc, #100]	@ (8001bb0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d009      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x6c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a17      	ldr	r2, [pc, #92]	@ (8001bb4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d004      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x6c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a16      	ldr	r2, [pc, #88]	@ (8001bb8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d111      	bne.n	8001b88 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d010      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b86:	e007      	b.n	8001b98 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40000800 	.word	0x40000800
 8001bb4:	40000c00 	.word	0x40000c00
 8001bb8:	40014000 	.word	0x40014000

08001bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d020      	beq.n	8001c20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01b      	beq.n	8001c20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0202 	mvn.w	r2, #2
 8001bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8d2 	bl	8001db0 <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8c4 	bl	8001d9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f8d5 	bl	8001dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d020      	beq.n	8001c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01b      	beq.n	8001c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0204 	mvn.w	r2, #4
 8001c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2202      	movs	r2, #2
 8001c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8ac 	bl	8001db0 <HAL_TIM_IC_CaptureCallback>
 8001c58:	e005      	b.n	8001c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f89e 	bl	8001d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f8af 	bl	8001dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d020      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01b      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0208 	mvn.w	r2, #8
 8001c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f886 	bl	8001db0 <HAL_TIM_IC_CaptureCallback>
 8001ca4:	e005      	b.n	8001cb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f878 	bl	8001d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f889 	bl	8001dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d020      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d01b      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0210 	mvn.w	r2, #16
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2208      	movs	r2, #8
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f860 	bl	8001db0 <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f852 	bl	8001d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f863 	bl	8001dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0201 	mvn.w	r2, #1
 8001d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe fd7e 	bl	8000824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d007      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8e6 	bl	8001f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00c      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f834 	bl	8001dd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00c      	beq.n	8001d94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0220 	mvn.w	r2, #32
 8001d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8b8 	bl	8001f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee8 <TIM_Base_SetConfig+0xfc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00f      	beq.n	8001e24 <TIM_Base_SetConfig+0x38>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e0a:	d00b      	beq.n	8001e24 <TIM_Base_SetConfig+0x38>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a37      	ldr	r2, [pc, #220]	@ (8001eec <TIM_Base_SetConfig+0x100>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d007      	beq.n	8001e24 <TIM_Base_SetConfig+0x38>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a36      	ldr	r2, [pc, #216]	@ (8001ef0 <TIM_Base_SetConfig+0x104>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d003      	beq.n	8001e24 <TIM_Base_SetConfig+0x38>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a35      	ldr	r2, [pc, #212]	@ (8001ef4 <TIM_Base_SetConfig+0x108>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d108      	bne.n	8001e36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee8 <TIM_Base_SetConfig+0xfc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01b      	beq.n	8001e76 <TIM_Base_SetConfig+0x8a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e44:	d017      	beq.n	8001e76 <TIM_Base_SetConfig+0x8a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a28      	ldr	r2, [pc, #160]	@ (8001eec <TIM_Base_SetConfig+0x100>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <TIM_Base_SetConfig+0x8a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a27      	ldr	r2, [pc, #156]	@ (8001ef0 <TIM_Base_SetConfig+0x104>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00f      	beq.n	8001e76 <TIM_Base_SetConfig+0x8a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a26      	ldr	r2, [pc, #152]	@ (8001ef4 <TIM_Base_SetConfig+0x108>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00b      	beq.n	8001e76 <TIM_Base_SetConfig+0x8a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a25      	ldr	r2, [pc, #148]	@ (8001ef8 <TIM_Base_SetConfig+0x10c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d007      	beq.n	8001e76 <TIM_Base_SetConfig+0x8a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a24      	ldr	r2, [pc, #144]	@ (8001efc <TIM_Base_SetConfig+0x110>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d003      	beq.n	8001e76 <TIM_Base_SetConfig+0x8a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a23      	ldr	r2, [pc, #140]	@ (8001f00 <TIM_Base_SetConfig+0x114>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d108      	bne.n	8001e88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee8 <TIM_Base_SetConfig+0xfc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d103      	bne.n	8001ebc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d105      	bne.n	8001eda <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f023 0201 	bic.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	611a      	str	r2, [r3, #16]
  }
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40000400 	.word	0x40000400
 8001ef0:	40000800 	.word	0x40000800
 8001ef4:	40000c00 	.word	0x40000c00
 8001ef8:	40014000 	.word	0x40014000
 8001efc:	40014400 	.word	0x40014400
 8001f00:	40014800 	.word	0x40014800

08001f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e042      	b.n	8001fc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fcaa 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2224      	movs	r2, #36	@ 0x24
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fa09 	bl	8002388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	@ 0x28
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d175      	bne.n	80020d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_UART_Transmit+0x2c>
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e06e      	b.n	80020da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2221      	movs	r2, #33	@ 0x21
 8002006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800200a:	f7fe fdab 	bl	8000b64 <HAL_GetTick>
 800200e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	88fa      	ldrh	r2, [r7, #6]
 8002014:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	88fa      	ldrh	r2, [r7, #6]
 800201a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002024:	d108      	bne.n	8002038 <HAL_UART_Transmit+0x6c>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d104      	bne.n	8002038 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	e003      	b.n	8002040 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002040:	e02e      	b.n	80020a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2200      	movs	r2, #0
 800204a:	2180      	movs	r1, #128	@ 0x80
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f8df 	bl	8002210 <UART_WaitOnFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e03a      	b.n	80020da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10b      	bne.n	8002082 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002078:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	3302      	adds	r3, #2
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	e007      	b.n	8002092 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	3301      	adds	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1cb      	bne.n	8002042 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2200      	movs	r2, #0
 80020b2:	2140      	movs	r1, #64	@ 0x40
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f8ab 	bl	8002210 <UART_WaitOnFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e006      	b.n	80020da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e000      	b.n	80020da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020d8:	2302      	movs	r3, #2
  }
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b08a      	sub	sp, #40	@ 0x28
 80020e6:	af02      	add	r7, sp, #8
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b20      	cmp	r3, #32
 8002100:	f040 8081 	bne.w	8002206 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_UART_Receive+0x2e>
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e079      	b.n	8002208 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2222      	movs	r2, #34	@ 0x22
 800211e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002128:	f7fe fd1c 	bl	8000b64 <HAL_GetTick>
 800212c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	88fa      	ldrh	r2, [r7, #6]
 8002132:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	88fa      	ldrh	r2, [r7, #6]
 8002138:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002142:	d108      	bne.n	8002156 <HAL_UART_Receive+0x74>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d104      	bne.n	8002156 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	e003      	b.n	800215e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800215e:	e047      	b.n	80021f0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2200      	movs	r2, #0
 8002168:	2120      	movs	r1, #32
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 f850 	bl	8002210 <UART_WaitOnFlagUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e042      	b.n	8002208 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10c      	bne.n	80021a2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	b29b      	uxth	r3, r3
 8002190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002194:	b29a      	uxth	r2, r3
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	3302      	adds	r3, #2
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	e01f      	b.n	80021e2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021aa:	d007      	beq.n	80021bc <HAL_UART_Receive+0xda>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10a      	bne.n	80021ca <HAL_UART_Receive+0xe8>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d106      	bne.n	80021ca <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	e008      	b.n	80021dc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	3301      	adds	r3, #1
 80021e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1b2      	bne.n	8002160 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002206:	2302      	movs	r3, #2
  }
}
 8002208:	4618      	mov	r0, r3
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002220:	e03b      	b.n	800229a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d037      	beq.n	800229a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222a:	f7fe fc9b 	bl	8000b64 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	6a3a      	ldr	r2, [r7, #32]
 8002236:	429a      	cmp	r2, r3
 8002238:	d302      	bcc.n	8002240 <UART_WaitOnFlagUntilTimeout+0x30>
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e03a      	b.n	80022ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d023      	beq.n	800229a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b80      	cmp	r3, #128	@ 0x80
 8002256:	d020      	beq.n	800229a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b40      	cmp	r3, #64	@ 0x40
 800225c:	d01d      	beq.n	800229a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b08      	cmp	r3, #8
 800226a:	d116      	bne.n	800229a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f81d 	bl	80022c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2208      	movs	r2, #8
 800228c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e00f      	b.n	80022ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4013      	ands	r3, r2
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	bf0c      	ite	eq
 80022aa:	2301      	moveq	r3, #1
 80022ac:	2300      	movne	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d0b4      	beq.n	8002222 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b095      	sub	sp, #84	@ 0x54
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	330c      	adds	r3, #12
 80022d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d4:	e853 3f00 	ldrex	r3, [r3]
 80022d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	330c      	adds	r3, #12
 80022e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80022ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022f2:	e841 2300 	strex	r3, r2, [r1]
 80022f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1e5      	bne.n	80022ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3314      	adds	r3, #20
 8002304:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	e853 3f00 	ldrex	r3, [r3]
 800230c:	61fb      	str	r3, [r7, #28]
   return(result);
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3314      	adds	r3, #20
 800231c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800231e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002322:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002326:	e841 2300 	strex	r3, r2, [r1]
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1e5      	bne.n	80022fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	2b01      	cmp	r3, #1
 8002338:	d119      	bne.n	800236e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	330c      	adds	r3, #12
 8002340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	e853 3f00 	ldrex	r3, [r3]
 8002348:	60bb      	str	r3, [r7, #8]
   return(result);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f023 0310 	bic.w	r3, r3, #16
 8002350:	647b      	str	r3, [r7, #68]	@ 0x44
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	330c      	adds	r3, #12
 8002358:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800235a:	61ba      	str	r2, [r7, #24]
 800235c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235e:	6979      	ldr	r1, [r7, #20]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	e841 2300 	strex	r3, r2, [r1]
 8002366:	613b      	str	r3, [r7, #16]
   return(result);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1e5      	bne.n	800233a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800237c:	bf00      	nop
 800237e:	3754      	adds	r7, #84	@ 0x54
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800238c:	b0c0      	sub	sp, #256	@ 0x100
 800238e:	af00      	add	r7, sp, #0
 8002390:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80023a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a4:	68d9      	ldr	r1, [r3, #12]
 80023a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	ea40 0301 	orr.w	r3, r0, r1
 80023b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	431a      	orrs	r2, r3
 80023c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80023e0:	f021 010c 	bic.w	r1, r1, #12
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80023ee:	430b      	orrs	r3, r1
 80023f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80023fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002402:	6999      	ldr	r1, [r3, #24]
 8002404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	ea40 0301 	orr.w	r3, r0, r1
 800240e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4b8f      	ldr	r3, [pc, #572]	@ (8002654 <UART_SetConfig+0x2cc>)
 8002418:	429a      	cmp	r2, r3
 800241a:	d005      	beq.n	8002428 <UART_SetConfig+0xa0>
 800241c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b8d      	ldr	r3, [pc, #564]	@ (8002658 <UART_SetConfig+0x2d0>)
 8002424:	429a      	cmp	r2, r3
 8002426:	d104      	bne.n	8002432 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002428:	f7ff fac6 	bl	80019b8 <HAL_RCC_GetPCLK2Freq>
 800242c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002430:	e003      	b.n	800243a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002432:	f7ff faad 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8002436:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800243a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002444:	f040 810c 	bne.w	8002660 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800244c:	2200      	movs	r2, #0
 800244e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002452:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002456:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800245a:	4622      	mov	r2, r4
 800245c:	462b      	mov	r3, r5
 800245e:	1891      	adds	r1, r2, r2
 8002460:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002462:	415b      	adcs	r3, r3
 8002464:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002466:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800246a:	4621      	mov	r1, r4
 800246c:	eb12 0801 	adds.w	r8, r2, r1
 8002470:	4629      	mov	r1, r5
 8002472:	eb43 0901 	adc.w	r9, r3, r1
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800248a:	4690      	mov	r8, r2
 800248c:	4699      	mov	r9, r3
 800248e:	4623      	mov	r3, r4
 8002490:	eb18 0303 	adds.w	r3, r8, r3
 8002494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002498:	462b      	mov	r3, r5
 800249a:	eb49 0303 	adc.w	r3, r9, r3
 800249e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80024a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80024ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80024b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80024b6:	460b      	mov	r3, r1
 80024b8:	18db      	adds	r3, r3, r3
 80024ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80024bc:	4613      	mov	r3, r2
 80024be:	eb42 0303 	adc.w	r3, r2, r3
 80024c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80024c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80024c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80024cc:	f7fd fe88 	bl	80001e0 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4b61      	ldr	r3, [pc, #388]	@ (800265c <UART_SetConfig+0x2d4>)
 80024d6:	fba3 2302 	umull	r2, r3, r3, r2
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	011c      	lsls	r4, r3, #4
 80024de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024e2:	2200      	movs	r2, #0
 80024e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80024ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80024f0:	4642      	mov	r2, r8
 80024f2:	464b      	mov	r3, r9
 80024f4:	1891      	adds	r1, r2, r2
 80024f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024f8:	415b      	adcs	r3, r3
 80024fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002500:	4641      	mov	r1, r8
 8002502:	eb12 0a01 	adds.w	sl, r2, r1
 8002506:	4649      	mov	r1, r9
 8002508:	eb43 0b01 	adc.w	fp, r3, r1
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002518:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800251c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002520:	4692      	mov	sl, r2
 8002522:	469b      	mov	fp, r3
 8002524:	4643      	mov	r3, r8
 8002526:	eb1a 0303 	adds.w	r3, sl, r3
 800252a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800252e:	464b      	mov	r3, r9
 8002530:	eb4b 0303 	adc.w	r3, fp, r3
 8002534:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002544:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002548:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800254c:	460b      	mov	r3, r1
 800254e:	18db      	adds	r3, r3, r3
 8002550:	643b      	str	r3, [r7, #64]	@ 0x40
 8002552:	4613      	mov	r3, r2
 8002554:	eb42 0303 	adc.w	r3, r2, r3
 8002558:	647b      	str	r3, [r7, #68]	@ 0x44
 800255a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800255e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002562:	f7fd fe3d 	bl	80001e0 <__aeabi_uldivmod>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4611      	mov	r1, r2
 800256c:	4b3b      	ldr	r3, [pc, #236]	@ (800265c <UART_SetConfig+0x2d4>)
 800256e:	fba3 2301 	umull	r2, r3, r3, r1
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	2264      	movs	r2, #100	@ 0x64
 8002576:	fb02 f303 	mul.w	r3, r2, r3
 800257a:	1acb      	subs	r3, r1, r3
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002582:	4b36      	ldr	r3, [pc, #216]	@ (800265c <UART_SetConfig+0x2d4>)
 8002584:	fba3 2302 	umull	r2, r3, r3, r2
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002590:	441c      	add	r4, r3
 8002592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002596:	2200      	movs	r2, #0
 8002598:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800259c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80025a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80025a4:	4642      	mov	r2, r8
 80025a6:	464b      	mov	r3, r9
 80025a8:	1891      	adds	r1, r2, r2
 80025aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025ac:	415b      	adcs	r3, r3
 80025ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80025b4:	4641      	mov	r1, r8
 80025b6:	1851      	adds	r1, r2, r1
 80025b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80025ba:	4649      	mov	r1, r9
 80025bc:	414b      	adcs	r3, r1
 80025be:	637b      	str	r3, [r7, #52]	@ 0x34
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80025cc:	4659      	mov	r1, fp
 80025ce:	00cb      	lsls	r3, r1, #3
 80025d0:	4651      	mov	r1, sl
 80025d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025d6:	4651      	mov	r1, sl
 80025d8:	00ca      	lsls	r2, r1, #3
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	4642      	mov	r2, r8
 80025e2:	189b      	adds	r3, r3, r2
 80025e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025e8:	464b      	mov	r3, r9
 80025ea:	460a      	mov	r2, r1
 80025ec:	eb42 0303 	adc.w	r3, r2, r3
 80025f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002600:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002604:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002608:	460b      	mov	r3, r1
 800260a:	18db      	adds	r3, r3, r3
 800260c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800260e:	4613      	mov	r3, r2
 8002610:	eb42 0303 	adc.w	r3, r2, r3
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002616:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800261a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800261e:	f7fd fddf 	bl	80001e0 <__aeabi_uldivmod>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4b0d      	ldr	r3, [pc, #52]	@ (800265c <UART_SetConfig+0x2d4>)
 8002628:	fba3 1302 	umull	r1, r3, r3, r2
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	2164      	movs	r1, #100	@ 0x64
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	3332      	adds	r3, #50	@ 0x32
 800263a:	4a08      	ldr	r2, [pc, #32]	@ (800265c <UART_SetConfig+0x2d4>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	f003 0207 	and.w	r2, r3, #7
 8002646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4422      	add	r2, r4
 800264e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002650:	e106      	b.n	8002860 <UART_SetConfig+0x4d8>
 8002652:	bf00      	nop
 8002654:	40011000 	.word	0x40011000
 8002658:	40011400 	.word	0x40011400
 800265c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002664:	2200      	movs	r2, #0
 8002666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800266a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800266e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002672:	4642      	mov	r2, r8
 8002674:	464b      	mov	r3, r9
 8002676:	1891      	adds	r1, r2, r2
 8002678:	6239      	str	r1, [r7, #32]
 800267a:	415b      	adcs	r3, r3
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
 800267e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002682:	4641      	mov	r1, r8
 8002684:	1854      	adds	r4, r2, r1
 8002686:	4649      	mov	r1, r9
 8002688:	eb43 0501 	adc.w	r5, r3, r1
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	00eb      	lsls	r3, r5, #3
 8002696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800269a:	00e2      	lsls	r2, r4, #3
 800269c:	4614      	mov	r4, r2
 800269e:	461d      	mov	r5, r3
 80026a0:	4643      	mov	r3, r8
 80026a2:	18e3      	adds	r3, r4, r3
 80026a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026a8:	464b      	mov	r3, r9
 80026aa:	eb45 0303 	adc.w	r3, r5, r3
 80026ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026ce:	4629      	mov	r1, r5
 80026d0:	008b      	lsls	r3, r1, #2
 80026d2:	4621      	mov	r1, r4
 80026d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026d8:	4621      	mov	r1, r4
 80026da:	008a      	lsls	r2, r1, #2
 80026dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026e0:	f7fd fd7e 	bl	80001e0 <__aeabi_uldivmod>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4b60      	ldr	r3, [pc, #384]	@ (800286c <UART_SetConfig+0x4e4>)
 80026ea:	fba3 2302 	umull	r2, r3, r3, r2
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	011c      	lsls	r4, r3, #4
 80026f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026f6:	2200      	movs	r2, #0
 80026f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002700:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002704:	4642      	mov	r2, r8
 8002706:	464b      	mov	r3, r9
 8002708:	1891      	adds	r1, r2, r2
 800270a:	61b9      	str	r1, [r7, #24]
 800270c:	415b      	adcs	r3, r3
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002714:	4641      	mov	r1, r8
 8002716:	1851      	adds	r1, r2, r1
 8002718:	6139      	str	r1, [r7, #16]
 800271a:	4649      	mov	r1, r9
 800271c:	414b      	adcs	r3, r1
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800272c:	4659      	mov	r1, fp
 800272e:	00cb      	lsls	r3, r1, #3
 8002730:	4651      	mov	r1, sl
 8002732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002736:	4651      	mov	r1, sl
 8002738:	00ca      	lsls	r2, r1, #3
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	4603      	mov	r3, r0
 8002740:	4642      	mov	r2, r8
 8002742:	189b      	adds	r3, r3, r2
 8002744:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002748:	464b      	mov	r3, r9
 800274a:	460a      	mov	r2, r1
 800274c:	eb42 0303 	adc.w	r3, r2, r3
 8002750:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800275e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800276c:	4649      	mov	r1, r9
 800276e:	008b      	lsls	r3, r1, #2
 8002770:	4641      	mov	r1, r8
 8002772:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002776:	4641      	mov	r1, r8
 8002778:	008a      	lsls	r2, r1, #2
 800277a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800277e:	f7fd fd2f 	bl	80001e0 <__aeabi_uldivmod>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4611      	mov	r1, r2
 8002788:	4b38      	ldr	r3, [pc, #224]	@ (800286c <UART_SetConfig+0x4e4>)
 800278a:	fba3 2301 	umull	r2, r3, r3, r1
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2264      	movs	r2, #100	@ 0x64
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	1acb      	subs	r3, r1, r3
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	3332      	adds	r3, #50	@ 0x32
 800279c:	4a33      	ldr	r2, [pc, #204]	@ (800286c <UART_SetConfig+0x4e4>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a8:	441c      	add	r4, r3
 80027aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ae:	2200      	movs	r2, #0
 80027b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80027b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80027b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80027b8:	4642      	mov	r2, r8
 80027ba:	464b      	mov	r3, r9
 80027bc:	1891      	adds	r1, r2, r2
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	415b      	adcs	r3, r3
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027c8:	4641      	mov	r1, r8
 80027ca:	1851      	adds	r1, r2, r1
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	4649      	mov	r1, r9
 80027d0:	414b      	adcs	r3, r1
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027e0:	4659      	mov	r1, fp
 80027e2:	00cb      	lsls	r3, r1, #3
 80027e4:	4651      	mov	r1, sl
 80027e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027ea:	4651      	mov	r1, sl
 80027ec:	00ca      	lsls	r2, r1, #3
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	4642      	mov	r2, r8
 80027f6:	189b      	adds	r3, r3, r2
 80027f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027fa:	464b      	mov	r3, r9
 80027fc:	460a      	mov	r2, r1
 80027fe:	eb42 0303 	adc.w	r3, r2, r3
 8002802:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	663b      	str	r3, [r7, #96]	@ 0x60
 800280e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800281c:	4649      	mov	r1, r9
 800281e:	008b      	lsls	r3, r1, #2
 8002820:	4641      	mov	r1, r8
 8002822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002826:	4641      	mov	r1, r8
 8002828:	008a      	lsls	r2, r1, #2
 800282a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800282e:	f7fd fcd7 	bl	80001e0 <__aeabi_uldivmod>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <UART_SetConfig+0x4e4>)
 8002838:	fba3 1302 	umull	r1, r3, r3, r2
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	2164      	movs	r1, #100	@ 0x64
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	3332      	adds	r3, #50	@ 0x32
 800284a:	4a08      	ldr	r2, [pc, #32]	@ (800286c <UART_SetConfig+0x4e4>)
 800284c:	fba2 2303 	umull	r2, r3, r2, r3
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	f003 020f 	and.w	r2, r3, #15
 8002856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4422      	add	r2, r4
 800285e:	609a      	str	r2, [r3, #8]
}
 8002860:	bf00      	nop
 8002862:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002866:	46bd      	mov	sp, r7
 8002868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800286c:	51eb851f 	.word	0x51eb851f

08002870 <__NVIC_SetPriority>:
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	2b00      	cmp	r3, #0
 8002882:	db0a      	blt.n	800289a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	490c      	ldr	r1, [pc, #48]	@ (80028bc <__NVIC_SetPriority+0x4c>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	440b      	add	r3, r1
 8002894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002898:	e00a      	b.n	80028b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4908      	ldr	r1, [pc, #32]	@ (80028c0 <__NVIC_SetPriority+0x50>)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	3b04      	subs	r3, #4
 80028a8:	0112      	lsls	r2, r2, #4
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	440b      	add	r3, r1
 80028ae:	761a      	strb	r2, [r3, #24]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000e100 	.word	0xe000e100
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <SysTick_Handler+0x1c>)
 80028ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80028cc:	f001 fd18 	bl	8004300 <xTaskGetSchedulerState>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d001      	beq.n	80028da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80028d6:	f002 fb0f 	bl	8004ef8 <xPortSysTickHandler>
  }
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	e000e010 	.word	0xe000e010

080028e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80028e8:	2100      	movs	r1, #0
 80028ea:	f06f 0004 	mvn.w	r0, #4
 80028ee:	f7ff ffbf 	bl	8002870 <__NVIC_SetPriority>
#endif
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028fe:	f3ef 8305 	mrs	r3, IPSR
 8002902:	603b      	str	r3, [r7, #0]
  return(result);
 8002904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800290a:	f06f 0305 	mvn.w	r3, #5
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	e00c      	b.n	800292c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002912:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <osKernelInitialize+0x44>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d105      	bne.n	8002926 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800291a:	4b08      	ldr	r3, [pc, #32]	@ (800293c <osKernelInitialize+0x44>)
 800291c:	2201      	movs	r2, #1
 800291e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002920:	2300      	movs	r3, #0
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	e002      	b.n	800292c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800292c:	687b      	ldr	r3, [r7, #4]
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	200000cc 	.word	0x200000cc

08002940 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002946:	f3ef 8305 	mrs	r3, IPSR
 800294a:	603b      	str	r3, [r7, #0]
  return(result);
 800294c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002952:	f06f 0305 	mvn.w	r3, #5
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	e010      	b.n	800297c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800295a:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <osKernelStart+0x48>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d109      	bne.n	8002976 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002962:	f7ff ffbf 	bl	80028e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002966:	4b08      	ldr	r3, [pc, #32]	@ (8002988 <osKernelStart+0x48>)
 8002968:	2202      	movs	r2, #2
 800296a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800296c:	f001 f87a 	bl	8003a64 <vTaskStartScheduler>
      stat = osOK;
 8002970:	2300      	movs	r3, #0
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	e002      	b.n	800297c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
 800297a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800297c:	687b      	ldr	r3, [r7, #4]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200000cc 	.word	0x200000cc

0800298c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b08e      	sub	sp, #56	@ 0x38
 8002990:	af04      	add	r7, sp, #16
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800299c:	f3ef 8305 	mrs	r3, IPSR
 80029a0:	617b      	str	r3, [r7, #20]
  return(result);
 80029a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d17e      	bne.n	8002aa6 <osThreadNew+0x11a>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d07b      	beq.n	8002aa6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80029ae:	2380      	movs	r3, #128	@ 0x80
 80029b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80029b2:	2318      	movs	r3, #24
 80029b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
 80029be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d045      	beq.n	8002a52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <osThreadNew+0x48>
        name = attr->name;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <osThreadNew+0x6e>
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b38      	cmp	r3, #56	@ 0x38
 80029ec:	d805      	bhi.n	80029fa <osThreadNew+0x6e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <osThreadNew+0x72>
        return (NULL);
 80029fa:	2300      	movs	r3, #0
 80029fc:	e054      	b.n	8002aa8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00e      	beq.n	8002a34 <osThreadNew+0xa8>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b5b      	cmp	r3, #91	@ 0x5b
 8002a1c:	d90a      	bls.n	8002a34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d006      	beq.n	8002a34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <osThreadNew+0xa8>
        mem = 1;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	e010      	b.n	8002a56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10c      	bne.n	8002a56 <osThreadNew+0xca>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d108      	bne.n	8002a56 <osThreadNew+0xca>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <osThreadNew+0xca>
          mem = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61bb      	str	r3, [r7, #24]
 8002a50:	e001      	b.n	8002a56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d110      	bne.n	8002a7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a64:	9202      	str	r2, [sp, #8]
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	6a3a      	ldr	r2, [r7, #32]
 8002a70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 fe1a 	bl	80036ac <xTaskCreateStatic>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	e013      	b.n	8002aa6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d110      	bne.n	8002aa6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fe68 	bl	800376c <xTaskCreate>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d001      	beq.n	8002aa6 <osThreadNew+0x11a>
            hTask = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002aa6:	693b      	ldr	r3, [r7, #16]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3728      	adds	r7, #40	@ 0x28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ab8:	f3ef 8305 	mrs	r3, IPSR
 8002abc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002abe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <osDelay+0x1c>
    stat = osErrorISR;
 8002ac4:	f06f 0305 	mvn.w	r3, #5
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	e007      	b.n	8002adc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <osDelay+0x2c>
      vTaskDelay(ticks);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 ff8e 	bl	80039f8 <vTaskDelay>
    }
  }

  return (stat);
 8002adc:	68fb      	ldr	r3, [r7, #12]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a07      	ldr	r2, [pc, #28]	@ (8002b14 <vApplicationGetIdleTaskMemory+0x2c>)
 8002af8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4a06      	ldr	r2, [pc, #24]	@ (8002b18 <vApplicationGetIdleTaskMemory+0x30>)
 8002afe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2280      	movs	r2, #128	@ 0x80
 8002b04:	601a      	str	r2, [r3, #0]
}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	200000d0 	.word	0x200000d0
 8002b18:	2000012c 	.word	0x2000012c

08002b1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a07      	ldr	r2, [pc, #28]	@ (8002b48 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4a06      	ldr	r2, [pc, #24]	@ (8002b4c <vApplicationGetTimerTaskMemory+0x30>)
 8002b32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b3a:	601a      	str	r2, [r3, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	2000032c 	.word	0x2000032c
 8002b4c:	20000388 	.word	0x20000388

08002b50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f103 0208 	add.w	r2, r3, #8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f103 0208 	add.w	r2, r3, #8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f103 0208 	add.w	r2, r3, #8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d103      	bne.n	8002c12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e00c      	b.n	8002c2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3308      	adds	r3, #8
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e002      	b.n	8002c20 <vListInsert+0x2e>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d2f6      	bcs.n	8002c1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	601a      	str	r2, [r3, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6892      	ldr	r2, [r2, #8]
 8002c7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6852      	ldr	r2, [r2, #4]
 8002c84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d103      	bne.n	8002c98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	1e5a      	subs	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cde:	bf00      	nop
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ce4:	f002 f878 	bl	8004dd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf0:	68f9      	ldr	r1, [r7, #12]
 8002cf2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	441a      	add	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d14:	3b01      	subs	r3, #1
 8002d16:	68f9      	ldr	r1, [r7, #12]
 8002d18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	441a      	add	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	22ff      	movs	r2, #255	@ 0xff
 8002d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	22ff      	movs	r2, #255	@ 0xff
 8002d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d114      	bne.n	8002d64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d01a      	beq.n	8002d78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	3310      	adds	r3, #16
 8002d46:	4618      	mov	r0, r3
 8002d48:	f001 f91a 	bl	8003f80 <xTaskRemoveFromEventList>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d012      	beq.n	8002d78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d52:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <xQueueGenericReset+0xd0>)
 8002d54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	e009      	b.n	8002d78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3310      	adds	r3, #16
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fef1 	bl	8002b50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3324      	adds	r3, #36	@ 0x24
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff feec 	bl	8002b50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d78:	f002 f860 	bl	8004e3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d7c:	2301      	movs	r3, #1
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	e000ed04 	.word	0xe000ed04

08002d8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08e      	sub	sp, #56	@ 0x38
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002db2:	bf00      	nop
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10b      	bne.n	8002dd6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	e7fd      	b.n	8002dd2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <xQueueGenericCreateStatic+0x56>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <xQueueGenericCreateStatic+0x5a>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <xQueueGenericCreateStatic+0x5c>
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df0:	f383 8811 	msr	BASEPRI, r3
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	623b      	str	r3, [r7, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <xQueueGenericCreateStatic+0x84>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <xQueueGenericCreateStatic+0x88>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <xQueueGenericCreateStatic+0x8a>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10b      	bne.n	8002e32 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	61fb      	str	r3, [r7, #28]
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	e7fd      	b.n	8002e2e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e32:	2350      	movs	r3, #80	@ 0x50
 8002e34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b50      	cmp	r3, #80	@ 0x50
 8002e3a:	d00b      	beq.n	8002e54 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	61bb      	str	r3, [r7, #24]
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	e7fd      	b.n	8002e50 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00d      	beq.n	8002e7c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e68:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f805 	bl	8002e86 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3730      	adds	r7, #48	@ 0x30
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d103      	bne.n	8002ea2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e002      	b.n	8002ea8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	69b8      	ldr	r0, [r7, #24]
 8002eb8:	f7ff fefe 	bl	8002cb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08e      	sub	sp, #56	@ 0x38
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002eda:	2300      	movs	r3, #0
 8002edc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10b      	bne.n	8002f00 <xQueueGenericSend+0x34>
	__asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
 8002efe:	e7fd      	b.n	8002efc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <xQueueGenericSend+0x42>
 8002f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <xQueueGenericSend+0x46>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <xQueueGenericSend+0x48>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <xQueueGenericSend+0x64>
	__asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f2a:	bf00      	nop
 8002f2c:	bf00      	nop
 8002f2e:	e7fd      	b.n	8002f2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d103      	bne.n	8002f3e <xQueueGenericSend+0x72>
 8002f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <xQueueGenericSend+0x76>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <xQueueGenericSend+0x78>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <xQueueGenericSend+0x94>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	623b      	str	r3, [r7, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f60:	f001 f9ce 	bl	8004300 <xTaskGetSchedulerState>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d102      	bne.n	8002f70 <xQueueGenericSend+0xa4>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <xQueueGenericSend+0xa8>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <xQueueGenericSend+0xaa>
 8002f74:	2300      	movs	r3, #0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10b      	bne.n	8002f92 <xQueueGenericSend+0xc6>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	61fb      	str	r3, [r7, #28]
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	e7fd      	b.n	8002f8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f92:	f001 ff21 	bl	8004dd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <xQueueGenericSend+0xdc>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d129      	bne.n	8002ffc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fae:	f000 fa0f 	bl	80033d0 <prvCopyDataToQueue>
 8002fb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d010      	beq.n	8002fde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbe:	3324      	adds	r3, #36	@ 0x24
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 ffdd 	bl	8003f80 <xTaskRemoveFromEventList>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fcc:	4b3f      	ldr	r3, [pc, #252]	@ (80030cc <xQueueGenericSend+0x200>)
 8002fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	e00a      	b.n	8002ff4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fe4:	4b39      	ldr	r3, [pc, #228]	@ (80030cc <xQueueGenericSend+0x200>)
 8002fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ff4:	f001 ff22 	bl	8004e3c <vPortExitCritical>
				return pdPASS;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e063      	b.n	80030c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d103      	bne.n	800300a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003002:	f001 ff1b 	bl	8004e3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003006:	2300      	movs	r3, #0
 8003008:	e05c      	b.n	80030c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800300a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300c:	2b00      	cmp	r3, #0
 800300e:	d106      	bne.n	800301e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4618      	mov	r0, r3
 8003016:	f001 f817 	bl	8004048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800301a:	2301      	movs	r3, #1
 800301c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800301e:	f001 ff0d 	bl	8004e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003022:	f000 fd87 	bl	8003b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003026:	f001 fed7 	bl	8004dd8 <vPortEnterCritical>
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003030:	b25b      	sxtb	r3, r3
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d103      	bne.n	8003040 <xQueueGenericSend+0x174>
 8003038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003042:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003046:	b25b      	sxtb	r3, r3
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d103      	bne.n	8003056 <xQueueGenericSend+0x18a>
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003056:	f001 fef1 	bl	8004e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800305a:	1d3a      	adds	r2, r7, #4
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f001 f806 	bl	8004074 <xTaskCheckForTimeOut>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d124      	bne.n	80030b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800306e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003070:	f000 faa6 	bl	80035c0 <prvIsQueueFull>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d018      	beq.n	80030ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800307a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307c:	3310      	adds	r3, #16
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f000 ff2a 	bl	8003edc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800308a:	f000 fa31 	bl	80034f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800308e:	f000 fd5f 	bl	8003b50 <xTaskResumeAll>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	f47f af7c 	bne.w	8002f92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800309a:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <xQueueGenericSend+0x200>)
 800309c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	e772      	b.n	8002f92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030ae:	f000 fa1f 	bl	80034f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030b2:	f000 fd4d 	bl	8003b50 <xTaskResumeAll>
 80030b6:	e76c      	b.n	8002f92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030ba:	f000 fa19 	bl	80034f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030be:	f000 fd47 	bl	8003b50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3738      	adds	r7, #56	@ 0x38
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	e000ed04 	.word	0xe000ed04

080030d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b090      	sub	sp, #64	@ 0x40
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80030e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80030fa:	bf00      	nop
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d103      	bne.n	800310e <xQueueGenericSendFromISR+0x3e>
 8003106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <xQueueGenericSendFromISR+0x42>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <xQueueGenericSendFromISR+0x44>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800312a:	bf00      	nop
 800312c:	bf00      	nop
 800312e:	e7fd      	b.n	800312c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d103      	bne.n	800313e <xQueueGenericSendFromISR+0x6e>
 8003136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <xQueueGenericSendFromISR+0x72>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <xQueueGenericSendFromISR+0x74>
 8003142:	2300      	movs	r3, #0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	623b      	str	r3, [r7, #32]
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	e7fd      	b.n	800315c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003160:	f001 ff1a 	bl	8004f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003164:	f3ef 8211 	mrs	r2, BASEPRI
 8003168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	61fa      	str	r2, [r7, #28]
 800317a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800317c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800317e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003182:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003188:	429a      	cmp	r2, r3
 800318a:	d302      	bcc.n	8003192 <xQueueGenericSendFromISR+0xc2>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d12f      	bne.n	80031f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003194:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003198:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800319c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80031a8:	f000 f912 	bl	80033d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d112      	bne.n	80031dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d016      	beq.n	80031ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c0:	3324      	adds	r3, #36	@ 0x24
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fedc 	bl	8003f80 <xTaskRemoveFromEventList>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00e      	beq.n	80031ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00b      	beq.n	80031ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e007      	b.n	80031ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80031e0:	3301      	adds	r3, #1
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	b25a      	sxtb	r2, r3
 80031e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80031ec:	2301      	movs	r3, #1
 80031ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80031f0:	e001      	b.n	80031f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003200:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003204:	4618      	mov	r0, r3
 8003206:	3740      	adds	r7, #64	@ 0x40
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08c      	sub	sp, #48	@ 0x30
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10b      	bne.n	800323e <xQueueReceive+0x32>
	__asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	623b      	str	r3, [r7, #32]
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	e7fd      	b.n	800323a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d103      	bne.n	800324c <xQueueReceive+0x40>
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <xQueueReceive+0x44>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <xQueueReceive+0x46>
 8003250:	2300      	movs	r3, #0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <xQueueReceive+0x62>
	__asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	61fb      	str	r3, [r7, #28]
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	e7fd      	b.n	800326a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800326e:	f001 f847 	bl	8004300 <xTaskGetSchedulerState>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <xQueueReceive+0x72>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <xQueueReceive+0x76>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <xQueueReceive+0x78>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <xQueueReceive+0x94>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	61bb      	str	r3, [r7, #24]
}
 800329a:	bf00      	nop
 800329c:	bf00      	nop
 800329e:	e7fd      	b.n	800329c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032a0:	f001 fd9a 	bl	8004dd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01f      	beq.n	80032f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032b4:	f000 f8f6 	bl	80034a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	1e5a      	subs	r2, r3, #1
 80032bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00f      	beq.n	80032e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ca:	3310      	adds	r3, #16
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fe57 	bl	8003f80 <xTaskRemoveFromEventList>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032d8:	4b3c      	ldr	r3, [pc, #240]	@ (80033cc <xQueueReceive+0x1c0>)
 80032da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032e8:	f001 fda8 	bl	8004e3c <vPortExitCritical>
				return pdPASS;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e069      	b.n	80033c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032f6:	f001 fda1 	bl	8004e3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e062      	b.n	80033c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d106      	bne.n	8003312 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003304:	f107 0310 	add.w	r3, r7, #16
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fe9d 	bl	8004048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800330e:	2301      	movs	r3, #1
 8003310:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003312:	f001 fd93 	bl	8004e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003316:	f000 fc0d 	bl	8003b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800331a:	f001 fd5d 	bl	8004dd8 <vPortEnterCritical>
 800331e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003320:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003324:	b25b      	sxtb	r3, r3
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d103      	bne.n	8003334 <xQueueReceive+0x128>
 800332c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800333a:	b25b      	sxtb	r3, r3
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d103      	bne.n	800334a <xQueueReceive+0x13e>
 8003342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800334a:	f001 fd77 	bl	8004e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800334e:	1d3a      	adds	r2, r7, #4
 8003350:	f107 0310 	add.w	r3, r7, #16
 8003354:	4611      	mov	r1, r2
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fe8c 	bl	8004074 <xTaskCheckForTimeOut>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d123      	bne.n	80033aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003364:	f000 f916 	bl	8003594 <prvIsQueueEmpty>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d017      	beq.n	800339e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800336e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003370:	3324      	adds	r3, #36	@ 0x24
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4611      	mov	r1, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fdb0 	bl	8003edc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800337c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800337e:	f000 f8b7 	bl	80034f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003382:	f000 fbe5 	bl	8003b50 <xTaskResumeAll>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d189      	bne.n	80032a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800338c:	4b0f      	ldr	r3, [pc, #60]	@ (80033cc <xQueueReceive+0x1c0>)
 800338e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	e780      	b.n	80032a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800339e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033a0:	f000 f8a6 	bl	80034f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033a4:	f000 fbd4 	bl	8003b50 <xTaskResumeAll>
 80033a8:	e77a      	b.n	80032a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033ac:	f000 f8a0 	bl	80034f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033b0:	f000 fbce 	bl	8003b50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033b6:	f000 f8ed 	bl	8003594 <prvIsQueueEmpty>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f43f af6f 	beq.w	80032a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3730      	adds	r7, #48	@ 0x30
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	e000ed04 	.word	0xe000ed04

080033d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10d      	bne.n	800340a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d14d      	bne.n	8003492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 ff9e 	bl	800433c <xTaskPriorityDisinherit>
 8003400:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	e043      	b.n	8003492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d119      	bne.n	8003444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6858      	ldr	r0, [r3, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	461a      	mov	r2, r3
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	f002 f818 	bl	8005450 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	441a      	add	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d32b      	bcc.n	8003492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	e026      	b.n	8003492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68d8      	ldr	r0, [r3, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	461a      	mov	r2, r3
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	f001 fffe 	bl	8005450 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	425b      	negs	r3, r3
 800345e:	441a      	add	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d207      	bcs.n	8003480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	425b      	negs	r3, r3
 800347a:	441a      	add	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d105      	bne.n	8003492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	3b01      	subs	r3, #1
 8003490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800349a:	697b      	ldr	r3, [r7, #20]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d018      	beq.n	80034e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	441a      	add	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d303      	bcc.n	80034d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68d9      	ldr	r1, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	461a      	mov	r2, r3
 80034e2:	6838      	ldr	r0, [r7, #0]
 80034e4:	f001 ffb4 	bl	8005450 <memcpy>
	}
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034f8:	f001 fc6e 	bl	8004dd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003504:	e011      	b.n	800352a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d012      	beq.n	8003534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3324      	adds	r3, #36	@ 0x24
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fd34 	bl	8003f80 <xTaskRemoveFromEventList>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800351e:	f000 fe0d 	bl	800413c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	3b01      	subs	r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800352a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352e:	2b00      	cmp	r3, #0
 8003530:	dce9      	bgt.n	8003506 <prvUnlockQueue+0x16>
 8003532:	e000      	b.n	8003536 <prvUnlockQueue+0x46>
					break;
 8003534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	22ff      	movs	r2, #255	@ 0xff
 800353a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800353e:	f001 fc7d 	bl	8004e3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003542:	f001 fc49 	bl	8004dd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800354c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800354e:	e011      	b.n	8003574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d012      	beq.n	800357e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3310      	adds	r3, #16
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fd0f 	bl	8003f80 <xTaskRemoveFromEventList>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003568:	f000 fde8 	bl	800413c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800356c:	7bbb      	ldrb	r3, [r7, #14]
 800356e:	3b01      	subs	r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003578:	2b00      	cmp	r3, #0
 800357a:	dce9      	bgt.n	8003550 <prvUnlockQueue+0x60>
 800357c:	e000      	b.n	8003580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800357e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	22ff      	movs	r2, #255	@ 0xff
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003588:	f001 fc58 	bl	8004e3c <vPortExitCritical>
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800359c:	f001 fc1c 	bl	8004dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035a8:	2301      	movs	r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	e001      	b.n	80035b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035b2:	f001 fc43 	bl	8004e3c <vPortExitCritical>

	return xReturn;
 80035b6:	68fb      	ldr	r3, [r7, #12]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035c8:	f001 fc06 	bl	8004dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d102      	bne.n	80035de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035d8:	2301      	movs	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e001      	b.n	80035e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035e2:	f001 fc2b 	bl	8004e3c <vPortExitCritical>

	return xReturn;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	e014      	b.n	800362a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003600:	4a0f      	ldr	r2, [pc, #60]	@ (8003640 <vQueueAddToRegistry+0x50>)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800360c:	490c      	ldr	r1, [pc, #48]	@ (8003640 <vQueueAddToRegistry+0x50>)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003616:	4a0a      	ldr	r2, [pc, #40]	@ (8003640 <vQueueAddToRegistry+0x50>)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003622:	e006      	b.n	8003632 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3301      	adds	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b07      	cmp	r3, #7
 800362e:	d9e7      	bls.n	8003600 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000788 	.word	0x20000788

08003644 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003654:	f001 fbc0 	bl	8004dd8 <vPortEnterCritical>
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800365e:	b25b      	sxtb	r3, r3
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d103      	bne.n	800366e <vQueueWaitForMessageRestricted+0x2a>
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003674:	b25b      	sxtb	r3, r3
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d103      	bne.n	8003684 <vQueueWaitForMessageRestricted+0x40>
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003684:	f001 fbda 	bl	8004e3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	2b00      	cmp	r3, #0
 800368e:	d106      	bne.n	800369e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3324      	adds	r3, #36	@ 0x24
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fc45 	bl	8003f28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800369e:	6978      	ldr	r0, [r7, #20]
 80036a0:	f7ff ff26 	bl	80034f0 <prvUnlockQueue>
	}
 80036a4:	bf00      	nop
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08e      	sub	sp, #56	@ 0x38
 80036b0:	af04      	add	r7, sp, #16
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10b      	bne.n	80036d8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	623b      	str	r3, [r7, #32]
}
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
 80036d6:	e7fd      	b.n	80036d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10b      	bne.n	80036f6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80036de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e2:	f383 8811 	msr	BASEPRI, r3
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	61fb      	str	r3, [r7, #28]
}
 80036f0:	bf00      	nop
 80036f2:	bf00      	nop
 80036f4:	e7fd      	b.n	80036f2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036f6:	235c      	movs	r3, #92	@ 0x5c
 80036f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80036fe:	d00b      	beq.n	8003718 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	61bb      	str	r3, [r7, #24]
}
 8003712:	bf00      	nop
 8003714:	bf00      	nop
 8003716:	e7fd      	b.n	8003714 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003718:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800371a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01e      	beq.n	800375e <xTaskCreateStatic+0xb2>
 8003720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01b      	beq.n	800375e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003738:	2300      	movs	r3, #0
 800373a:	9303      	str	r3, [sp, #12]
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	9302      	str	r3, [sp, #8]
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f850 	bl	80037f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003756:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003758:	f000 f8de 	bl	8003918 <prvAddNewTaskToReadyList>
 800375c:	e001      	b.n	8003762 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003762:	697b      	ldr	r3, [r7, #20]
	}
 8003764:	4618      	mov	r0, r3
 8003766:	3728      	adds	r7, #40	@ 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	@ 0x30
 8003770:	af04      	add	r7, sp, #16
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4618      	mov	r0, r3
 8003782:	f001 fc4b 	bl	800501c <pvPortMalloc>
 8003786:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00e      	beq.n	80037ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800378e:	205c      	movs	r0, #92	@ 0x5c
 8003790:	f001 fc44 	bl	800501c <pvPortMalloc>
 8003794:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80037a2:	e005      	b.n	80037b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037a4:	6978      	ldr	r0, [r7, #20]
 80037a6:	f001 fd07 	bl	80051b8 <vPortFree>
 80037aa:	e001      	b.n	80037b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d017      	beq.n	80037e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037be:	88fa      	ldrh	r2, [r7, #6]
 80037c0:	2300      	movs	r3, #0
 80037c2:	9303      	str	r3, [sp, #12]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	9302      	str	r3, [sp, #8]
 80037c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f80e 	bl	80037f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037da:	69f8      	ldr	r0, [r7, #28]
 80037dc:	f000 f89c 	bl	8003918 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037e0:	2301      	movs	r3, #1
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	e002      	b.n	80037ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037e6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037ec:	69bb      	ldr	r3, [r7, #24]
	}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b088      	sub	sp, #32
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003806:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	461a      	mov	r2, r3
 800380e:	21a5      	movs	r1, #165	@ 0xa5
 8003810:	f001 fdf2 	bl	80053f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800381e:	3b01      	subs	r3, #1
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f023 0307 	bic.w	r3, r3, #7
 800382c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00b      	beq.n	8003850 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	617b      	str	r3, [r7, #20]
}
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	e7fd      	b.n	800384c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01f      	beq.n	8003896 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	e012      	b.n	8003882 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4413      	add	r3, r2
 8003862:	7819      	ldrb	r1, [r3, #0]
 8003864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	3334      	adds	r3, #52	@ 0x34
 800386c:	460a      	mov	r2, r1
 800386e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	4413      	add	r3, r2
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d006      	beq.n	800388a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	3301      	adds	r3, #1
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	2b0f      	cmp	r3, #15
 8003886:	d9e9      	bls.n	800385c <prvInitialiseNewTask+0x66>
 8003888:	e000      	b.n	800388c <prvInitialiseNewTask+0x96>
			{
				break;
 800388a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003894:	e003      	b.n	800389e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a0:	2b37      	cmp	r3, #55	@ 0x37
 80038a2:	d901      	bls.n	80038a8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038a4:	2337      	movs	r3, #55	@ 0x37
 80038a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038b2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80038b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b6:	2200      	movs	r2, #0
 80038b8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038bc:	3304      	adds	r3, #4
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff f966 	bl	8002b90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	3318      	adds	r3, #24
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff f961 	bl	8002b90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80038da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038e2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e6:	2200      	movs	r2, #0
 80038e8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	68f9      	ldr	r1, [r7, #12]
 80038f6:	69b8      	ldr	r0, [r7, #24]
 80038f8:	f001 f93e 	bl	8004b78 <pxPortInitialiseStack>
 80038fc:	4602      	mov	r2, r0
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800390c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800390e:	bf00      	nop
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003920:	f001 fa5a 	bl	8004dd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003924:	4b2d      	ldr	r3, [pc, #180]	@ (80039dc <prvAddNewTaskToReadyList+0xc4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3301      	adds	r3, #1
 800392a:	4a2c      	ldr	r2, [pc, #176]	@ (80039dc <prvAddNewTaskToReadyList+0xc4>)
 800392c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800392e:	4b2c      	ldr	r3, [pc, #176]	@ (80039e0 <prvAddNewTaskToReadyList+0xc8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003936:	4a2a      	ldr	r2, [pc, #168]	@ (80039e0 <prvAddNewTaskToReadyList+0xc8>)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800393c:	4b27      	ldr	r3, [pc, #156]	@ (80039dc <prvAddNewTaskToReadyList+0xc4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d110      	bne.n	8003966 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003944:	f000 fc1e 	bl	8004184 <prvInitialiseTaskLists>
 8003948:	e00d      	b.n	8003966 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800394a:	4b26      	ldr	r3, [pc, #152]	@ (80039e4 <prvAddNewTaskToReadyList+0xcc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003952:	4b23      	ldr	r3, [pc, #140]	@ (80039e0 <prvAddNewTaskToReadyList+0xc8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395c:	429a      	cmp	r2, r3
 800395e:	d802      	bhi.n	8003966 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003960:	4a1f      	ldr	r2, [pc, #124]	@ (80039e0 <prvAddNewTaskToReadyList+0xc8>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003966:	4b20      	ldr	r3, [pc, #128]	@ (80039e8 <prvAddNewTaskToReadyList+0xd0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3301      	adds	r3, #1
 800396c:	4a1e      	ldr	r2, [pc, #120]	@ (80039e8 <prvAddNewTaskToReadyList+0xd0>)
 800396e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003970:	4b1d      	ldr	r3, [pc, #116]	@ (80039e8 <prvAddNewTaskToReadyList+0xd0>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800397c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ec <prvAddNewTaskToReadyList+0xd4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d903      	bls.n	800398c <prvAddNewTaskToReadyList+0x74>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003988:	4a18      	ldr	r2, [pc, #96]	@ (80039ec <prvAddNewTaskToReadyList+0xd4>)
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4a15      	ldr	r2, [pc, #84]	@ (80039f0 <prvAddNewTaskToReadyList+0xd8>)
 800399a:	441a      	add	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3304      	adds	r3, #4
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f7ff f901 	bl	8002baa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039a8:	f001 fa48 	bl	8004e3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039ac:	4b0d      	ldr	r3, [pc, #52]	@ (80039e4 <prvAddNewTaskToReadyList+0xcc>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00e      	beq.n	80039d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039b4:	4b0a      	ldr	r3, [pc, #40]	@ (80039e0 <prvAddNewTaskToReadyList+0xc8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039be:	429a      	cmp	r2, r3
 80039c0:	d207      	bcs.n	80039d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039c2:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <prvAddNewTaskToReadyList+0xdc>)
 80039c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000c9c 	.word	0x20000c9c
 80039e0:	200007c8 	.word	0x200007c8
 80039e4:	20000ca8 	.word	0x20000ca8
 80039e8:	20000cb8 	.word	0x20000cb8
 80039ec:	20000ca4 	.word	0x20000ca4
 80039f0:	200007cc 	.word	0x200007cc
 80039f4:	e000ed04 	.word	0xe000ed04

080039f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d018      	beq.n	8003a3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a0a:	4b14      	ldr	r3, [pc, #80]	@ (8003a5c <vTaskDelay+0x64>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <vTaskDelay+0x32>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	60bb      	str	r3, [r7, #8]
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	e7fd      	b.n	8003a26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a2a:	f000 f883 	bl	8003b34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a2e:	2100      	movs	r1, #0
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fcf3 	bl	800441c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a36:	f000 f88b 	bl	8003b50 <xTaskResumeAll>
 8003a3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d107      	bne.n	8003a52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003a42:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <vTaskDelay+0x68>)
 8003a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000cc4 	.word	0x20000cc4
 8003a60:	e000ed04 	.word	0xe000ed04

08003a64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	@ 0x28
 8003a68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a72:	463a      	mov	r2, r7
 8003a74:	1d39      	adds	r1, r7, #4
 8003a76:	f107 0308 	add.w	r3, r7, #8
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff f834 	bl	8002ae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a80:	6839      	ldr	r1, [r7, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	9202      	str	r2, [sp, #8]
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	460a      	mov	r2, r1
 8003a92:	4922      	ldr	r1, [pc, #136]	@ (8003b1c <vTaskStartScheduler+0xb8>)
 8003a94:	4822      	ldr	r0, [pc, #136]	@ (8003b20 <vTaskStartScheduler+0xbc>)
 8003a96:	f7ff fe09 	bl	80036ac <xTaskCreateStatic>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4a21      	ldr	r2, [pc, #132]	@ (8003b24 <vTaskStartScheduler+0xc0>)
 8003a9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003aa0:	4b20      	ldr	r3, [pc, #128]	@ (8003b24 <vTaskStartScheduler+0xc0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	e001      	b.n	8003ab2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d102      	bne.n	8003abe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ab8:	f000 fd04 	bl	80044c4 <xTimerCreateTimerTask>
 8003abc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d116      	bne.n	8003af2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	613b      	str	r3, [r7, #16]
}
 8003ad6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ad8:	4b13      	ldr	r3, [pc, #76]	@ (8003b28 <vTaskStartScheduler+0xc4>)
 8003ada:	f04f 32ff 	mov.w	r2, #4294967295
 8003ade:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ae0:	4b12      	ldr	r3, [pc, #72]	@ (8003b2c <vTaskStartScheduler+0xc8>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ae6:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <vTaskStartScheduler+0xcc>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003aec:	f001 f8d0 	bl	8004c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003af0:	e00f      	b.n	8003b12 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d10b      	bne.n	8003b12 <vTaskStartScheduler+0xae>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	60fb      	str	r3, [r7, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	e7fd      	b.n	8003b0e <vTaskStartScheduler+0xaa>
}
 8003b12:	bf00      	nop
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	080054a8 	.word	0x080054a8
 8003b20:	08004155 	.word	0x08004155
 8003b24:	20000cc0 	.word	0x20000cc0
 8003b28:	20000cbc 	.word	0x20000cbc
 8003b2c:	20000ca8 	.word	0x20000ca8
 8003b30:	20000ca0 	.word	0x20000ca0

08003b34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b38:	4b04      	ldr	r3, [pc, #16]	@ (8003b4c <vTaskSuspendAll+0x18>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	4a03      	ldr	r2, [pc, #12]	@ (8003b4c <vTaskSuspendAll+0x18>)
 8003b40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b42:	bf00      	nop
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	20000cc4 	.word	0x20000cc4

08003b50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b5e:	4b42      	ldr	r3, [pc, #264]	@ (8003c68 <xTaskResumeAll+0x118>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10b      	bne.n	8003b7e <xTaskResumeAll+0x2e>
	__asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	603b      	str	r3, [r7, #0]
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	e7fd      	b.n	8003b7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b7e:	f001 f92b 	bl	8004dd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b82:	4b39      	ldr	r3, [pc, #228]	@ (8003c68 <xTaskResumeAll+0x118>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	4a37      	ldr	r2, [pc, #220]	@ (8003c68 <xTaskResumeAll+0x118>)
 8003b8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b8c:	4b36      	ldr	r3, [pc, #216]	@ (8003c68 <xTaskResumeAll+0x118>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d162      	bne.n	8003c5a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b94:	4b35      	ldr	r3, [pc, #212]	@ (8003c6c <xTaskResumeAll+0x11c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d05e      	beq.n	8003c5a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b9c:	e02f      	b.n	8003bfe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b9e:	4b34      	ldr	r3, [pc, #208]	@ (8003c70 <xTaskResumeAll+0x120>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3318      	adds	r3, #24
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff f85a 	bl	8002c64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff f855 	bl	8002c64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8003c74 <xTaskResumeAll+0x124>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d903      	bls.n	8003bce <xTaskResumeAll+0x7e>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bca:	4a2a      	ldr	r2, [pc, #168]	@ (8003c74 <xTaskResumeAll+0x124>)
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4a27      	ldr	r2, [pc, #156]	@ (8003c78 <xTaskResumeAll+0x128>)
 8003bdc:	441a      	add	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4619      	mov	r1, r3
 8003be4:	4610      	mov	r0, r2
 8003be6:	f7fe ffe0 	bl	8002baa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bee:	4b23      	ldr	r3, [pc, #140]	@ (8003c7c <xTaskResumeAll+0x12c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d302      	bcc.n	8003bfe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003bf8:	4b21      	ldr	r3, [pc, #132]	@ (8003c80 <xTaskResumeAll+0x130>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8003c70 <xTaskResumeAll+0x120>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1cb      	bne.n	8003b9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c0c:	f000 fb58 	bl	80042c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c10:	4b1c      	ldr	r3, [pc, #112]	@ (8003c84 <xTaskResumeAll+0x134>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d010      	beq.n	8003c3e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c1c:	f000 f846 	bl	8003cac <xTaskIncrementTick>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003c26:	4b16      	ldr	r3, [pc, #88]	@ (8003c80 <xTaskResumeAll+0x130>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f1      	bne.n	8003c1c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003c38:	4b12      	ldr	r3, [pc, #72]	@ (8003c84 <xTaskResumeAll+0x134>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c3e:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <xTaskResumeAll+0x130>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c46:	2301      	movs	r3, #1
 8003c48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c88 <xTaskResumeAll+0x138>)
 8003c4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c5a:	f001 f8ef 	bl	8004e3c <vPortExitCritical>

	return xAlreadyYielded;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000cc4 	.word	0x20000cc4
 8003c6c:	20000c9c 	.word	0x20000c9c
 8003c70:	20000c5c 	.word	0x20000c5c
 8003c74:	20000ca4 	.word	0x20000ca4
 8003c78:	200007cc 	.word	0x200007cc
 8003c7c:	200007c8 	.word	0x200007c8
 8003c80:	20000cb0 	.word	0x20000cb0
 8003c84:	20000cac 	.word	0x20000cac
 8003c88:	e000ed04 	.word	0xe000ed04

08003c8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c92:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <xTaskGetTickCount+0x1c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c98:	687b      	ldr	r3, [r7, #4]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000ca0 	.word	0x20000ca0

08003cac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cb6:	4b4f      	ldr	r3, [pc, #316]	@ (8003df4 <xTaskIncrementTick+0x148>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f040 8090 	bne.w	8003de0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8003df8 <xTaskIncrementTick+0x14c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003cc8:	4a4b      	ldr	r2, [pc, #300]	@ (8003df8 <xTaskIncrementTick+0x14c>)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d121      	bne.n	8003d18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cd4:	4b49      	ldr	r3, [pc, #292]	@ (8003dfc <xTaskIncrementTick+0x150>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00b      	beq.n	8003cf6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	603b      	str	r3, [r7, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	bf00      	nop
 8003cf4:	e7fd      	b.n	8003cf2 <xTaskIncrementTick+0x46>
 8003cf6:	4b41      	ldr	r3, [pc, #260]	@ (8003dfc <xTaskIncrementTick+0x150>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	4b40      	ldr	r3, [pc, #256]	@ (8003e00 <xTaskIncrementTick+0x154>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a3e      	ldr	r2, [pc, #248]	@ (8003dfc <xTaskIncrementTick+0x150>)
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	4a3e      	ldr	r2, [pc, #248]	@ (8003e00 <xTaskIncrementTick+0x154>)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e04 <xTaskIncrementTick+0x158>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	4a3c      	ldr	r2, [pc, #240]	@ (8003e04 <xTaskIncrementTick+0x158>)
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	f000 fad4 	bl	80042c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d18:	4b3b      	ldr	r3, [pc, #236]	@ (8003e08 <xTaskIncrementTick+0x15c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d349      	bcc.n	8003db6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d22:	4b36      	ldr	r3, [pc, #216]	@ (8003dfc <xTaskIncrementTick+0x150>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d2c:	4b36      	ldr	r3, [pc, #216]	@ (8003e08 <xTaskIncrementTick+0x15c>)
 8003d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d32:	601a      	str	r2, [r3, #0]
					break;
 8003d34:	e03f      	b.n	8003db6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d36:	4b31      	ldr	r3, [pc, #196]	@ (8003dfc <xTaskIncrementTick+0x150>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d203      	bcs.n	8003d56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8003e08 <xTaskIncrementTick+0x15c>)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d54:	e02f      	b.n	8003db6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe ff82 	bl	8002c64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d004      	beq.n	8003d72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	3318      	adds	r3, #24
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe ff79 	bl	8002c64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d76:	4b25      	ldr	r3, [pc, #148]	@ (8003e0c <xTaskIncrementTick+0x160>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d903      	bls.n	8003d86 <xTaskIncrementTick+0xda>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d82:	4a22      	ldr	r2, [pc, #136]	@ (8003e0c <xTaskIncrementTick+0x160>)
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4a1f      	ldr	r2, [pc, #124]	@ (8003e10 <xTaskIncrementTick+0x164>)
 8003d94:	441a      	add	r2, r3
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f7fe ff04 	bl	8002baa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e14 <xTaskIncrementTick+0x168>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d3b8      	bcc.n	8003d22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003db0:	2301      	movs	r3, #1
 8003db2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003db4:	e7b5      	b.n	8003d22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003db6:	4b17      	ldr	r3, [pc, #92]	@ (8003e14 <xTaskIncrementTick+0x168>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dbc:	4914      	ldr	r1, [pc, #80]	@ (8003e10 <xTaskIncrementTick+0x164>)
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d901      	bls.n	8003dd2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003dd2:	4b11      	ldr	r3, [pc, #68]	@ (8003e18 <xTaskIncrementTick+0x16c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d007      	beq.n	8003dea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	e004      	b.n	8003dea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003de0:	4b0e      	ldr	r3, [pc, #56]	@ (8003e1c <xTaskIncrementTick+0x170>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3301      	adds	r3, #1
 8003de6:	4a0d      	ldr	r2, [pc, #52]	@ (8003e1c <xTaskIncrementTick+0x170>)
 8003de8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003dea:	697b      	ldr	r3, [r7, #20]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000cc4 	.word	0x20000cc4
 8003df8:	20000ca0 	.word	0x20000ca0
 8003dfc:	20000c54 	.word	0x20000c54
 8003e00:	20000c58 	.word	0x20000c58
 8003e04:	20000cb4 	.word	0x20000cb4
 8003e08:	20000cbc 	.word	0x20000cbc
 8003e0c:	20000ca4 	.word	0x20000ca4
 8003e10:	200007cc 	.word	0x200007cc
 8003e14:	200007c8 	.word	0x200007c8
 8003e18:	20000cb0 	.word	0x20000cb0
 8003e1c:	20000cac 	.word	0x20000cac

08003e20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e26:	4b28      	ldr	r3, [pc, #160]	@ (8003ec8 <vTaskSwitchContext+0xa8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e2e:	4b27      	ldr	r3, [pc, #156]	@ (8003ecc <vTaskSwitchContext+0xac>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e34:	e042      	b.n	8003ebc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003e36:	4b25      	ldr	r3, [pc, #148]	@ (8003ecc <vTaskSwitchContext+0xac>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e3c:	4b24      	ldr	r3, [pc, #144]	@ (8003ed0 <vTaskSwitchContext+0xb0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	e011      	b.n	8003e68 <vTaskSwitchContext+0x48>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <vTaskSwitchContext+0x42>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	607b      	str	r3, [r7, #4]
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	e7fd      	b.n	8003e5e <vTaskSwitchContext+0x3e>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	491a      	ldr	r1, [pc, #104]	@ (8003ed4 <vTaskSwitchContext+0xb4>)
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0e3      	beq.n	8003e44 <vTaskSwitchContext+0x24>
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4a13      	ldr	r2, [pc, #76]	@ (8003ed4 <vTaskSwitchContext+0xb4>)
 8003e88:	4413      	add	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	605a      	str	r2, [r3, #4]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d104      	bne.n	8003eac <vTaskSwitchContext+0x8c>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	605a      	str	r2, [r3, #4]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	4a09      	ldr	r2, [pc, #36]	@ (8003ed8 <vTaskSwitchContext+0xb8>)
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	4a06      	ldr	r2, [pc, #24]	@ (8003ed0 <vTaskSwitchContext+0xb0>)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6013      	str	r3, [r2, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	20000cc4 	.word	0x20000cc4
 8003ecc:	20000cb0 	.word	0x20000cb0
 8003ed0:	20000ca4 	.word	0x20000ca4
 8003ed4:	200007cc 	.word	0x200007cc
 8003ed8:	200007c8 	.word	0x200007c8

08003edc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10b      	bne.n	8003f04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	60fb      	str	r3, [r7, #12]
}
 8003efe:	bf00      	nop
 8003f00:	bf00      	nop
 8003f02:	e7fd      	b.n	8003f00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f04:	4b07      	ldr	r3, [pc, #28]	@ (8003f24 <vTaskPlaceOnEventList+0x48>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3318      	adds	r3, #24
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fe fe70 	bl	8002bf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f12:	2101      	movs	r1, #1
 8003f14:	6838      	ldr	r0, [r7, #0]
 8003f16:	f000 fa81 	bl	800441c <prvAddCurrentTaskToDelayedList>
}
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	200007c8 	.word	0x200007c8

08003f28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10b      	bne.n	8003f52 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	617b      	str	r3, [r7, #20]
}
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	e7fd      	b.n	8003f4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f52:	4b0a      	ldr	r3, [pc, #40]	@ (8003f7c <vTaskPlaceOnEventListRestricted+0x54>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3318      	adds	r3, #24
 8003f58:	4619      	mov	r1, r3
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7fe fe25 	bl	8002baa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003f66:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	68b8      	ldr	r0, [r7, #8]
 8003f70:	f000 fa54 	bl	800441c <prvAddCurrentTaskToDelayedList>
	}
 8003f74:	bf00      	nop
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	200007c8 	.word	0x200007c8

08003f80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10b      	bne.n	8003fae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	60fb      	str	r3, [r7, #12]
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	e7fd      	b.n	8003faa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3318      	adds	r3, #24
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fe56 	bl	8002c64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004030 <xTaskRemoveFromEventList+0xb0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d11d      	bne.n	8003ffc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fe fe4d 	bl	8002c64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fce:	4b19      	ldr	r3, [pc, #100]	@ (8004034 <xTaskRemoveFromEventList+0xb4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d903      	bls.n	8003fde <xTaskRemoveFromEventList+0x5e>
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fda:	4a16      	ldr	r2, [pc, #88]	@ (8004034 <xTaskRemoveFromEventList+0xb4>)
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4a13      	ldr	r2, [pc, #76]	@ (8004038 <xTaskRemoveFromEventList+0xb8>)
 8003fec:	441a      	add	r2, r3
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7fe fdd8 	bl	8002baa <vListInsertEnd>
 8003ffa:	e005      	b.n	8004008 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	3318      	adds	r3, #24
 8004000:	4619      	mov	r1, r3
 8004002:	480e      	ldr	r0, [pc, #56]	@ (800403c <xTaskRemoveFromEventList+0xbc>)
 8004004:	f7fe fdd1 	bl	8002baa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800400c:	4b0c      	ldr	r3, [pc, #48]	@ (8004040 <xTaskRemoveFromEventList+0xc0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004012:	429a      	cmp	r2, r3
 8004014:	d905      	bls.n	8004022 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004016:	2301      	movs	r3, #1
 8004018:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800401a:	4b0a      	ldr	r3, [pc, #40]	@ (8004044 <xTaskRemoveFromEventList+0xc4>)
 800401c:	2201      	movs	r2, #1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	e001      	b.n	8004026 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004026:	697b      	ldr	r3, [r7, #20]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000cc4 	.word	0x20000cc4
 8004034:	20000ca4 	.word	0x20000ca4
 8004038:	200007cc 	.word	0x200007cc
 800403c:	20000c5c 	.word	0x20000c5c
 8004040:	200007c8 	.word	0x200007c8
 8004044:	20000cb0 	.word	0x20000cb0

08004048 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004050:	4b06      	ldr	r3, [pc, #24]	@ (800406c <vTaskInternalSetTimeOutState+0x24>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004058:	4b05      	ldr	r3, [pc, #20]	@ (8004070 <vTaskInternalSetTimeOutState+0x28>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	605a      	str	r2, [r3, #4]
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	20000cb4 	.word	0x20000cb4
 8004070:	20000ca0 	.word	0x20000ca0

08004074 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10b      	bne.n	800409c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	613b      	str	r3, [r7, #16]
}
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	e7fd      	b.n	8004098 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	60fb      	str	r3, [r7, #12]
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	e7fd      	b.n	80040b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80040ba:	f000 fe8d 	bl	8004dd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040be:	4b1d      	ldr	r3, [pc, #116]	@ (8004134 <xTaskCheckForTimeOut+0xc0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d102      	bne.n	80040de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040d8:	2300      	movs	r3, #0
 80040da:	61fb      	str	r3, [r7, #28]
 80040dc:	e023      	b.n	8004126 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b15      	ldr	r3, [pc, #84]	@ (8004138 <xTaskCheckForTimeOut+0xc4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d007      	beq.n	80040fa <xTaskCheckForTimeOut+0x86>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d302      	bcc.n	80040fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	61fb      	str	r3, [r7, #28]
 80040f8:	e015      	b.n	8004126 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	429a      	cmp	r2, r3
 8004102:	d20b      	bcs.n	800411c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	1ad2      	subs	r2, r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff99 	bl	8004048 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	e004      	b.n	8004126 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004122:	2301      	movs	r3, #1
 8004124:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004126:	f000 fe89 	bl	8004e3c <vPortExitCritical>

	return xReturn;
 800412a:	69fb      	ldr	r3, [r7, #28]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3720      	adds	r7, #32
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000ca0 	.word	0x20000ca0
 8004138:	20000cb4 	.word	0x20000cb4

0800413c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004140:	4b03      	ldr	r3, [pc, #12]	@ (8004150 <vTaskMissedYield+0x14>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]
}
 8004146:	bf00      	nop
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	20000cb0 	.word	0x20000cb0

08004154 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800415c:	f000 f852 	bl	8004204 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004160:	4b06      	ldr	r3, [pc, #24]	@ (800417c <prvIdleTask+0x28>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d9f9      	bls.n	800415c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004168:	4b05      	ldr	r3, [pc, #20]	@ (8004180 <prvIdleTask+0x2c>)
 800416a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004178:	e7f0      	b.n	800415c <prvIdleTask+0x8>
 800417a:	bf00      	nop
 800417c:	200007cc 	.word	0x200007cc
 8004180:	e000ed04 	.word	0xe000ed04

08004184 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	e00c      	b.n	80041aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4a12      	ldr	r2, [pc, #72]	@ (80041e4 <prvInitialiseTaskLists+0x60>)
 800419c:	4413      	add	r3, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fcd6 	bl	8002b50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3301      	adds	r3, #1
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b37      	cmp	r3, #55	@ 0x37
 80041ae:	d9ef      	bls.n	8004190 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041b0:	480d      	ldr	r0, [pc, #52]	@ (80041e8 <prvInitialiseTaskLists+0x64>)
 80041b2:	f7fe fccd 	bl	8002b50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041b6:	480d      	ldr	r0, [pc, #52]	@ (80041ec <prvInitialiseTaskLists+0x68>)
 80041b8:	f7fe fcca 	bl	8002b50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041bc:	480c      	ldr	r0, [pc, #48]	@ (80041f0 <prvInitialiseTaskLists+0x6c>)
 80041be:	f7fe fcc7 	bl	8002b50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041c2:	480c      	ldr	r0, [pc, #48]	@ (80041f4 <prvInitialiseTaskLists+0x70>)
 80041c4:	f7fe fcc4 	bl	8002b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041c8:	480b      	ldr	r0, [pc, #44]	@ (80041f8 <prvInitialiseTaskLists+0x74>)
 80041ca:	f7fe fcc1 	bl	8002b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041ce:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <prvInitialiseTaskLists+0x78>)
 80041d0:	4a05      	ldr	r2, [pc, #20]	@ (80041e8 <prvInitialiseTaskLists+0x64>)
 80041d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004200 <prvInitialiseTaskLists+0x7c>)
 80041d6:	4a05      	ldr	r2, [pc, #20]	@ (80041ec <prvInitialiseTaskLists+0x68>)
 80041d8:	601a      	str	r2, [r3, #0]
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200007cc 	.word	0x200007cc
 80041e8:	20000c2c 	.word	0x20000c2c
 80041ec:	20000c40 	.word	0x20000c40
 80041f0:	20000c5c 	.word	0x20000c5c
 80041f4:	20000c70 	.word	0x20000c70
 80041f8:	20000c88 	.word	0x20000c88
 80041fc:	20000c54 	.word	0x20000c54
 8004200:	20000c58 	.word	0x20000c58

08004204 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800420a:	e019      	b.n	8004240 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800420c:	f000 fde4 	bl	8004dd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004210:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <prvCheckTasksWaitingTermination+0x50>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe fd21 	bl	8002c64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004222:	4b0d      	ldr	r3, [pc, #52]	@ (8004258 <prvCheckTasksWaitingTermination+0x54>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3b01      	subs	r3, #1
 8004228:	4a0b      	ldr	r2, [pc, #44]	@ (8004258 <prvCheckTasksWaitingTermination+0x54>)
 800422a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800422c:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <prvCheckTasksWaitingTermination+0x58>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3b01      	subs	r3, #1
 8004232:	4a0a      	ldr	r2, [pc, #40]	@ (800425c <prvCheckTasksWaitingTermination+0x58>)
 8004234:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004236:	f000 fe01 	bl	8004e3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f810 	bl	8004260 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004240:	4b06      	ldr	r3, [pc, #24]	@ (800425c <prvCheckTasksWaitingTermination+0x58>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e1      	bne.n	800420c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000c70 	.word	0x20000c70
 8004258:	20000c9c 	.word	0x20000c9c
 800425c:	20000c84 	.word	0x20000c84

08004260 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800426e:	2b00      	cmp	r3, #0
 8004270:	d108      	bne.n	8004284 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004276:	4618      	mov	r0, r3
 8004278:	f000 ff9e 	bl	80051b8 <vPortFree>
				vPortFree( pxTCB );
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 ff9b 	bl	80051b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004282:	e019      	b.n	80042b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800428a:	2b01      	cmp	r3, #1
 800428c:	d103      	bne.n	8004296 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 ff92 	bl	80051b8 <vPortFree>
	}
 8004294:	e010      	b.n	80042b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800429c:	2b02      	cmp	r3, #2
 800429e:	d00b      	beq.n	80042b8 <prvDeleteTCB+0x58>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	60fb      	str	r3, [r7, #12]
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <prvDeleteTCB+0x54>
	}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c6:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <prvResetNextTaskUnblockTime+0x38>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042d0:	4b0a      	ldr	r3, [pc, #40]	@ (80042fc <prvResetNextTaskUnblockTime+0x3c>)
 80042d2:	f04f 32ff 	mov.w	r2, #4294967295
 80042d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042d8:	e008      	b.n	80042ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042da:	4b07      	ldr	r3, [pc, #28]	@ (80042f8 <prvResetNextTaskUnblockTime+0x38>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4a04      	ldr	r2, [pc, #16]	@ (80042fc <prvResetNextTaskUnblockTime+0x3c>)
 80042ea:	6013      	str	r3, [r2, #0]
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	20000c54 	.word	0x20000c54
 80042fc:	20000cbc 	.word	0x20000cbc

08004300 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004306:	4b0b      	ldr	r3, [pc, #44]	@ (8004334 <xTaskGetSchedulerState+0x34>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d102      	bne.n	8004314 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800430e:	2301      	movs	r3, #1
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	e008      	b.n	8004326 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004314:	4b08      	ldr	r3, [pc, #32]	@ (8004338 <xTaskGetSchedulerState+0x38>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800431c:	2302      	movs	r3, #2
 800431e:	607b      	str	r3, [r7, #4]
 8004320:	e001      	b.n	8004326 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004322:	2300      	movs	r3, #0
 8004324:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004326:	687b      	ldr	r3, [r7, #4]
	}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	20000ca8 	.word	0x20000ca8
 8004338:	20000cc4 	.word	0x20000cc4

0800433c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d058      	beq.n	8004404 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004352:	4b2f      	ldr	r3, [pc, #188]	@ (8004410 <xTaskPriorityDisinherit+0xd4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	429a      	cmp	r2, r3
 800435a:	d00b      	beq.n	8004374 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	60fb      	str	r3, [r7, #12]
}
 800436e:	bf00      	nop
 8004370:	bf00      	nop
 8004372:	e7fd      	b.n	8004370 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10b      	bne.n	8004394 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	60bb      	str	r3, [r7, #8]
}
 800438e:	bf00      	nop
 8004390:	bf00      	nop
 8004392:	e7fd      	b.n	8004390 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004398:	1e5a      	subs	r2, r3, #1
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d02c      	beq.n	8004404 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d128      	bne.n	8004404 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe fc54 	bl	8002c64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004414 <xTaskPriorityDisinherit+0xd8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d903      	bls.n	80043e4 <xTaskPriorityDisinherit+0xa8>
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004414 <xTaskPriorityDisinherit+0xd8>)
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4a09      	ldr	r2, [pc, #36]	@ (8004418 <xTaskPriorityDisinherit+0xdc>)
 80043f2:	441a      	add	r2, r3
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	3304      	adds	r3, #4
 80043f8:	4619      	mov	r1, r3
 80043fa:	4610      	mov	r0, r2
 80043fc:	f7fe fbd5 	bl	8002baa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004400:	2301      	movs	r3, #1
 8004402:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004404:	697b      	ldr	r3, [r7, #20]
	}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	200007c8 	.word	0x200007c8
 8004414:	20000ca4 	.word	0x20000ca4
 8004418:	200007cc 	.word	0x200007cc

0800441c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004426:	4b21      	ldr	r3, [pc, #132]	@ (80044ac <prvAddCurrentTaskToDelayedList+0x90>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800442c:	4b20      	ldr	r3, [pc, #128]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3304      	adds	r3, #4
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fc16 	bl	8002c64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d10a      	bne.n	8004456 <prvAddCurrentTaskToDelayedList+0x3a>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004446:	4b1a      	ldr	r3, [pc, #104]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3304      	adds	r3, #4
 800444c:	4619      	mov	r1, r3
 800444e:	4819      	ldr	r0, [pc, #100]	@ (80044b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004450:	f7fe fbab 	bl	8002baa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004454:	e026      	b.n	80044a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4413      	add	r3, r2
 800445c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800445e:	4b14      	ldr	r3, [pc, #80]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	429a      	cmp	r2, r3
 800446c:	d209      	bcs.n	8004482 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800446e:	4b12      	ldr	r3, [pc, #72]	@ (80044b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b0f      	ldr	r3, [pc, #60]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3304      	adds	r3, #4
 8004478:	4619      	mov	r1, r3
 800447a:	4610      	mov	r0, r2
 800447c:	f7fe fbb9 	bl	8002bf2 <vListInsert>
}
 8004480:	e010      	b.n	80044a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004482:	4b0e      	ldr	r3, [pc, #56]	@ (80044bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4b0a      	ldr	r3, [pc, #40]	@ (80044b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3304      	adds	r3, #4
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f7fe fbaf 	bl	8002bf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004494:	4b0a      	ldr	r3, [pc, #40]	@ (80044c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	429a      	cmp	r2, r3
 800449c:	d202      	bcs.n	80044a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800449e:	4a08      	ldr	r2, [pc, #32]	@ (80044c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	6013      	str	r3, [r2, #0]
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000ca0 	.word	0x20000ca0
 80044b0:	200007c8 	.word	0x200007c8
 80044b4:	20000c88 	.word	0x20000c88
 80044b8:	20000c58 	.word	0x20000c58
 80044bc:	20000c54 	.word	0x20000c54
 80044c0:	20000cbc 	.word	0x20000cbc

080044c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	@ 0x28
 80044c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044ce:	f000 fb13 	bl	8004af8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004548 <xTimerCreateTimerTask+0x84>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d021      	beq.n	800451e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044e2:	1d3a      	adds	r2, r7, #4
 80044e4:	f107 0108 	add.w	r1, r7, #8
 80044e8:	f107 030c 	add.w	r3, r7, #12
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fe fb15 	bl	8002b1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	9202      	str	r2, [sp, #8]
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	2302      	movs	r3, #2
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	2300      	movs	r3, #0
 8004502:	460a      	mov	r2, r1
 8004504:	4911      	ldr	r1, [pc, #68]	@ (800454c <xTimerCreateTimerTask+0x88>)
 8004506:	4812      	ldr	r0, [pc, #72]	@ (8004550 <xTimerCreateTimerTask+0x8c>)
 8004508:	f7ff f8d0 	bl	80036ac <xTaskCreateStatic>
 800450c:	4603      	mov	r3, r0
 800450e:	4a11      	ldr	r2, [pc, #68]	@ (8004554 <xTimerCreateTimerTask+0x90>)
 8004510:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004512:	4b10      	ldr	r3, [pc, #64]	@ (8004554 <xTimerCreateTimerTask+0x90>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800451a:	2301      	movs	r3, #1
 800451c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10b      	bne.n	800453c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	613b      	str	r3, [r7, #16]
}
 8004536:	bf00      	nop
 8004538:	bf00      	nop
 800453a:	e7fd      	b.n	8004538 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800453c:	697b      	ldr	r3, [r7, #20]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000cf8 	.word	0x20000cf8
 800454c:	080054b0 	.word	0x080054b0
 8004550:	08004691 	.word	0x08004691
 8004554:	20000cfc 	.word	0x20000cfc

08004558 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	@ 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004566:	2300      	movs	r3, #0
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <xTimerGenericCommand+0x30>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	623b      	str	r3, [r7, #32]
}
 8004582:	bf00      	nop
 8004584:	bf00      	nop
 8004586:	e7fd      	b.n	8004584 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004588:	4b19      	ldr	r3, [pc, #100]	@ (80045f0 <xTimerGenericCommand+0x98>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d02a      	beq.n	80045e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b05      	cmp	r3, #5
 80045a0:	dc18      	bgt.n	80045d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80045a2:	f7ff fead 	bl	8004300 <xTaskGetSchedulerState>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d109      	bne.n	80045c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80045ac:	4b10      	ldr	r3, [pc, #64]	@ (80045f0 <xTimerGenericCommand+0x98>)
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	f107 0110 	add.w	r1, r7, #16
 80045b4:	2300      	movs	r3, #0
 80045b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b8:	f7fe fc88 	bl	8002ecc <xQueueGenericSend>
 80045bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80045be:	e012      	b.n	80045e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045c0:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <xTimerGenericCommand+0x98>)
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	f107 0110 	add.w	r1, r7, #16
 80045c8:	2300      	movs	r3, #0
 80045ca:	2200      	movs	r2, #0
 80045cc:	f7fe fc7e 	bl	8002ecc <xQueueGenericSend>
 80045d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80045d2:	e008      	b.n	80045e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045d4:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <xTimerGenericCommand+0x98>)
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	f107 0110 	add.w	r1, r7, #16
 80045dc:	2300      	movs	r3, #0
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	f7fe fd76 	bl	80030d0 <xQueueGenericSendFromISR>
 80045e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3728      	adds	r7, #40	@ 0x28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000cf8 	.word	0x20000cf8

080045f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fe:	4b23      	ldr	r3, [pc, #140]	@ (800468c <prvProcessExpiredTimer+0x98>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	3304      	adds	r3, #4
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe fb29 	bl	8002c64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d023      	beq.n	8004668 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	699a      	ldr	r2, [r3, #24]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	18d1      	adds	r1, r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	6978      	ldr	r0, [r7, #20]
 800462e:	f000 f8d5 	bl	80047dc <prvInsertTimerInActiveList>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d020      	beq.n	800467a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004638:	2300      	movs	r3, #0
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2300      	movs	r3, #0
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	2100      	movs	r1, #0
 8004642:	6978      	ldr	r0, [r7, #20]
 8004644:	f7ff ff88 	bl	8004558 <xTimerGenericCommand>
 8004648:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d114      	bne.n	800467a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	60fb      	str	r3, [r7, #12]
}
 8004662:	bf00      	nop
 8004664:	bf00      	nop
 8004666:	e7fd      	b.n	8004664 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	b2da      	uxtb	r2, r3
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	6978      	ldr	r0, [r7, #20]
 8004680:	4798      	blx	r3
}
 8004682:	bf00      	nop
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000cf0 	.word	0x20000cf0

08004690 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004698:	f107 0308 	add.w	r3, r7, #8
 800469c:	4618      	mov	r0, r3
 800469e:	f000 f859 	bl	8004754 <prvGetNextExpireTime>
 80046a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4619      	mov	r1, r3
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f805 	bl	80046b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80046ae:	f000 f8d7 	bl	8004860 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046b2:	bf00      	nop
 80046b4:	e7f0      	b.n	8004698 <prvTimerTask+0x8>
	...

080046b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80046c2:	f7ff fa37 	bl	8003b34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046c6:	f107 0308 	add.w	r3, r7, #8
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 f866 	bl	800479c <prvSampleTimeNow>
 80046d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d130      	bne.n	800473a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <prvProcessTimerOrBlockTask+0x3c>
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d806      	bhi.n	80046f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046e6:	f7ff fa33 	bl	8003b50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046ea:	68f9      	ldr	r1, [r7, #12]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ff81 	bl	80045f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046f2:	e024      	b.n	800473e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046fa:	4b13      	ldr	r3, [pc, #76]	@ (8004748 <prvProcessTimerOrBlockTask+0x90>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <prvProcessTimerOrBlockTask+0x50>
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <prvProcessTimerOrBlockTask+0x52>
 8004708:	2300      	movs	r3, #0
 800470a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800470c:	4b0f      	ldr	r3, [pc, #60]	@ (800474c <prvProcessTimerOrBlockTask+0x94>)
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	4619      	mov	r1, r3
 800471a:	f7fe ff93 	bl	8003644 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800471e:	f7ff fa17 	bl	8003b50 <xTaskResumeAll>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004728:	4b09      	ldr	r3, [pc, #36]	@ (8004750 <prvProcessTimerOrBlockTask+0x98>)
 800472a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	f3bf 8f6f 	isb	sy
}
 8004738:	e001      	b.n	800473e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800473a:	f7ff fa09 	bl	8003b50 <xTaskResumeAll>
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000cf4 	.word	0x20000cf4
 800474c:	20000cf8 	.word	0x20000cf8
 8004750:	e000ed04 	.word	0xe000ed04

08004754 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800475c:	4b0e      	ldr	r3, [pc, #56]	@ (8004798 <prvGetNextExpireTime+0x44>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <prvGetNextExpireTime+0x16>
 8004766:	2201      	movs	r2, #1
 8004768:	e000      	b.n	800476c <prvGetNextExpireTime+0x18>
 800476a:	2200      	movs	r2, #0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004778:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <prvGetNextExpireTime+0x44>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	e001      	b.n	8004788 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004788:	68fb      	ldr	r3, [r7, #12]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20000cf0 	.word	0x20000cf0

0800479c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80047a4:	f7ff fa72 	bl	8003c8c <xTaskGetTickCount>
 80047a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <prvSampleTimeNow+0x3c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d205      	bcs.n	80047c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80047b4:	f000 f93a 	bl	8004a2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e002      	b.n	80047c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047c6:	4a04      	ldr	r2, [pc, #16]	@ (80047d8 <prvSampleTimeNow+0x3c>)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047cc:	68fb      	ldr	r3, [r7, #12]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20000d00 	.word	0x20000d00

080047dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d812      	bhi.n	8004828 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	1ad2      	subs	r2, r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	429a      	cmp	r2, r3
 800480e:	d302      	bcc.n	8004816 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004810:	2301      	movs	r3, #1
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	e01b      	b.n	800484e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004816:	4b10      	ldr	r3, [pc, #64]	@ (8004858 <prvInsertTimerInActiveList+0x7c>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3304      	adds	r3, #4
 800481e:	4619      	mov	r1, r3
 8004820:	4610      	mov	r0, r2
 8004822:	f7fe f9e6 	bl	8002bf2 <vListInsert>
 8004826:	e012      	b.n	800484e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d206      	bcs.n	800483e <prvInsertTimerInActiveList+0x62>
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d302      	bcc.n	800483e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004838:	2301      	movs	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e007      	b.n	800484e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800483e:	4b07      	ldr	r3, [pc, #28]	@ (800485c <prvInsertTimerInActiveList+0x80>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3304      	adds	r3, #4
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f7fe f9d2 	bl	8002bf2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800484e:	697b      	ldr	r3, [r7, #20]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000cf4 	.word	0x20000cf4
 800485c:	20000cf0 	.word	0x20000cf0

08004860 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08e      	sub	sp, #56	@ 0x38
 8004864:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004866:	e0ce      	b.n	8004a06 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	da19      	bge.n	80048a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800486e:	1d3b      	adds	r3, r7, #4
 8004870:	3304      	adds	r3, #4
 8004872:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	61fb      	str	r3, [r7, #28]
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	e7fd      	b.n	800488e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004898:	6850      	ldr	r0, [r2, #4]
 800489a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800489c:	6892      	ldr	r2, [r2, #8]
 800489e:	4611      	mov	r1, r2
 80048a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f2c0 80ae 	blt.w	8004a06 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d004      	beq.n	80048c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b8:	3304      	adds	r3, #4
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe f9d2 	bl	8002c64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048c0:	463b      	mov	r3, r7
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff ff6a 	bl	800479c <prvSampleTimeNow>
 80048c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b09      	cmp	r3, #9
 80048ce:	f200 8097 	bhi.w	8004a00 <prvProcessReceivedCommands+0x1a0>
 80048d2:	a201      	add	r2, pc, #4	@ (adr r2, 80048d8 <prvProcessReceivedCommands+0x78>)
 80048d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d8:	08004901 	.word	0x08004901
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004901 	.word	0x08004901
 80048e4:	08004977 	.word	0x08004977
 80048e8:	0800498b 	.word	0x0800498b
 80048ec:	080049d7 	.word	0x080049d7
 80048f0:	08004901 	.word	0x08004901
 80048f4:	08004901 	.word	0x08004901
 80048f8:	08004977 	.word	0x08004977
 80048fc:	0800498b 	.word	0x0800498b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004902:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	b2da      	uxtb	r2, r3
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	18d1      	adds	r1, r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800491e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004920:	f7ff ff5c 	bl	80047dc <prvInsertTimerInActiveList>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d06c      	beq.n	8004a04 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800492a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004930:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d061      	beq.n	8004a04 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	441a      	add	r2, r3
 8004948:	2300      	movs	r3, #0
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	2300      	movs	r3, #0
 800494e:	2100      	movs	r1, #0
 8004950:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004952:	f7ff fe01 	bl	8004558 <xTimerGenericCommand>
 8004956:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d152      	bne.n	8004a04 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	61bb      	str	r3, [r7, #24]
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	e7fd      	b.n	8004972 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004978:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	b2da      	uxtb	r2, r3
 8004982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004984:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004988:	e03d      	b.n	8004a06 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800498a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	b2da      	uxtb	r2, r3
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	617b      	str	r3, [r7, #20]
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	e7fd      	b.n	80049be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	18d1      	adds	r1, r2, r3
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049d0:	f7ff ff04 	bl	80047dc <prvInsertTimerInActiveList>
					break;
 80049d4:	e017      	b.n	8004a06 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d103      	bne.n	80049ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80049e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049e6:	f000 fbe7 	bl	80051b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049ea:	e00c      	b.n	8004a06 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049f2:	f023 0301 	bic.w	r3, r3, #1
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80049fe:	e002      	b.n	8004a06 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004a00:	bf00      	nop
 8004a02:	e000      	b.n	8004a06 <prvProcessReceivedCommands+0x1a6>
					break;
 8004a04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a06:	4b08      	ldr	r3, [pc, #32]	@ (8004a28 <prvProcessReceivedCommands+0x1c8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	1d39      	adds	r1, r7, #4
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe fbfc 	bl	800320c <xQueueReceive>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f47f af26 	bne.w	8004868 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	3730      	adds	r7, #48	@ 0x30
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000cf8 	.word	0x20000cf8

08004a2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a32:	e049      	b.n	8004ac8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a34:	4b2e      	ldr	r3, [pc, #184]	@ (8004af0 <prvSwitchTimerLists+0xc4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8004af0 <prvSwitchTimerLists+0xc4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fe f909 	bl	8002c64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02f      	beq.n	8004ac8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4413      	add	r3, r2
 8004a70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d90e      	bls.n	8004a98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a86:	4b1a      	ldr	r3, [pc, #104]	@ (8004af0 <prvSwitchTimerLists+0xc4>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4610      	mov	r0, r2
 8004a92:	f7fe f8ae 	bl	8002bf2 <vListInsert>
 8004a96:	e017      	b.n	8004ac8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a98:	2300      	movs	r3, #0
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff fd58 	bl	8004558 <xTimerGenericCommand>
 8004aa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	603b      	str	r3, [r7, #0]
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	e7fd      	b.n	8004ac4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ac8:	4b09      	ldr	r3, [pc, #36]	@ (8004af0 <prvSwitchTimerLists+0xc4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1b0      	bne.n	8004a34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ad2:	4b07      	ldr	r3, [pc, #28]	@ (8004af0 <prvSwitchTimerLists+0xc4>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ad8:	4b06      	ldr	r3, [pc, #24]	@ (8004af4 <prvSwitchTimerLists+0xc8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a04      	ldr	r2, [pc, #16]	@ (8004af0 <prvSwitchTimerLists+0xc4>)
 8004ade:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ae0:	4a04      	ldr	r2, [pc, #16]	@ (8004af4 <prvSwitchTimerLists+0xc8>)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	6013      	str	r3, [r2, #0]
}
 8004ae6:	bf00      	nop
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000cf0 	.word	0x20000cf0
 8004af4:	20000cf4 	.word	0x20000cf4

08004af8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004afe:	f000 f96b 	bl	8004dd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b02:	4b15      	ldr	r3, [pc, #84]	@ (8004b58 <prvCheckForValidListAndQueue+0x60>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d120      	bne.n	8004b4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b0a:	4814      	ldr	r0, [pc, #80]	@ (8004b5c <prvCheckForValidListAndQueue+0x64>)
 8004b0c:	f7fe f820 	bl	8002b50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b10:	4813      	ldr	r0, [pc, #76]	@ (8004b60 <prvCheckForValidListAndQueue+0x68>)
 8004b12:	f7fe f81d 	bl	8002b50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b16:	4b13      	ldr	r3, [pc, #76]	@ (8004b64 <prvCheckForValidListAndQueue+0x6c>)
 8004b18:	4a10      	ldr	r2, [pc, #64]	@ (8004b5c <prvCheckForValidListAndQueue+0x64>)
 8004b1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b1c:	4b12      	ldr	r3, [pc, #72]	@ (8004b68 <prvCheckForValidListAndQueue+0x70>)
 8004b1e:	4a10      	ldr	r2, [pc, #64]	@ (8004b60 <prvCheckForValidListAndQueue+0x68>)
 8004b20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b22:	2300      	movs	r3, #0
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	4b11      	ldr	r3, [pc, #68]	@ (8004b6c <prvCheckForValidListAndQueue+0x74>)
 8004b28:	4a11      	ldr	r2, [pc, #68]	@ (8004b70 <prvCheckForValidListAndQueue+0x78>)
 8004b2a:	2110      	movs	r1, #16
 8004b2c:	200a      	movs	r0, #10
 8004b2e:	f7fe f92d 	bl	8002d8c <xQueueGenericCreateStatic>
 8004b32:	4603      	mov	r3, r0
 8004b34:	4a08      	ldr	r2, [pc, #32]	@ (8004b58 <prvCheckForValidListAndQueue+0x60>)
 8004b36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b38:	4b07      	ldr	r3, [pc, #28]	@ (8004b58 <prvCheckForValidListAndQueue+0x60>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b40:	4b05      	ldr	r3, [pc, #20]	@ (8004b58 <prvCheckForValidListAndQueue+0x60>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	490b      	ldr	r1, [pc, #44]	@ (8004b74 <prvCheckForValidListAndQueue+0x7c>)
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fd52 	bl	80035f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b4c:	f000 f976 	bl	8004e3c <vPortExitCritical>
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20000cf8 	.word	0x20000cf8
 8004b5c:	20000cc8 	.word	0x20000cc8
 8004b60:	20000cdc 	.word	0x20000cdc
 8004b64:	20000cf0 	.word	0x20000cf0
 8004b68:	20000cf4 	.word	0x20000cf4
 8004b6c:	20000da4 	.word	0x20000da4
 8004b70:	20000d04 	.word	0x20000d04
 8004b74:	080054b8 	.word	0x080054b8

08004b78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3b04      	subs	r3, #4
 8004b88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3b04      	subs	r3, #4
 8004b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f023 0201 	bic.w	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3b04      	subs	r3, #4
 8004ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8004bdc <pxPortInitialiseStack+0x64>)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3b14      	subs	r3, #20
 8004bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3b04      	subs	r3, #4
 8004bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f06f 0202 	mvn.w	r2, #2
 8004bc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3b20      	subs	r3, #32
 8004bcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bce:	68fb      	ldr	r3, [r7, #12]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	08004be1 	.word	0x08004be1

08004be0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bea:	4b13      	ldr	r3, [pc, #76]	@ (8004c38 <prvTaskExitError+0x58>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d00b      	beq.n	8004c0c <prvTaskExitError+0x2c>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	60fb      	str	r3, [r7, #12]
}
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	e7fd      	b.n	8004c08 <prvTaskExitError+0x28>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	60bb      	str	r3, [r7, #8]
}
 8004c1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c20:	bf00      	nop
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0fc      	beq.n	8004c22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	2000000c 	.word	0x2000000c
 8004c3c:	00000000 	.word	0x00000000

08004c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c40:	4b07      	ldr	r3, [pc, #28]	@ (8004c60 <pxCurrentTCBConst2>)
 8004c42:	6819      	ldr	r1, [r3, #0]
 8004c44:	6808      	ldr	r0, [r1, #0]
 8004c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4a:	f380 8809 	msr	PSP, r0
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f380 8811 	msr	BASEPRI, r0
 8004c5a:	4770      	bx	lr
 8004c5c:	f3af 8000 	nop.w

08004c60 <pxCurrentTCBConst2>:
 8004c60:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c68:	4808      	ldr	r0, [pc, #32]	@ (8004c8c <prvPortStartFirstTask+0x24>)
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	6800      	ldr	r0, [r0, #0]
 8004c6e:	f380 8808 	msr	MSP, r0
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f380 8814 	msr	CONTROL, r0
 8004c7a:	b662      	cpsie	i
 8004c7c:	b661      	cpsie	f
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	df00      	svc	0
 8004c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c8a:	bf00      	nop
 8004c8c:	e000ed08 	.word	0xe000ed08

08004c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c96:	4b47      	ldr	r3, [pc, #284]	@ (8004db4 <xPortStartScheduler+0x124>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a47      	ldr	r2, [pc, #284]	@ (8004db8 <xPortStartScheduler+0x128>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d10b      	bne.n	8004cb8 <xPortStartScheduler+0x28>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	613b      	str	r3, [r7, #16]
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8004db4 <xPortStartScheduler+0x124>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8004dbc <xPortStartScheduler+0x12c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10b      	bne.n	8004cda <xPortStartScheduler+0x4a>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	60fb      	str	r3, [r7, #12]
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	e7fd      	b.n	8004cd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cda:	4b39      	ldr	r3, [pc, #228]	@ (8004dc0 <xPortStartScheduler+0x130>)
 8004cdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	22ff      	movs	r2, #255	@ 0xff
 8004cea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	4b31      	ldr	r3, [pc, #196]	@ (8004dc4 <xPortStartScheduler+0x134>)
 8004d00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d02:	4b31      	ldr	r3, [pc, #196]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d04:	2207      	movs	r2, #7
 8004d06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d08:	e009      	b.n	8004d1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d26:	2b80      	cmp	r3, #128	@ 0x80
 8004d28:	d0ef      	beq.n	8004d0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d2a:	4b27      	ldr	r3, [pc, #156]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f1c3 0307 	rsb	r3, r3, #7
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d00b      	beq.n	8004d4e <xPortStartScheduler+0xbe>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	60bb      	str	r3, [r7, #8]
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	e7fd      	b.n	8004d4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d58:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d60:	4a19      	ldr	r2, [pc, #100]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d6c:	4b17      	ldr	r3, [pc, #92]	@ (8004dcc <xPortStartScheduler+0x13c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a16      	ldr	r2, [pc, #88]	@ (8004dcc <xPortStartScheduler+0x13c>)
 8004d72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d78:	4b14      	ldr	r3, [pc, #80]	@ (8004dcc <xPortStartScheduler+0x13c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a13      	ldr	r2, [pc, #76]	@ (8004dcc <xPortStartScheduler+0x13c>)
 8004d7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d84:	f000 f8da 	bl	8004f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d88:	4b11      	ldr	r3, [pc, #68]	@ (8004dd0 <xPortStartScheduler+0x140>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d8e:	f000 f8f9 	bl	8004f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d92:	4b10      	ldr	r3, [pc, #64]	@ (8004dd4 <xPortStartScheduler+0x144>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a0f      	ldr	r2, [pc, #60]	@ (8004dd4 <xPortStartScheduler+0x144>)
 8004d98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d9e:	f7ff ff63 	bl	8004c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004da2:	f7ff f83d 	bl	8003e20 <vTaskSwitchContext>
	prvTaskExitError();
 8004da6:	f7ff ff1b 	bl	8004be0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	e000ed00 	.word	0xe000ed00
 8004db8:	410fc271 	.word	0x410fc271
 8004dbc:	410fc270 	.word	0x410fc270
 8004dc0:	e000e400 	.word	0xe000e400
 8004dc4:	20000df4 	.word	0x20000df4
 8004dc8:	20000df8 	.word	0x20000df8
 8004dcc:	e000ed20 	.word	0xe000ed20
 8004dd0:	2000000c 	.word	0x2000000c
 8004dd4:	e000ef34 	.word	0xe000ef34

08004dd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	607b      	str	r3, [r7, #4]
}
 8004df0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004df2:	4b10      	ldr	r3, [pc, #64]	@ (8004e34 <vPortEnterCritical+0x5c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3301      	adds	r3, #1
 8004df8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e34 <vPortEnterCritical+0x5c>)
 8004dfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <vPortEnterCritical+0x5c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d110      	bne.n	8004e26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e04:	4b0c      	ldr	r3, [pc, #48]	@ (8004e38 <vPortEnterCritical+0x60>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00b      	beq.n	8004e26 <vPortEnterCritical+0x4e>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	603b      	str	r3, [r7, #0]
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <vPortEnterCritical+0x4a>
	}
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	2000000c 	.word	0x2000000c
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e42:	4b12      	ldr	r3, [pc, #72]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <vPortExitCritical+0x26>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	607b      	str	r3, [r7, #4]
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e62:	4b0a      	ldr	r3, [pc, #40]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e6c:	4b07      	ldr	r3, [pc, #28]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <vPortExitCritical+0x44>
 8004e74:	2300      	movs	r3, #0
 8004e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	f383 8811 	msr	BASEPRI, r3
}
 8004e7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	2000000c 	.word	0x2000000c

08004e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e90:	f3ef 8009 	mrs	r0, PSP
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	4b15      	ldr	r3, [pc, #84]	@ (8004ef0 <pxCurrentTCBConst>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	f01e 0f10 	tst.w	lr, #16
 8004ea0:	bf08      	it	eq
 8004ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	6010      	str	r0, [r2, #0]
 8004eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004eb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004eb4:	f380 8811 	msr	BASEPRI, r0
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f7fe ffae 	bl	8003e20 <vTaskSwitchContext>
 8004ec4:	f04f 0000 	mov.w	r0, #0
 8004ec8:	f380 8811 	msr	BASEPRI, r0
 8004ecc:	bc09      	pop	{r0, r3}
 8004ece:	6819      	ldr	r1, [r3, #0]
 8004ed0:	6808      	ldr	r0, [r1, #0]
 8004ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed6:	f01e 0f10 	tst.w	lr, #16
 8004eda:	bf08      	it	eq
 8004edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ee0:	f380 8809 	msr	PSP, r0
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	f3af 8000 	nop.w

08004ef0 <pxCurrentTCBConst>:
 8004ef0:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop

08004ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f12:	f7fe fecb 	bl	8003cac <xTaskIncrementTick>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <xPortSysTickHandler+0x40>)
 8004f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	2300      	movs	r3, #0
 8004f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f383 8811 	msr	BASEPRI, r3
}
 8004f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f40:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <vPortSetupTimerInterrupt+0x34>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f46:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <vPortSetupTimerInterrupt+0x38>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <vPortSetupTimerInterrupt+0x3c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0a      	ldr	r2, [pc, #40]	@ (8004f7c <vPortSetupTimerInterrupt+0x40>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	099b      	lsrs	r3, r3, #6
 8004f58:	4a09      	ldr	r2, [pc, #36]	@ (8004f80 <vPortSetupTimerInterrupt+0x44>)
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f5e:	4b04      	ldr	r3, [pc, #16]	@ (8004f70 <vPortSetupTimerInterrupt+0x34>)
 8004f60:	2207      	movs	r2, #7
 8004f62:	601a      	str	r2, [r3, #0]
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	e000e010 	.word	0xe000e010
 8004f74:	e000e018 	.word	0xe000e018
 8004f78:	20000000 	.word	0x20000000
 8004f7c:	10624dd3 	.word	0x10624dd3
 8004f80:	e000e014 	.word	0xe000e014

08004f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f94 <vPortEnableVFP+0x10>
 8004f88:	6801      	ldr	r1, [r0, #0]
 8004f8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f8e:	6001      	str	r1, [r0, #0]
 8004f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f92:	bf00      	nop
 8004f94:	e000ed88 	.word	0xe000ed88

08004f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f9e:	f3ef 8305 	mrs	r3, IPSR
 8004fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	d915      	bls.n	8004fd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004faa:	4a18      	ldr	r2, [pc, #96]	@ (800500c <vPortValidateInterruptPriority+0x74>)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fb4:	4b16      	ldr	r3, [pc, #88]	@ (8005010 <vPortValidateInterruptPriority+0x78>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	7afa      	ldrb	r2, [r7, #11]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d20b      	bcs.n	8004fd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	607b      	str	r3, [r7, #4]
}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	e7fd      	b.n	8004fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005014 <vPortValidateInterruptPriority+0x7c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004fde:	4b0e      	ldr	r3, [pc, #56]	@ (8005018 <vPortValidateInterruptPriority+0x80>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d90b      	bls.n	8004ffe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	603b      	str	r3, [r7, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	e7fd      	b.n	8004ffa <vPortValidateInterruptPriority+0x62>
	}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	e000e3f0 	.word	0xe000e3f0
 8005010:	20000df4 	.word	0x20000df4
 8005014:	e000ed0c 	.word	0xe000ed0c
 8005018:	20000df8 	.word	0x20000df8

0800501c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	@ 0x28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005028:	f7fe fd84 	bl	8003b34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800502c:	4b5c      	ldr	r3, [pc, #368]	@ (80051a0 <pvPortMalloc+0x184>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005034:	f000 f924 	bl	8005280 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005038:	4b5a      	ldr	r3, [pc, #360]	@ (80051a4 <pvPortMalloc+0x188>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4013      	ands	r3, r2
 8005040:	2b00      	cmp	r3, #0
 8005042:	f040 8095 	bne.w	8005170 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01e      	beq.n	800508a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800504c:	2208      	movs	r2, #8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	2b00      	cmp	r3, #0
 800505c:	d015      	beq.n	800508a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f023 0307 	bic.w	r3, r3, #7
 8005064:	3308      	adds	r3, #8
 8005066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00b      	beq.n	800508a <pvPortMalloc+0x6e>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	617b      	str	r3, [r7, #20]
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop
 8005088:	e7fd      	b.n	8005086 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d06f      	beq.n	8005170 <pvPortMalloc+0x154>
 8005090:	4b45      	ldr	r3, [pc, #276]	@ (80051a8 <pvPortMalloc+0x18c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d86a      	bhi.n	8005170 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800509a:	4b44      	ldr	r3, [pc, #272]	@ (80051ac <pvPortMalloc+0x190>)
 800509c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800509e:	4b43      	ldr	r3, [pc, #268]	@ (80051ac <pvPortMalloc+0x190>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050a4:	e004      	b.n	80050b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d903      	bls.n	80050c2 <pvPortMalloc+0xa6>
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f1      	bne.n	80050a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050c2:	4b37      	ldr	r3, [pc, #220]	@ (80051a0 <pvPortMalloc+0x184>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d051      	beq.n	8005170 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2208      	movs	r2, #8
 80050d2:	4413      	add	r3, r2
 80050d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	1ad2      	subs	r2, r2, r3
 80050e6:	2308      	movs	r3, #8
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d920      	bls.n	8005130 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4413      	add	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00b      	beq.n	8005118 <pvPortMalloc+0xfc>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	613b      	str	r3, [r7, #16]
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	e7fd      	b.n	8005114 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800512a:	69b8      	ldr	r0, [r7, #24]
 800512c:	f000 f90a 	bl	8005344 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005130:	4b1d      	ldr	r3, [pc, #116]	@ (80051a8 <pvPortMalloc+0x18c>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	4a1b      	ldr	r2, [pc, #108]	@ (80051a8 <pvPortMalloc+0x18c>)
 800513c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800513e:	4b1a      	ldr	r3, [pc, #104]	@ (80051a8 <pvPortMalloc+0x18c>)
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b1b      	ldr	r3, [pc, #108]	@ (80051b0 <pvPortMalloc+0x194>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d203      	bcs.n	8005152 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800514a:	4b17      	ldr	r3, [pc, #92]	@ (80051a8 <pvPortMalloc+0x18c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a18      	ldr	r2, [pc, #96]	@ (80051b0 <pvPortMalloc+0x194>)
 8005150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	4b13      	ldr	r3, [pc, #76]	@ (80051a4 <pvPortMalloc+0x188>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	431a      	orrs	r2, r3
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005166:	4b13      	ldr	r3, [pc, #76]	@ (80051b4 <pvPortMalloc+0x198>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	4a11      	ldr	r2, [pc, #68]	@ (80051b4 <pvPortMalloc+0x198>)
 800516e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005170:	f7fe fcee 	bl	8003b50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <pvPortMalloc+0x17a>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	60fb      	str	r3, [r7, #12]
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	e7fd      	b.n	8005192 <pvPortMalloc+0x176>
	return pvReturn;
 8005196:	69fb      	ldr	r3, [r7, #28]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3728      	adds	r7, #40	@ 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20004a04 	.word	0x20004a04
 80051a4:	20004a18 	.word	0x20004a18
 80051a8:	20004a08 	.word	0x20004a08
 80051ac:	200049fc 	.word	0x200049fc
 80051b0:	20004a0c 	.word	0x20004a0c
 80051b4:	20004a10 	.word	0x20004a10

080051b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d04f      	beq.n	800526a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051ca:	2308      	movs	r3, #8
 80051cc:	425b      	negs	r3, r3
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4413      	add	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	4b25      	ldr	r3, [pc, #148]	@ (8005274 <vPortFree+0xbc>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4013      	ands	r3, r2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10b      	bne.n	80051fe <vPortFree+0x46>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	60fb      	str	r3, [r7, #12]
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	e7fd      	b.n	80051fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <vPortFree+0x66>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	60bb      	str	r3, [r7, #8]
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	e7fd      	b.n	800521a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	4b14      	ldr	r3, [pc, #80]	@ (8005274 <vPortFree+0xbc>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4013      	ands	r3, r2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01e      	beq.n	800526a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d11a      	bne.n	800526a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	4b0e      	ldr	r3, [pc, #56]	@ (8005274 <vPortFree+0xbc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	43db      	mvns	r3, r3
 800523e:	401a      	ands	r2, r3
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005244:	f7fe fc76 	bl	8003b34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	4b0a      	ldr	r3, [pc, #40]	@ (8005278 <vPortFree+0xc0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4413      	add	r3, r2
 8005252:	4a09      	ldr	r2, [pc, #36]	@ (8005278 <vPortFree+0xc0>)
 8005254:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005256:	6938      	ldr	r0, [r7, #16]
 8005258:	f000 f874 	bl	8005344 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800525c:	4b07      	ldr	r3, [pc, #28]	@ (800527c <vPortFree+0xc4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	4a06      	ldr	r2, [pc, #24]	@ (800527c <vPortFree+0xc4>)
 8005264:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005266:	f7fe fc73 	bl	8003b50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800526a:	bf00      	nop
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20004a18 	.word	0x20004a18
 8005278:	20004a08 	.word	0x20004a08
 800527c:	20004a14 	.word	0x20004a14

08005280 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005286:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800528a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800528c:	4b27      	ldr	r3, [pc, #156]	@ (800532c <prvHeapInit+0xac>)
 800528e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00c      	beq.n	80052b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3307      	adds	r3, #7
 800529e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0307 	bic.w	r3, r3, #7
 80052a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	4a1f      	ldr	r2, [pc, #124]	@ (800532c <prvHeapInit+0xac>)
 80052b0:	4413      	add	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005330 <prvHeapInit+0xb0>)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052be:	4b1c      	ldr	r3, [pc, #112]	@ (8005330 <prvHeapInit+0xb0>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	4413      	add	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052cc:	2208      	movs	r2, #8
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0307 	bic.w	r3, r3, #7
 80052da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4a15      	ldr	r2, [pc, #84]	@ (8005334 <prvHeapInit+0xb4>)
 80052e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052e2:	4b14      	ldr	r3, [pc, #80]	@ (8005334 <prvHeapInit+0xb4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2200      	movs	r2, #0
 80052e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052ea:	4b12      	ldr	r3, [pc, #72]	@ (8005334 <prvHeapInit+0xb4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	1ad2      	subs	r2, r2, r3
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005300:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <prvHeapInit+0xb4>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	4a0a      	ldr	r2, [pc, #40]	@ (8005338 <prvHeapInit+0xb8>)
 800530e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	4a09      	ldr	r2, [pc, #36]	@ (800533c <prvHeapInit+0xbc>)
 8005316:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005318:	4b09      	ldr	r3, [pc, #36]	@ (8005340 <prvHeapInit+0xc0>)
 800531a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800531e:	601a      	str	r2, [r3, #0]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	20000dfc 	.word	0x20000dfc
 8005330:	200049fc 	.word	0x200049fc
 8005334:	20004a04 	.word	0x20004a04
 8005338:	20004a0c 	.word	0x20004a0c
 800533c:	20004a08 	.word	0x20004a08
 8005340:	20004a18 	.word	0x20004a18

08005344 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800534c:	4b28      	ldr	r3, [pc, #160]	@ (80053f0 <prvInsertBlockIntoFreeList+0xac>)
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	e002      	b.n	8005358 <prvInsertBlockIntoFreeList+0x14>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	429a      	cmp	r2, r3
 8005360:	d8f7      	bhi.n	8005352 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4413      	add	r3, r2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	429a      	cmp	r2, r3
 8005372:	d108      	bne.n	8005386 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	441a      	add	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	441a      	add	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d118      	bne.n	80053cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	4b15      	ldr	r3, [pc, #84]	@ (80053f4 <prvInsertBlockIntoFreeList+0xb0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d00d      	beq.n	80053c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	441a      	add	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	e008      	b.n	80053d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053c2:	4b0c      	ldr	r3, [pc, #48]	@ (80053f4 <prvInsertBlockIntoFreeList+0xb0>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	e003      	b.n	80053d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d002      	beq.n	80053e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	200049fc 	.word	0x200049fc
 80053f4:	20004a04 	.word	0x20004a04

080053f8 <memset>:
 80053f8:	4402      	add	r2, r0
 80053fa:	4603      	mov	r3, r0
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d100      	bne.n	8005402 <memset+0xa>
 8005400:	4770      	bx	lr
 8005402:	f803 1b01 	strb.w	r1, [r3], #1
 8005406:	e7f9      	b.n	80053fc <memset+0x4>

08005408 <__libc_init_array>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	4d0d      	ldr	r5, [pc, #52]	@ (8005440 <__libc_init_array+0x38>)
 800540c:	4c0d      	ldr	r4, [pc, #52]	@ (8005444 <__libc_init_array+0x3c>)
 800540e:	1b64      	subs	r4, r4, r5
 8005410:	10a4      	asrs	r4, r4, #2
 8005412:	2600      	movs	r6, #0
 8005414:	42a6      	cmp	r6, r4
 8005416:	d109      	bne.n	800542c <__libc_init_array+0x24>
 8005418:	4d0b      	ldr	r5, [pc, #44]	@ (8005448 <__libc_init_array+0x40>)
 800541a:	4c0c      	ldr	r4, [pc, #48]	@ (800544c <__libc_init_array+0x44>)
 800541c:	f000 f826 	bl	800546c <_init>
 8005420:	1b64      	subs	r4, r4, r5
 8005422:	10a4      	asrs	r4, r4, #2
 8005424:	2600      	movs	r6, #0
 8005426:	42a6      	cmp	r6, r4
 8005428:	d105      	bne.n	8005436 <__libc_init_array+0x2e>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005430:	4798      	blx	r3
 8005432:	3601      	adds	r6, #1
 8005434:	e7ee      	b.n	8005414 <__libc_init_array+0xc>
 8005436:	f855 3b04 	ldr.w	r3, [r5], #4
 800543a:	4798      	blx	r3
 800543c:	3601      	adds	r6, #1
 800543e:	e7f2      	b.n	8005426 <__libc_init_array+0x1e>
 8005440:	08005504 	.word	0x08005504
 8005444:	08005504 	.word	0x08005504
 8005448:	08005504 	.word	0x08005504
 800544c:	08005508 	.word	0x08005508

08005450 <memcpy>:
 8005450:	440a      	add	r2, r1
 8005452:	4291      	cmp	r1, r2
 8005454:	f100 33ff 	add.w	r3, r0, #4294967295
 8005458:	d100      	bne.n	800545c <memcpy+0xc>
 800545a:	4770      	bx	lr
 800545c:	b510      	push	{r4, lr}
 800545e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005462:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005466:	4291      	cmp	r1, r2
 8005468:	d1f9      	bne.n	800545e <memcpy+0xe>
 800546a:	bd10      	pop	{r4, pc}

0800546c <_init>:
 800546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546e:	bf00      	nop
 8005470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005472:	bc08      	pop	{r3}
 8005474:	469e      	mov	lr, r3
 8005476:	4770      	bx	lr

08005478 <_fini>:
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547a:	bf00      	nop
 800547c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547e:	bc08      	pop	{r3}
 8005480:	469e      	mov	lr, r3
 8005482:	4770      	bx	lr
