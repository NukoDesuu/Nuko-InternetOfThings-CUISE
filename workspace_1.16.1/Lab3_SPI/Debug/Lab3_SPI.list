
Lab3_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08004898  08004898  00005898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e4  080049e4  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080049e4  080049e4  000059e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049ec  080049ec  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049ec  080049ec  000059ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049f0  080049f0  000059f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080049f4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000068  08004a5c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08004a5c  000062d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a656  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdb  00000000  00000000  000106ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  000122d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000744  00000000  00000000  00012c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168cd  00000000  00000000  00013394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfba  00000000  00000000  00029c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000894a1  00000000  00000000  00035c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf0bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003150  00000000  00000000  000bf100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c2250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004880 	.word	0x08004880

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004880 	.word	0x08004880

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fc6c 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f868 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f990 	bl	80008b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f964 	bl	800085c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000594:	f000 f8fa 	bl	800078c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000598:	f000 f92e 	bl	80007f8 <MX_SPI3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Check if the user button is pressed
	      if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 800059c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a0:	4824      	ldr	r0, [pc, #144]	@ (8000634 <main+0xb4>)
 80005a2:	f000 ffab 	bl	80014fc <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1f7      	bne.n	800059c <main+0x1c>
	      {
	        HAL_Delay(50);  // Debounce delay
 80005ac:	2032      	movs	r0, #50	@ 0x32
 80005ae:	f000 fcc9 	bl	8000f44 <HAL_Delay>

	        // Transmit data from Master (SPI2)
	        masterTxData = rand() & 0xFF;
 80005b2:	f002 ffb1 	bl	8003518 <rand>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <main+0xb8>)
 80005bc:	701a      	strb	r2, [r3, #0]
	        HAL_SPI_Transmit(&hspi2, &masterTxData, 1, HAL_MAX_DELAY);
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	2201      	movs	r2, #1
 80005c4:	491c      	ldr	r1, [pc, #112]	@ (8000638 <main+0xb8>)
 80005c6:	481d      	ldr	r0, [pc, #116]	@ (800063c <main+0xbc>)
 80005c8:	f001 fd05 	bl	8001fd6 <HAL_SPI_Transmit>
	        UART_Print("Transmitted!\r\n");
 80005cc:	481c      	ldr	r0, [pc, #112]	@ (8000640 <main+0xc0>)
 80005ce:	f000 f8af 	bl	8000730 <UART_Print>

	        // Receive data on Slave (SPI3) using Interrupt or DMA based on your setup
	        HAL_SPI_Receive_IT(&hspi3, &slaveRxData, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	491b      	ldr	r1, [pc, #108]	@ (8000644 <main+0xc4>)
 80005d6:	481c      	ldr	r0, [pc, #112]	@ (8000648 <main+0xc8>)
 80005d8:	f001 fe40 	bl	800225c <HAL_SPI_Receive_IT>

	        // Transmit data from Master (SPI2)
	        HAL_SPI_Transmit(&hspi2, &masterTxData, 1, HAL_MAX_DELAY);
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	2201      	movs	r2, #1
 80005e2:	4915      	ldr	r1, [pc, #84]	@ (8000638 <main+0xb8>)
 80005e4:	4815      	ldr	r0, [pc, #84]	@ (800063c <main+0xbc>)
 80005e6:	f001 fcf6 	bl	8001fd6 <HAL_SPI_Transmit>
	        UART_PrintData("Transmitted:", masterTxData);
 80005ea:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <main+0xb8>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	4816      	ldr	r0, [pc, #88]	@ (800064c <main+0xcc>)
 80005f2:	f000 f8b3 	bl	800075c <UART_PrintData>

	        // Receive data on Slave (SPI3) using Interrupt or DMA based on your setup
	        HAL_SPI_Receive_IT(&hspi3, &slaveRxData, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	4912      	ldr	r1, [pc, #72]	@ (8000644 <main+0xc4>)
 80005fa:	4813      	ldr	r0, [pc, #76]	@ (8000648 <main+0xc8>)
 80005fc:	f001 fe2e 	bl	800225c <HAL_SPI_Receive_IT>

	               HAL_Delay(100); // Wait to avoid multiple toggles
 8000600:	2064      	movs	r0, #100	@ 0x64
 8000602:	f000 fc9f 	bl	8000f44 <HAL_Delay>

	               // Print received data
	               UART_PrintData("Received:", slaveRxData);
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <main+0xc4>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4619      	mov	r1, r3
 800060c:	4810      	ldr	r0, [pc, #64]	@ (8000650 <main+0xd0>)
 800060e:	f000 f8a5 	bl	800075c <UART_PrintData>

	               // Toggle an LED on the slave side if the received data matches
	               if (slaveRxData == masterTxData)
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <main+0xc4>)
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <main+0xb8>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	429a      	cmp	r2, r3
 800061c:	d106      	bne.n	800062c <main+0xac>
	               {
	                 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800061e:	2120      	movs	r1, #32
 8000620:	480c      	ldr	r0, [pc, #48]	@ (8000654 <main+0xd4>)
 8000622:	f000 ff9c 	bl	800155e <HAL_GPIO_TogglePin>
	                 UART_Print("Data match! LED toggled.\r\n");
 8000626:	480c      	ldr	r0, [pc, #48]	@ (8000658 <main+0xd8>)
 8000628:	f000 f882 	bl	8000730 <UART_Print>
	               }

	        HAL_Delay(100); // Avoids multiple toggles
 800062c:	2064      	movs	r0, #100	@ 0x64
 800062e:	f000 fc89 	bl	8000f44 <HAL_Delay>
	      if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000632:	e7b3      	b.n	800059c <main+0x1c>
 8000634:	40020800 	.word	0x40020800
 8000638:	2000017c 	.word	0x2000017c
 800063c:	20000084 	.word	0x20000084
 8000640:	08004898 	.word	0x08004898
 8000644:	2000017d 	.word	0x2000017d
 8000648:	200000dc 	.word	0x200000dc
 800064c:	080048a8 	.word	0x080048a8
 8000650:	080048b8 	.word	0x080048b8
 8000654:	40020000 	.word	0x40020000
 8000658:	080048c4 	.word	0x080048c4

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 f8b7 	bl	80037de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	@ (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006cc:	2310      	movs	r3, #16
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006da:	2304      	movs	r3, #4
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 ff56 	bl	8001594 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ee:	f000 f94d 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f001 f9b8 	bl	8001a84 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 f937 	bl	800098c <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <UART_Print>:

void UART_Print(const char *msg)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff fd51 	bl	80001e0 <strlen>
 800073e:	4603      	mov	r3, r0
 8000740:	b29a      	uxth	r2, r3
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	4803      	ldr	r0, [pc, #12]	@ (8000758 <UART_Print+0x28>)
 800074a:	f002 fb2a 	bl	8002da2 <HAL_UART_Transmit>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000134 	.word	0x20000134

0800075c <UART_PrintData>:

void UART_PrintData(const char *prefix, uint8_t data)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b090      	sub	sp, #64	@ 0x40
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
  char msg[50];
  sprintf(msg, "%s 0x%02X\r\n", prefix, data);
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	f107 000c 	add.w	r0, r7, #12
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4905      	ldr	r1, [pc, #20]	@ (8000788 <UART_PrintData+0x2c>)
 8000772:	f002 ffd1 	bl	8003718 <siprintf>
  UART_Print(msg);
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ffd8 	bl	8000730 <UART_Print>
}
 8000780:	bf00      	nop
 8000782:	3740      	adds	r7, #64	@ 0x40
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	080048e0 	.word	0x080048e0

0800078c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000790:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_SPI2_Init+0x64>)
 8000792:	4a18      	ldr	r2, [pc, #96]	@ (80007f4 <MX_SPI2_Init+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_SPI2_Init+0x64>)
 8000798:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800079c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007d8:	220a      	movs	r2, #10
 80007da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007de:	f001 fb71 	bl	8001ec4 <HAL_SPI_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007e8:	f000 f8d0 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000084 	.word	0x20000084
 80007f4:	40003800 	.word	0x40003800

080007f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007fc:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <MX_SPI3_Init+0x5c>)
 80007fe:	4a16      	ldr	r2, [pc, #88]	@ (8000858 <MX_SPI3_Init+0x60>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000802:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_SPI3_Init+0x5c>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <MX_SPI3_Init+0x5c>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_SPI3_Init+0x5c>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_SPI3_Init+0x5c>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_SPI3_Init+0x5c>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_SPI3_Init+0x5c>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_SPI3_Init+0x5c>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_SPI3_Init+0x5c>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_SPI3_Init+0x5c>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_SPI3_Init+0x5c>)
 800083a:	220a      	movs	r2, #10
 800083c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_SPI3_Init+0x5c>)
 8000840:	f001 fb40 	bl	8001ec4 <HAL_SPI_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_SPI3_Init+0x56>
  {
    Error_Handler();
 800084a:	f000 f89f 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000dc 	.word	0x200000dc
 8000858:	40003c00 	.word	0x40003c00

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <MX_USART2_UART_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000894:	f002 fa35 	bl	8002d02 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800089e:	f000 f875 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000134 	.word	0x20000134
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000980 <MX_GPIO_Init+0xd0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000980 <MX_GPIO_Init+0xd0>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000980 <MX_GPIO_Init+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b26      	ldr	r3, [pc, #152]	@ (8000980 <MX_GPIO_Init+0xd0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a25      	ldr	r2, [pc, #148]	@ (8000980 <MX_GPIO_Init+0xd0>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <MX_GPIO_Init+0xd0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <MX_GPIO_Init+0xd0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a1e      	ldr	r2, [pc, #120]	@ (8000980 <MX_GPIO_Init+0xd0>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <MX_GPIO_Init+0xd0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a17      	ldr	r2, [pc, #92]	@ (8000980 <MX_GPIO_Init+0xd0>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2120      	movs	r1, #32
 800093a:	4812      	ldr	r0, [pc, #72]	@ (8000984 <MX_GPIO_Init+0xd4>)
 800093c:	f000 fdf6 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000940:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000946:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	480c      	ldr	r0, [pc, #48]	@ (8000988 <MX_GPIO_Init+0xd8>)
 8000958:	f000 fc4c 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800095c:	2320      	movs	r3, #32
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_GPIO_Init+0xd4>)
 8000974:	f000 fc3e 	bl	80011f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	@ 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000
 8000988:	40020800 	.word	0x40020800

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <Error_Handler+0x8>

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d6:	2007      	movs	r0, #7
 80009d8:	f000 fba8 	bl	800112c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	@ 0x30
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a4a      	ldr	r2, [pc, #296]	@ (8000b30 <HAL_SPI_MspInit+0x148>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d135      	bne.n	8000a76 <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
 8000a0e:	4b49      	ldr	r3, [pc, #292]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a48      	ldr	r2, [pc, #288]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b46      	ldr	r3, [pc, #280]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a22:	61bb      	str	r3, [r7, #24]
 8000a24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	4b42      	ldr	r3, [pc, #264]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a41      	ldr	r2, [pc, #260]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b3f      	ldr	r3, [pc, #252]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a42:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a54:	2305      	movs	r3, #5
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4836      	ldr	r0, [pc, #216]	@ (8000b38 <HAL_SPI_MspInit+0x150>)
 8000a60:	f000 fbc8 	bl	80011f4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	2024      	movs	r0, #36	@ 0x24
 8000a6a:	f000 fb6a 	bl	8001142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000a6e:	2024      	movs	r0, #36	@ 0x24
 8000a70:	f000 fb83 	bl	800117a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a74:	e057      	b.n	8000b26 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI3)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a30      	ldr	r2, [pc, #192]	@ (8000b3c <HAL_SPI_MspInit+0x154>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d152      	bne.n	8000b26 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	4b2b      	ldr	r3, [pc, #172]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	4a2a      	ldr	r2, [pc, #168]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a90:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	4b24      	ldr	r3, [pc, #144]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	4a23      	ldr	r2, [pc, #140]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aac:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <HAL_SPI_MspInit+0x14c>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ad4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ae6:	2306      	movs	r3, #6
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4813      	ldr	r0, [pc, #76]	@ (8000b40 <HAL_SPI_MspInit+0x158>)
 8000af2:	f000 fb7f 	bl	80011f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000af6:	2338      	movs	r3, #56	@ 0x38
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b06:	2306      	movs	r3, #6
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <HAL_SPI_MspInit+0x150>)
 8000b12:	f000 fb6f 	bl	80011f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2033      	movs	r0, #51	@ 0x33
 8000b1c:	f000 fb11 	bl	8001142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000b20:	2033      	movs	r0, #51	@ 0x33
 8000b22:	f000 fb2a 	bl	800117a <HAL_NVIC_EnableIRQ>
}
 8000b26:	bf00      	nop
 8000b28:	3730      	adds	r7, #48	@ 0x30
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40003800 	.word	0x40003800
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40003c00 	.word	0x40003c00
 8000b40:	40020000 	.word	0x40020000

08000b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a19      	ldr	r2, [pc, #100]	@ (8000bc8 <HAL_UART_MspInit+0x84>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12b      	bne.n	8000bbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <HAL_UART_MspInit+0x88>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a17      	ldr	r2, [pc, #92]	@ (8000bcc <HAL_UART_MspInit+0x88>)
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <HAL_UART_MspInit+0x88>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <HAL_UART_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a10      	ldr	r2, [pc, #64]	@ (8000bcc <HAL_UART_MspInit+0x88>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_UART_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000bba:	f000 fb1b 	bl	80011f4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	@ 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40004400 	.word	0x40004400
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2a:	f000 f96b 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <SPI2_IRQHandler+0x10>)
 8000c3a:	f001 fc3d 	bl	80024b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000084 	.word	0x20000084

08000c48 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <SPI3_IRQHandler+0x10>)
 8000c4e:	f001 fc33 	bl	80024b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000dc 	.word	0x200000dc

08000c5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return 1;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <_kill>:

int _kill(int pid, int sig)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c76:	f002 fe01 	bl	800387c <__errno>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2216      	movs	r2, #22
 8000c7e:	601a      	str	r2, [r3, #0]
  return -1;
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_exit>:

void _exit (int status)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ffe7 	bl	8000c6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c9e:	bf00      	nop
 8000ca0:	e7fd      	b.n	8000c9e <_exit+0x12>

08000ca2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	e00a      	b.n	8000cca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	4601      	mov	r1, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	60ba      	str	r2, [r7, #8]
 8000cc0:	b2ca      	uxtb	r2, r1
 8000cc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	dbf0      	blt.n	8000cb4 <_read+0x12>
  }

  return len;
 8000cd2:	687b      	ldr	r3, [r7, #4]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	e009      	b.n	8000d02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	60ba      	str	r2, [r7, #8]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dbf1      	blt.n	8000cee <_write+0x12>
  }
  return len;
 8000d0a:	687b      	ldr	r3, [r7, #4]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_close>:

int _close(int file)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d3c:	605a      	str	r2, [r3, #4]
  return 0;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_isatty>:

int _isatty(int file)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b085      	sub	sp, #20
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f002 fd66 	bl	800387c <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20020000 	.word	0x20020000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	20000180 	.word	0x20000180
 8000de4:	200002d8 	.word	0x200002d8

08000de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <SystemInit+0x20>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df2:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <SystemInit+0x20>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e10:	f7ff ffea 	bl	8000de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e14:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e16:	490d      	ldr	r1, [pc, #52]	@ (8000e4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e18:	4a0d      	ldr	r2, [pc, #52]	@ (8000e50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f002 fd25 	bl	8003888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3e:	f7ff fb9f 	bl	8000580 <main>
  bx  lr    
 8000e42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e50:	080049f4 	.word	0x080049f4
  ldr r2, =_sbss
 8000e54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e58:	200002d4 	.word	0x200002d4

08000e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <HAL_Init+0x40>)
 8000e6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <HAL_Init+0x40>)
 8000e76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	@ (8000ea0 <HAL_Init+0x40>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f94f 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f000 f808 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fd80 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f967 	bl	8001196 <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 f92f 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	@ (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	@ (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000184 	.word	0x20000184

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000184 	.word	0x20000184

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff ffee 	bl	8000f2c <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff ffde 	bl	8000f2c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0b      	blt.n	800101a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4907      	ldr	r1, [pc, #28]	@ (8001028 <__NVIC_EnableIRQ+0x38>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	@ (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	@ (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	@ 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff29 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff3e 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff8e 	bl	8001080 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5d 	bl	800102c <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff31 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffa2 	bl	80010e8 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d004      	beq.n	80011cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e00c      	b.n	80011e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2205      	movs	r2, #5
 80011d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0201 	bic.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	@ 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	e159      	b.n	80014c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	429a      	cmp	r2, r3
 800122a:	f040 8148 	bne.w	80014be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b01      	cmp	r3, #1
 8001238:	d005      	beq.n	8001246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	2b02      	cmp	r3, #2
 8001244:	d130      	bne.n	80012a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 0201 	and.w	r2, r3, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d017      	beq.n	80012e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d123      	bne.n	8001338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0203 	and.w	r2, r3, #3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80a2 	beq.w	80014be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b57      	ldr	r3, [pc, #348]	@ (80014dc <HAL_GPIO_Init+0x2e8>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	4a56      	ldr	r2, [pc, #344]	@ (80014dc <HAL_GPIO_Init+0x2e8>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001388:	6453      	str	r3, [r2, #68]	@ 0x44
 800138a:	4b54      	ldr	r3, [pc, #336]	@ (80014dc <HAL_GPIO_Init+0x2e8>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001396:	4a52      	ldr	r2, [pc, #328]	@ (80014e0 <HAL_GPIO_Init+0x2ec>)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a49      	ldr	r2, [pc, #292]	@ (80014e4 <HAL_GPIO_Init+0x2f0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <HAL_GPIO_Init+0x202>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a48      	ldr	r2, [pc, #288]	@ (80014e8 <HAL_GPIO_Init+0x2f4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0x1fe>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a47      	ldr	r2, [pc, #284]	@ (80014ec <HAL_GPIO_Init+0x2f8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00d      	beq.n	80013ee <HAL_GPIO_Init+0x1fa>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a46      	ldr	r2, [pc, #280]	@ (80014f0 <HAL_GPIO_Init+0x2fc>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <HAL_GPIO_Init+0x1f6>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a45      	ldr	r2, [pc, #276]	@ (80014f4 <HAL_GPIO_Init+0x300>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_GPIO_Init+0x1f2>
 80013e2:	2304      	movs	r3, #4
 80013e4:	e008      	b.n	80013f8 <HAL_GPIO_Init+0x204>
 80013e6:	2307      	movs	r3, #7
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x204>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e004      	b.n	80013f8 <HAL_GPIO_Init+0x204>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e002      	b.n	80013f8 <HAL_GPIO_Init+0x204>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x204>
 80013f6:	2300      	movs	r3, #0
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	f002 0203 	and.w	r2, r2, #3
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	4093      	lsls	r3, r2
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001408:	4935      	ldr	r1, [pc, #212]	@ (80014e0 <HAL_GPIO_Init+0x2ec>)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001416:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <HAL_GPIO_Init+0x304>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143a:	4a2f      	ldr	r2, [pc, #188]	@ (80014f8 <HAL_GPIO_Init+0x304>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001440:	4b2d      	ldr	r3, [pc, #180]	@ (80014f8 <HAL_GPIO_Init+0x304>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001464:	4a24      	ldr	r2, [pc, #144]	@ (80014f8 <HAL_GPIO_Init+0x304>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146a:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <HAL_GPIO_Init+0x304>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800148e:	4a1a      	ldr	r2, [pc, #104]	@ (80014f8 <HAL_GPIO_Init+0x304>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <HAL_GPIO_Init+0x304>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b8:	4a0f      	ldr	r2, [pc, #60]	@ (80014f8 <HAL_GPIO_Init+0x304>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	f67f aea2 	bls.w	8001210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3724      	adds	r7, #36	@ 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020c00 	.word	0x40020c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40013c00 	.word	0x40013c00

080014fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e001      	b.n	800151e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	619a      	str	r2, [r3, #24]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001570:	887a      	ldrh	r2, [r7, #2]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4013      	ands	r3, r2
 8001576:	041a      	lsls	r2, r3, #16
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43d9      	mvns	r1, r3
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	400b      	ands	r3, r1
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	619a      	str	r2, [r3, #24]
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e267      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d075      	beq.n	800169e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b2:	4b88      	ldr	r3, [pc, #544]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d00c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015be:	4b85      	ldr	r3, [pc, #532]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d112      	bne.n	80015f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ca:	4b82      	ldr	r3, [pc, #520]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015d6:	d10b      	bne.n	80015f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	4b7e      	ldr	r3, [pc, #504]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d05b      	beq.n	800169c <HAL_RCC_OscConfig+0x108>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d157      	bne.n	800169c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e242      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f8:	d106      	bne.n	8001608 <HAL_RCC_OscConfig+0x74>
 80015fa:	4b76      	ldr	r3, [pc, #472]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a75      	ldr	r2, [pc, #468]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e01d      	b.n	8001644 <HAL_RCC_OscConfig+0xb0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x98>
 8001612:	4b70      	ldr	r3, [pc, #448]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a6f      	ldr	r2, [pc, #444]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b6d      	ldr	r3, [pc, #436]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a6c      	ldr	r2, [pc, #432]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0xb0>
 800162c:	4b69      	ldr	r3, [pc, #420]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a68      	ldr	r2, [pc, #416]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b66      	ldr	r3, [pc, #408]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a65      	ldr	r2, [pc, #404]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 800163e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fc6e 	bl	8000f2c <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fc6a 	bl	8000f2c <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	@ 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e207      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b5b      	ldr	r3, [pc, #364]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0xc0>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fc5a 	bl	8000f2c <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fc56 	bl	8000f2c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	@ 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e1f3      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	4b51      	ldr	r3, [pc, #324]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0xe8>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d063      	beq.n	8001772 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016aa:	4b4a      	ldr	r3, [pc, #296]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b6:	4b47      	ldr	r3, [pc, #284]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d11c      	bne.n	80016fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c2:	4b44      	ldr	r3, [pc, #272]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d116      	bne.n	80016fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	4b41      	ldr	r3, [pc, #260]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_RCC_OscConfig+0x152>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e1c7      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e6:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4937      	ldr	r1, [pc, #220]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fa:	e03a      	b.n	8001772 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001704:	4b34      	ldr	r3, [pc, #208]	@ (80017d8 <HAL_RCC_OscConfig+0x244>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7ff fc0f 	bl	8000f2c <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff fc0b 	bl	8000f2c <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1a8      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	4b2b      	ldr	r3, [pc, #172]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4925      	ldr	r1, [pc, #148]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001740:	4313      	orrs	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
 8001744:	e015      	b.n	8001772 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001746:	4b24      	ldr	r3, [pc, #144]	@ (80017d8 <HAL_RCC_OscConfig+0x244>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fbee 	bl	8000f2c <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001754:	f7ff fbea 	bl	8000f2c <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e187      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d036      	beq.n	80017ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d016      	beq.n	80017b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <HAL_RCC_OscConfig+0x248>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff fbce 	bl	8000f2c <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fbca 	bl	8000f2c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e167      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <HAL_RCC_OscConfig+0x240>)
 80017a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x200>
 80017b2:	e01b      	b.n	80017ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_RCC_OscConfig+0x248>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fbb7 	bl	8000f2c <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c0:	e00e      	b.n	80017e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c2:	f7ff fbb3 	bl	8000f2c <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d907      	bls.n	80017e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e150      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
 80017d4:	40023800 	.word	0x40023800
 80017d8:	42470000 	.word	0x42470000
 80017dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	4b88      	ldr	r3, [pc, #544]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 80017e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ea      	bne.n	80017c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8097 	beq.w	8001928 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fe:	4b81      	ldr	r3, [pc, #516]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10f      	bne.n	800182a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	4a7c      	ldr	r2, [pc, #496]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	@ 0x40
 800181a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001826:	2301      	movs	r3, #1
 8001828:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182a:	4b77      	ldr	r3, [pc, #476]	@ (8001a08 <HAL_RCC_OscConfig+0x474>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d118      	bne.n	8001868 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001836:	4b74      	ldr	r3, [pc, #464]	@ (8001a08 <HAL_RCC_OscConfig+0x474>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a73      	ldr	r2, [pc, #460]	@ (8001a08 <HAL_RCC_OscConfig+0x474>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001842:	f7ff fb73 	bl	8000f2c <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184a:	f7ff fb6f 	bl	8000f2c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e10c      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a08 <HAL_RCC_OscConfig+0x474>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x2ea>
 8001870:	4b64      	ldr	r3, [pc, #400]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001874:	4a63      	ldr	r2, [pc, #396]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6713      	str	r3, [r2, #112]	@ 0x70
 800187c:	e01c      	b.n	80018b8 <HAL_RCC_OscConfig+0x324>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b05      	cmp	r3, #5
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x30c>
 8001886:	4b5f      	ldr	r3, [pc, #380]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800188a:	4a5e      	ldr	r2, [pc, #376]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6713      	str	r3, [r2, #112]	@ 0x70
 8001892:	4b5c      	ldr	r3, [pc, #368]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001896:	4a5b      	ldr	r2, [pc, #364]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6713      	str	r3, [r2, #112]	@ 0x70
 800189e:	e00b      	b.n	80018b8 <HAL_RCC_OscConfig+0x324>
 80018a0:	4b58      	ldr	r3, [pc, #352]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ac:	4b55      	ldr	r3, [pc, #340]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b0:	4a54      	ldr	r2, [pc, #336]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018b2:	f023 0304 	bic.w	r3, r3, #4
 80018b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d015      	beq.n	80018ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c0:	f7ff fb34 	bl	8000f2c <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c6:	e00a      	b.n	80018de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c8:	f7ff fb30 	bl	8000f2c <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e0cb      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018de:	4b49      	ldr	r3, [pc, #292]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0ee      	beq.n	80018c8 <HAL_RCC_OscConfig+0x334>
 80018ea:	e014      	b.n	8001916 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ec:	f7ff fb1e 	bl	8000f2c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f2:	e00a      	b.n	800190a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff fb1a 	bl	8000f2c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0b5      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ee      	bne.n	80018f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191c:	4b39      	ldr	r3, [pc, #228]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	4a38      	ldr	r2, [pc, #224]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001926:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80a1 	beq.w	8001a74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001932:	4b34      	ldr	r3, [pc, #208]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b08      	cmp	r3, #8
 800193c:	d05c      	beq.n	80019f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d141      	bne.n	80019ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001946:	4b31      	ldr	r3, [pc, #196]	@ (8001a0c <HAL_RCC_OscConfig+0x478>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff faee 	bl	8000f2c <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff faea 	bl	8000f2c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e087      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	4b27      	ldr	r3, [pc, #156]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	019b      	lsls	r3, r3, #6
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001988:	085b      	lsrs	r3, r3, #1
 800198a:	3b01      	subs	r3, #1
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001994:	061b      	lsls	r3, r3, #24
 8001996:	491b      	ldr	r1, [pc, #108]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <HAL_RCC_OscConfig+0x478>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff fac3 	bl	8000f2c <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff fabf 	bl	8000f2c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e05c      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x416>
 80019c8:	e054      	b.n	8001a74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <HAL_RCC_OscConfig+0x478>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff faac 	bl	8000f2c <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff faa8 	bl	8000f2c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e045      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_RCC_OscConfig+0x470>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x444>
 80019f6:	e03d      	b.n	8001a74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e038      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <HAL_RCC_OscConfig+0x4ec>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d028      	beq.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d121      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d11a      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a40:	4013      	ands	r3, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d111      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a56:	085b      	lsrs	r3, r3, #1
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800

08001a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0cc      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a98:	4b68      	ldr	r3, [pc, #416]	@ (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d90c      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b65      	ldr	r3, [pc, #404]	@ (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b63      	ldr	r3, [pc, #396]	@ (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0b8      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d020      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad8:	4b59      	ldr	r3, [pc, #356]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a58      	ldr	r2, [pc, #352]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af0:	4b53      	ldr	r3, [pc, #332]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a52      	ldr	r2, [pc, #328]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b50      	ldr	r3, [pc, #320]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	494d      	ldr	r1, [pc, #308]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d044      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b47      	ldr	r3, [pc, #284]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d119      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e07f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b42:	4b3f      	ldr	r3, [pc, #252]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e06f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b52:	4b3b      	ldr	r3, [pc, #236]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e067      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b62:	4b37      	ldr	r3, [pc, #220]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f023 0203 	bic.w	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4934      	ldr	r1, [pc, #208]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b74:	f7ff f9da 	bl	8000f2c <HAL_GetTick>
 8001b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7c:	f7ff f9d6 	bl	8000f2c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e04f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 020c 	and.w	r2, r3, #12
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d1eb      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b25      	ldr	r3, [pc, #148]	@ (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d20c      	bcs.n	8001bcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e032      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd8:	4b19      	ldr	r3, [pc, #100]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4916      	ldr	r1, [pc, #88]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf6:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	490e      	ldr	r1, [pc, #56]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c0a:	f000 f821 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	490a      	ldr	r1, [pc, #40]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	5ccb      	ldrb	r3, [r1, r3]
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	4a09      	ldr	r2, [pc, #36]	@ (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f93a 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023c00 	.word	0x40023c00
 8001c40:	40023800 	.word	0x40023800
 8001c44:	080048ec 	.word	0x080048ec
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c54:	b094      	sub	sp, #80	@ 0x50
 8001c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c60:	2300      	movs	r3, #0
 8001c62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c68:	4b79      	ldr	r3, [pc, #484]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d00d      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x40>
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	f200 80e1 	bhi.w	8001e3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x34>
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d003      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c82:	e0db      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4b73      	ldr	r3, [pc, #460]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c86:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001c88:	e0db      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c8a:	4b73      	ldr	r3, [pc, #460]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c8e:	e0d8      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c90:	4b6f      	ldr	r3, [pc, #444]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c98:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d063      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	099b      	lsrs	r3, r3, #6
 8001cac:	2200      	movs	r2, #0
 8001cae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cba:	2300      	movs	r3, #0
 8001cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cc2:	4622      	mov	r2, r4
 8001cc4:	462b      	mov	r3, r5
 8001cc6:	f04f 0000 	mov.w	r0, #0
 8001cca:	f04f 0100 	mov.w	r1, #0
 8001cce:	0159      	lsls	r1, r3, #5
 8001cd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd4:	0150      	lsls	r0, r2, #5
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4621      	mov	r1, r4
 8001cdc:	1a51      	subs	r1, r2, r1
 8001cde:	6139      	str	r1, [r7, #16]
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cf4:	4659      	mov	r1, fp
 8001cf6:	018b      	lsls	r3, r1, #6
 8001cf8:	4651      	mov	r1, sl
 8001cfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cfe:	4651      	mov	r1, sl
 8001d00:	018a      	lsls	r2, r1, #6
 8001d02:	4651      	mov	r1, sl
 8001d04:	ebb2 0801 	subs.w	r8, r2, r1
 8001d08:	4659      	mov	r1, fp
 8001d0a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d22:	4690      	mov	r8, r2
 8001d24:	4699      	mov	r9, r3
 8001d26:	4623      	mov	r3, r4
 8001d28:	eb18 0303 	adds.w	r3, r8, r3
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	462b      	mov	r3, r5
 8001d30:	eb49 0303 	adc.w	r3, r9, r3
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d42:	4629      	mov	r1, r5
 8001d44:	024b      	lsls	r3, r1, #9
 8001d46:	4621      	mov	r1, r4
 8001d48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	024a      	lsls	r2, r1, #9
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d56:	2200      	movs	r2, #0
 8001d58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d60:	f7fe fa96 	bl	8000290 <__aeabi_uldivmod>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4613      	mov	r3, r2
 8001d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d6c:	e058      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6e:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	099b      	lsrs	r3, r3, #6
 8001d74:	2200      	movs	r2, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	4611      	mov	r1, r2
 8001d7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d7e:	623b      	str	r3, [r7, #32]
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d88:	4642      	mov	r2, r8
 8001d8a:	464b      	mov	r3, r9
 8001d8c:	f04f 0000 	mov.w	r0, #0
 8001d90:	f04f 0100 	mov.w	r1, #0
 8001d94:	0159      	lsls	r1, r3, #5
 8001d96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d9a:	0150      	lsls	r0, r2, #5
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4641      	mov	r1, r8
 8001da2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001da6:	4649      	mov	r1, r9
 8001da8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001db8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dc0:	ebb2 040a 	subs.w	r4, r2, sl
 8001dc4:	eb63 050b 	sbc.w	r5, r3, fp
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	00eb      	lsls	r3, r5, #3
 8001dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dd6:	00e2      	lsls	r2, r4, #3
 8001dd8:	4614      	mov	r4, r2
 8001dda:	461d      	mov	r5, r3
 8001ddc:	4643      	mov	r3, r8
 8001dde:	18e3      	adds	r3, r4, r3
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	464b      	mov	r3, r9
 8001de4:	eb45 0303 	adc.w	r3, r5, r3
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001df6:	4629      	mov	r1, r5
 8001df8:	028b      	lsls	r3, r1, #10
 8001dfa:	4621      	mov	r1, r4
 8001dfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e00:	4621      	mov	r1, r4
 8001e02:	028a      	lsls	r2, r1, #10
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	61fa      	str	r2, [r7, #28]
 8001e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e14:	f7fe fa3c 	bl	8000290 <__aeabi_uldivmod>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	0c1b      	lsrs	r3, r3, #16
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001e30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e3a:	e002      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e3c:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3750      	adds	r7, #80	@ 0x50
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	00f42400 	.word	0x00f42400
 8001e58:	007a1200 	.word	0x007a1200

08001e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e60:	4b03      	ldr	r3, [pc, #12]	@ (8001e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000000 	.word	0x20000000

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e78:	f7ff fff0 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	0a9b      	lsrs	r3, r3, #10
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4903      	ldr	r1, [pc, #12]	@ (8001e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	080048fc 	.word	0x080048fc

08001e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ea0:	f7ff ffdc 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0b5b      	lsrs	r3, r3, #13
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4903      	ldr	r1, [pc, #12]	@ (8001ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	080048fc 	.word	0x080048fc

08001ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e07b      	b.n	8001fce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d108      	bne.n	8001ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ee6:	d009      	beq.n	8001efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
 8001eee:	e005      	b.n	8001efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fd66 	bl	80009e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f80:	ea42 0103 	orr.w	r1, r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	0c1b      	lsrs	r3, r3, #16
 8001f9a:	f003 0104 	and.w	r1, r3, #4
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa2:	f003 0210 	and.w	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69da      	ldr	r2, [r3, #28]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b088      	sub	sp, #32
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_SPI_Transmit+0x22>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e12d      	b.n	8002254 <HAL_SPI_Transmit+0x27e>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002000:	f7fe ff94 	bl	8000f2c <HAL_GetTick>
 8002004:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d002      	beq.n	800201c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002016:	2302      	movs	r3, #2
 8002018:	77fb      	strb	r3, [r7, #31]
    goto error;
 800201a:	e116      	b.n	800224a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_SPI_Transmit+0x52>
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800202c:	e10d      	b.n	800224a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2203      	movs	r2, #3
 8002032:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	88fa      	ldrh	r2, [r7, #6]
 8002046:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	88fa      	ldrh	r2, [r7, #6]
 800204c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002074:	d10f      	bne.n	8002096 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002084:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002094:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a0:	2b40      	cmp	r3, #64	@ 0x40
 80020a2:	d007      	beq.n	80020b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020bc:	d14f      	bne.n	800215e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <HAL_SPI_Transmit+0xf6>
 80020c6:	8afb      	ldrh	r3, [r7, #22]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d142      	bne.n	8002152 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	881a      	ldrh	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	1c9a      	adds	r2, r3, #2
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020f0:	e02f      	b.n	8002152 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d112      	bne.n	8002126 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002104:	881a      	ldrh	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002110:	1c9a      	adds	r2, r3, #2
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002124:	e015      	b.n	8002152 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002126:	f7fe ff01 	bl	8000f2c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d803      	bhi.n	800213e <HAL_SPI_Transmit+0x168>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d102      	bne.n	8002144 <HAL_SPI_Transmit+0x16e>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d106      	bne.n	8002152 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002150:	e07b      	b.n	800224a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1ca      	bne.n	80020f2 <HAL_SPI_Transmit+0x11c>
 800215c:	e050      	b.n	8002200 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_SPI_Transmit+0x196>
 8002166:	8afb      	ldrh	r3, [r7, #22]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d144      	bne.n	80021f6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	330c      	adds	r3, #12
 8002176:	7812      	ldrb	r2, [r2, #0]
 8002178:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002192:	e030      	b.n	80021f6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d113      	bne.n	80021ca <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	330c      	adds	r3, #12
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80021c8:	e015      	b.n	80021f6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021ca:	f7fe feaf 	bl	8000f2c <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d803      	bhi.n	80021e2 <HAL_SPI_Transmit+0x20c>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d102      	bne.n	80021e8 <HAL_SPI_Transmit+0x212>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d106      	bne.n	80021f6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80021f4:	e029      	b.n	800224a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1c9      	bne.n	8002194 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	6839      	ldr	r1, [r7, #0]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 fc75 	bl	8002af4 <SPI_EndRxTxTransaction>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10a      	bne.n	8002234 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	77fb      	strb	r3, [r7, #31]
 8002240:	e003      	b.n	800224a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002252:	7ffb      	ldrb	r3, [r7, #31]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	4613      	mov	r3, r2
 8002268:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b01      	cmp	r3, #1
 8002278:	d002      	beq.n	8002280 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800227a:	2302      	movs	r3, #2
 800227c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800227e:	e07f      	b.n	8002380 <HAL_SPI_Receive_IT+0x124>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d110      	bne.n	80022aa <HAL_SPI_Receive_IT+0x4e>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002290:	d10b      	bne.n	80022aa <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2204      	movs	r2, #4
 8002296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f877 	bl	8002394 <HAL_SPI_TransmitReceive_IT>
 80022a6:	4603      	mov	r3, r0
 80022a8:	e06b      	b.n	8002382 <HAL_SPI_Receive_IT+0x126>
  }


  if ((pData == NULL) || (Size == 0U))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <HAL_SPI_Receive_IT+0x5a>
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022ba:	e061      	b.n	8002380 <HAL_SPI_Receive_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_SPI_Receive_IT+0x6e>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e05b      	b.n	8002382 <HAL_SPI_Receive_IT+0x126>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2204      	movs	r2, #4
 80022d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	88fa      	ldrh	r2, [r7, #6]
 80022ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	88fa      	ldrh	r2, [r7, #6]
 80022f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a1d      	ldr	r2, [pc, #116]	@ (800238c <HAL_SPI_Receive_IT+0x130>)
 8002316:	641a      	str	r2, [r3, #64]	@ 0x40
 8002318:	e002      	b.n	8002320 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4a1c      	ldr	r2, [pc, #112]	@ (8002390 <HAL_SPI_Receive_IT+0x134>)
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002328:	d10f      	bne.n	800234a <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002338:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002348:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002354:	2b40      	cmp	r3, #64	@ 0x40
 8002356:	d007      	beq.n	8002368 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002366:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800237e:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002380:	7dfb      	ldrb	r3, [r7, #23]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	080028d1 	.word	0x080028d1
 8002390:	08002887 	.word	0x08002887

08002394 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023ac:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023b4:	7dbb      	ldrb	r3, [r7, #22]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d00d      	beq.n	80023d6 <HAL_SPI_TransmitReceive_IT+0x42>
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023c0:	d106      	bne.n	80023d0 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <HAL_SPI_TransmitReceive_IT+0x3c>
 80023ca:	7dbb      	ldrb	r3, [r7, #22]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d002      	beq.n	80023d6 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023d4:	e061      	b.n	800249a <HAL_SPI_TransmitReceive_IT+0x106>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_SPI_TransmitReceive_IT+0x54>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <HAL_SPI_TransmitReceive_IT+0x54>
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023ec:	e055      	b.n	800249a <HAL_SPI_TransmitReceive_IT+0x106>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_SPI_TransmitReceive_IT+0x68>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e04f      	b.n	800249c <HAL_SPI_TransmitReceive_IT+0x108>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b04      	cmp	r3, #4
 800240e:	d003      	beq.n	8002418 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2205      	movs	r2, #5
 8002414:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	887a      	ldrh	r2, [r7, #2]
 800242e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	887a      	ldrh	r2, [r7, #2]
 800243a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d006      	beq.n	8002458 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a16      	ldr	r2, [pc, #88]	@ (80024a8 <HAL_SPI_TransmitReceive_IT+0x114>)
 800244e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a16      	ldr	r2, [pc, #88]	@ (80024ac <HAL_SPI_TransmitReceive_IT+0x118>)
 8002454:	645a      	str	r2, [r3, #68]	@ 0x44
 8002456:	e005      	b.n	8002464 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a15      	ldr	r2, [pc, #84]	@ (80024b0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800245c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <HAL_SPI_TransmitReceive_IT+0x120>)
 8002462:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246e:	2b40      	cmp	r3, #64	@ 0x40
 8002470:	d007      	beq.n	8002482 <HAL_SPI_TransmitReceive_IT+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8002498:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800249a:	7dfb      	ldrb	r3, [r7, #23]
}
 800249c:	4618      	mov	r0, r3
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	080027c9 	.word	0x080027c9
 80024ac:	08002829 	.word	0x08002829
 80024b0:	08002705 	.word	0x08002705
 80024b4:	08002769 	.word	0x08002769

080024b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10e      	bne.n	80024f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d009      	beq.n	80024f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d004      	beq.n	80024f8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	4798      	blx	r3
    return;
 80024f6:	e0ce      	b.n	8002696 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_SPI_IRQHandler+0x5e>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4798      	blx	r3
    return;
 8002514:	e0bf      	b.n	8002696 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10a      	bne.n	8002536 <HAL_SPI_IRQHandler+0x7e>
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80b0 	beq.w	8002696 <HAL_SPI_IRQHandler+0x1de>
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80aa 	beq.w	8002696 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002548:	2b00      	cmp	r3, #0
 800254a:	d023      	beq.n	8002594 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b03      	cmp	r3, #3
 8002556:	d011      	beq.n	800257c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255c:	f043 0204 	orr.w	r2, r3, #4
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	e00b      	b.n	8002594 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]
        return;
 8002592:	e080      	b.n	8002696 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d014      	beq.n	80025c8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00c      	beq.n	80025ec <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d6:	f043 0208 	orr.w	r2, r3, #8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d04f      	beq.n	8002694 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002602:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d104      	bne.n	8002620 <HAL_SPI_IRQHandler+0x168>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d034      	beq.n	800268a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0203 	bic.w	r2, r2, #3
 800262e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d011      	beq.n	800265c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263c:	4a17      	ldr	r2, [pc, #92]	@ (800269c <HAL_SPI_IRQHandler+0x1e4>)
 800263e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fdb2 	bl	80011ae <HAL_DMA_Abort_IT>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002660:	2b00      	cmp	r3, #0
 8002662:	d016      	beq.n	8002692 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002668:	4a0c      	ldr	r2, [pc, #48]	@ (800269c <HAL_SPI_IRQHandler+0x1e4>)
 800266a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fd9c 	bl	80011ae <HAL_DMA_Abort_IT>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002680:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002688:	e003      	b.n	8002692 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f81c 	bl	80026c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002690:	e000      	b.n	8002694 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002692:	bf00      	nop
    return;
 8002694:	bf00      	nop
  }
}
 8002696:	3720      	adds	r7, #32
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	080026dd 	.word	0x080026dd

080026a0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7ff ffe6 	bl	80026c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f103 020c 	add.w	r2, r3, #12
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002718:	7812      	ldrb	r2, [r2, #0]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10f      	bne.n	8002760 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800274e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d102      	bne.n	8002760 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa1e 	bl	8002b9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	330c      	adds	r3, #12
 800277a:	7812      	ldrb	r2, [r2, #0]
 800277c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10f      	bne.n	80027c0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027ae:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f9ee 	bl	8002b9c <SPI_CloseRxTx_ISR>
    }
  }
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027da:	b292      	uxth	r2, r2
 80027dc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e2:	1c9a      	adds	r2, r3, #2
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10f      	bne.n	8002820 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800280e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f9be 	bl	8002b9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002834:	881a      	ldrh	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002840:	1c9a      	adds	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10f      	bne.n	800287e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800286c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f98f 	bl	8002b9c <SPI_CloseRxTx_ISR>
    }
  }
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f103 020c 	add.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289a:	7812      	ldrb	r2, [r2, #0]
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f9de 	bl	8002c84 <SPI_CloseRx_ISR>
  }
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e2:	b292      	uxth	r2, r2
 80028e4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f9bb 	bl	8002c84 <SPI_CloseRx_ISR>
  }
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	4613      	mov	r3, r2
 8002926:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002928:	f7fe fb00 	bl	8000f2c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	4413      	add	r3, r2
 8002936:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002938:	f7fe faf8 	bl	8000f2c <HAL_GetTick>
 800293c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800293e:	4b39      	ldr	r3, [pc, #228]	@ (8002a24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	015b      	lsls	r3, r3, #5
 8002944:	0d1b      	lsrs	r3, r3, #20
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800294e:	e054      	b.n	80029fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002956:	d050      	beq.n	80029fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002958:	f7fe fae8 	bl	8000f2c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	429a      	cmp	r2, r3
 8002966:	d902      	bls.n	800296e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d13d      	bne.n	80029ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800297c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002986:	d111      	bne.n	80029ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002990:	d004      	beq.n	800299c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299a:	d107      	bne.n	80029ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029b4:	d10f      	bne.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e017      	b.n	8002a1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4013      	ands	r3, r2
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	bf0c      	ite	eq
 8002a0a:	2301      	moveq	r3, #1
 8002a0c:	2300      	movne	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d19b      	bne.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000000 	.word	0x20000000

08002a28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a3c:	d111      	bne.n	8002a62 <SPI_EndRxTransaction+0x3a>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a46:	d004      	beq.n	8002a52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a50:	d107      	bne.n	8002a62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a6a:	d12a      	bne.n	8002ac2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a74:	d012      	beq.n	8002a9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2180      	movs	r1, #128	@ 0x80
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f7ff ff49 	bl	8002918 <SPI_WaitFlagStateUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d02d      	beq.n	8002ae8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e026      	b.n	8002aea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7ff ff36 	bl	8002918 <SPI_WaitFlagStateUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01a      	beq.n	8002ae8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab6:	f043 0220 	orr.w	r2, r3, #32
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e013      	b.n	8002aea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2101      	movs	r1, #1
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7ff ff23 	bl	8002918 <SPI_WaitFlagStateUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e000      	b.n	8002aea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2201      	movs	r2, #1
 8002b08:	2102      	movs	r1, #2
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f7ff ff04 	bl	8002918 <SPI_WaitFlagStateUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1a:	f043 0220 	orr.w	r2, r3, #32
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e032      	b.n	8002b8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b26:	4b1b      	ldr	r3, [pc, #108]	@ (8002b94 <SPI_EndRxTxTransaction+0xa0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002b98 <SPI_EndRxTxTransaction+0xa4>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	0d5b      	lsrs	r3, r3, #21
 8002b32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b44:	d112      	bne.n	8002b6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2180      	movs	r1, #128	@ 0x80
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f7ff fee1 	bl	8002918 <SPI_WaitFlagStateUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d016      	beq.n	8002b8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b60:	f043 0220 	orr.w	r2, r3, #32
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e00f      	b.n	8002b8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b82:	2b80      	cmp	r3, #128	@ 0x80
 8002b84:	d0f2      	beq.n	8002b6c <SPI_EndRxTxTransaction+0x78>
 8002b86:	e000      	b.n	8002b8a <SPI_EndRxTxTransaction+0x96>
        break;
 8002b88:	bf00      	nop
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000000 	.word	0x20000000
 8002b98:	165e9f81 	.word	0x165e9f81

08002b9c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002ba4:	4b35      	ldr	r3, [pc, #212]	@ (8002c7c <SPI_CloseRxTx_ISR+0xe0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a35      	ldr	r2, [pc, #212]	@ (8002c80 <SPI_CloseRxTx_ISR+0xe4>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0a5b      	lsrs	r3, r3, #9
 8002bb0:	2264      	movs	r2, #100	@ 0x64
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bb8:	f7fe f9b8 	bl	8000f2c <HAL_GetTick>
 8002bbc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0220 	bic.w	r2, r2, #32
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002be0:	e009      	b.n	8002bf6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0eb      	beq.n	8002bce <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	2164      	movs	r1, #100	@ 0x64
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ff7a 	bl	8002af4 <SPI_EndRxTxTransaction>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0a:	f043 0220 	orr.w	r2, r3, #32
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10a      	bne.n	8002c30 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d115      	bne.n	8002c64 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d107      	bne.n	8002c54 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fd27 	bl	80026a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002c52:	e00e      	b.n	8002c72 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff fd29 	bl	80026b4 <HAL_SPI_TxRxCpltCallback>
}
 8002c62:	e006      	b.n	8002c72 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff fd2b 	bl	80026c8 <HAL_SPI_ErrorCallback>
}
 8002c72:	bf00      	nop
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	057619f1 	.word	0x057619f1

08002c84 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c9a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002c9c:	f7fe f946 	bl	8000f2c <HAL_GetTick>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2164      	movs	r1, #100	@ 0x64
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff febe 	bl	8002a28 <SPI_EndRxTransaction>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10a      	bne.n	8002cdc <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d103      	bne.n	8002cf4 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff fcd7 	bl	80026a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002cf2:	e002      	b.n	8002cfa <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff fce7 	bl	80026c8 <HAL_SPI_ErrorCallback>
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e042      	b.n	8002d9a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d106      	bne.n	8002d2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7fd ff0b 	bl	8000b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2224      	movs	r2, #36	@ 0x24
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f972 	bl	8003030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b08a      	sub	sp, #40	@ 0x28
 8002da6:	af02      	add	r7, sp, #8
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d175      	bne.n	8002eae <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_UART_Transmit+0x2c>
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e06e      	b.n	8002eb0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2221      	movs	r2, #33	@ 0x21
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002de0:	f7fe f8a4 	bl	8000f2c <HAL_GetTick>
 8002de4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	88fa      	ldrh	r2, [r7, #6]
 8002dea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	88fa      	ldrh	r2, [r7, #6]
 8002df0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dfa:	d108      	bne.n	8002e0e <HAL_UART_Transmit+0x6c>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d104      	bne.n	8002e0e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	e003      	b.n	8002e16 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e16:	e02e      	b.n	8002e76 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2180      	movs	r1, #128	@ 0x80
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f848 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e03a      	b.n	8002eb0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10b      	bne.n	8002e58 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e4e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	3302      	adds	r3, #2
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e007      	b.n	8002e68 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3301      	adds	r3, #1
 8002e66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1cb      	bne.n	8002e18 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2200      	movs	r2, #0
 8002e88:	2140      	movs	r1, #64	@ 0x40
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f814 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e006      	b.n	8002eb0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec8:	e03b      	b.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d037      	beq.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7fe f82b 	bl	8000f2c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	6a3a      	ldr	r2, [r7, #32]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e03a      	b.n	8002f62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d023      	beq.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b80      	cmp	r3, #128	@ 0x80
 8002efe:	d020      	beq.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b40      	cmp	r3, #64	@ 0x40
 8002f04:	d01d      	beq.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d116      	bne.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f81d 	bl	8002f6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2208      	movs	r2, #8
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00f      	b.n	8002f62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	bf0c      	ite	eq
 8002f52:	2301      	moveq	r3, #1
 8002f54:	2300      	movne	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d0b4      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b095      	sub	sp, #84	@ 0x54
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	330c      	adds	r3, #12
 8002f78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	330c      	adds	r3, #12
 8002f90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f92:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f9a:	e841 2300 	strex	r3, r2, [r1]
 8002f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e5      	bne.n	8002f72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3314      	adds	r3, #20
 8002fac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	e853 3f00 	ldrex	r3, [r3]
 8002fb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f023 0301 	bic.w	r3, r3, #1
 8002fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3314      	adds	r3, #20
 8002fc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fce:	e841 2300 	strex	r3, r2, [r1]
 8002fd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e5      	bne.n	8002fa6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d119      	bne.n	8003016 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	e853 3f00 	ldrex	r3, [r3]
 8002ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f023 0310 	bic.w	r3, r3, #16
 8002ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	330c      	adds	r3, #12
 8003000:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003002:	61ba      	str	r2, [r7, #24]
 8003004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003006:	6979      	ldr	r1, [r7, #20]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	e841 2300 	strex	r3, r2, [r1]
 800300e:	613b      	str	r3, [r7, #16]
   return(result);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1e5      	bne.n	8002fe2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003024:	bf00      	nop
 8003026:	3754      	adds	r7, #84	@ 0x54
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003034:	b0c0      	sub	sp, #256	@ 0x100
 8003036:	af00      	add	r7, sp, #0
 8003038:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304c:	68d9      	ldr	r1, [r3, #12]
 800304e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	ea40 0301 	orr.w	r3, r0, r1
 8003058:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	431a      	orrs	r2, r3
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	431a      	orrs	r2, r3
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003088:	f021 010c 	bic.w	r1, r1, #12
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003096:	430b      	orrs	r3, r1
 8003098:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800309a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030aa:	6999      	ldr	r1, [r3, #24]
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	ea40 0301 	orr.w	r3, r0, r1
 80030b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4b8f      	ldr	r3, [pc, #572]	@ (80032fc <UART_SetConfig+0x2cc>)
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d005      	beq.n	80030d0 <UART_SetConfig+0xa0>
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003300 <UART_SetConfig+0x2d0>)
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d104      	bne.n	80030da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030d0:	f7fe fee4 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 80030d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80030d8:	e003      	b.n	80030e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030da:	f7fe fecb 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 80030de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ec:	f040 810c 	bne.w	8003308 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030f4:	2200      	movs	r2, #0
 80030f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003102:	4622      	mov	r2, r4
 8003104:	462b      	mov	r3, r5
 8003106:	1891      	adds	r1, r2, r2
 8003108:	65b9      	str	r1, [r7, #88]	@ 0x58
 800310a:	415b      	adcs	r3, r3
 800310c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800310e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003112:	4621      	mov	r1, r4
 8003114:	eb12 0801 	adds.w	r8, r2, r1
 8003118:	4629      	mov	r1, r5
 800311a:	eb43 0901 	adc.w	r9, r3, r1
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800312a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800312e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003132:	4690      	mov	r8, r2
 8003134:	4699      	mov	r9, r3
 8003136:	4623      	mov	r3, r4
 8003138:	eb18 0303 	adds.w	r3, r8, r3
 800313c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003140:	462b      	mov	r3, r5
 8003142:	eb49 0303 	adc.w	r3, r9, r3
 8003146:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800314a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003156:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800315a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800315e:	460b      	mov	r3, r1
 8003160:	18db      	adds	r3, r3, r3
 8003162:	653b      	str	r3, [r7, #80]	@ 0x50
 8003164:	4613      	mov	r3, r2
 8003166:	eb42 0303 	adc.w	r3, r2, r3
 800316a:	657b      	str	r3, [r7, #84]	@ 0x54
 800316c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003170:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003174:	f7fd f88c 	bl	8000290 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4b61      	ldr	r3, [pc, #388]	@ (8003304 <UART_SetConfig+0x2d4>)
 800317e:	fba3 2302 	umull	r2, r3, r3, r2
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	011c      	lsls	r4, r3, #4
 8003186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800318a:	2200      	movs	r2, #0
 800318c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003190:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003194:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003198:	4642      	mov	r2, r8
 800319a:	464b      	mov	r3, r9
 800319c:	1891      	adds	r1, r2, r2
 800319e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80031a0:	415b      	adcs	r3, r3
 80031a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031a8:	4641      	mov	r1, r8
 80031aa:	eb12 0a01 	adds.w	sl, r2, r1
 80031ae:	4649      	mov	r1, r9
 80031b0:	eb43 0b01 	adc.w	fp, r3, r1
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c8:	4692      	mov	sl, r2
 80031ca:	469b      	mov	fp, r3
 80031cc:	4643      	mov	r3, r8
 80031ce:	eb1a 0303 	adds.w	r3, sl, r3
 80031d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031d6:	464b      	mov	r3, r9
 80031d8:	eb4b 0303 	adc.w	r3, fp, r3
 80031dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031f4:	460b      	mov	r3, r1
 80031f6:	18db      	adds	r3, r3, r3
 80031f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80031fa:	4613      	mov	r3, r2
 80031fc:	eb42 0303 	adc.w	r3, r2, r3
 8003200:	647b      	str	r3, [r7, #68]	@ 0x44
 8003202:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003206:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800320a:	f7fd f841 	bl	8000290 <__aeabi_uldivmod>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4611      	mov	r1, r2
 8003214:	4b3b      	ldr	r3, [pc, #236]	@ (8003304 <UART_SetConfig+0x2d4>)
 8003216:	fba3 2301 	umull	r2, r3, r3, r1
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2264      	movs	r2, #100	@ 0x64
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	1acb      	subs	r3, r1, r3
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800322a:	4b36      	ldr	r3, [pc, #216]	@ (8003304 <UART_SetConfig+0x2d4>)
 800322c:	fba3 2302 	umull	r2, r3, r3, r2
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003238:	441c      	add	r4, r3
 800323a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800323e:	2200      	movs	r2, #0
 8003240:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003244:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003248:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800324c:	4642      	mov	r2, r8
 800324e:	464b      	mov	r3, r9
 8003250:	1891      	adds	r1, r2, r2
 8003252:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003254:	415b      	adcs	r3, r3
 8003256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003258:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800325c:	4641      	mov	r1, r8
 800325e:	1851      	adds	r1, r2, r1
 8003260:	6339      	str	r1, [r7, #48]	@ 0x30
 8003262:	4649      	mov	r1, r9
 8003264:	414b      	adcs	r3, r1
 8003266:	637b      	str	r3, [r7, #52]	@ 0x34
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003274:	4659      	mov	r1, fp
 8003276:	00cb      	lsls	r3, r1, #3
 8003278:	4651      	mov	r1, sl
 800327a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800327e:	4651      	mov	r1, sl
 8003280:	00ca      	lsls	r2, r1, #3
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	4603      	mov	r3, r0
 8003288:	4642      	mov	r2, r8
 800328a:	189b      	adds	r3, r3, r2
 800328c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003290:	464b      	mov	r3, r9
 8003292:	460a      	mov	r2, r1
 8003294:	eb42 0303 	adc.w	r3, r2, r3
 8003298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80032ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032b0:	460b      	mov	r3, r1
 80032b2:	18db      	adds	r3, r3, r3
 80032b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032b6:	4613      	mov	r3, r2
 80032b8:	eb42 0303 	adc.w	r3, r2, r3
 80032bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80032c6:	f7fc ffe3 	bl	8000290 <__aeabi_uldivmod>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003304 <UART_SetConfig+0x2d4>)
 80032d0:	fba3 1302 	umull	r1, r3, r3, r2
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	2164      	movs	r1, #100	@ 0x64
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	3332      	adds	r3, #50	@ 0x32
 80032e2:	4a08      	ldr	r2, [pc, #32]	@ (8003304 <UART_SetConfig+0x2d4>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	f003 0207 	and.w	r2, r3, #7
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4422      	add	r2, r4
 80032f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032f8:	e106      	b.n	8003508 <UART_SetConfig+0x4d8>
 80032fa:	bf00      	nop
 80032fc:	40011000 	.word	0x40011000
 8003300:	40011400 	.word	0x40011400
 8003304:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800330c:	2200      	movs	r2, #0
 800330e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003312:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003316:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800331a:	4642      	mov	r2, r8
 800331c:	464b      	mov	r3, r9
 800331e:	1891      	adds	r1, r2, r2
 8003320:	6239      	str	r1, [r7, #32]
 8003322:	415b      	adcs	r3, r3
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
 8003326:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800332a:	4641      	mov	r1, r8
 800332c:	1854      	adds	r4, r2, r1
 800332e:	4649      	mov	r1, r9
 8003330:	eb43 0501 	adc.w	r5, r3, r1
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	00eb      	lsls	r3, r5, #3
 800333e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003342:	00e2      	lsls	r2, r4, #3
 8003344:	4614      	mov	r4, r2
 8003346:	461d      	mov	r5, r3
 8003348:	4643      	mov	r3, r8
 800334a:	18e3      	adds	r3, r4, r3
 800334c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003350:	464b      	mov	r3, r9
 8003352:	eb45 0303 	adc.w	r3, r5, r3
 8003356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800335a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003366:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003376:	4629      	mov	r1, r5
 8003378:	008b      	lsls	r3, r1, #2
 800337a:	4621      	mov	r1, r4
 800337c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003380:	4621      	mov	r1, r4
 8003382:	008a      	lsls	r2, r1, #2
 8003384:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003388:	f7fc ff82 	bl	8000290 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4b60      	ldr	r3, [pc, #384]	@ (8003514 <UART_SetConfig+0x4e4>)
 8003392:	fba3 2302 	umull	r2, r3, r3, r2
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	011c      	lsls	r4, r3, #4
 800339a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80033ac:	4642      	mov	r2, r8
 80033ae:	464b      	mov	r3, r9
 80033b0:	1891      	adds	r1, r2, r2
 80033b2:	61b9      	str	r1, [r7, #24]
 80033b4:	415b      	adcs	r3, r3
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033bc:	4641      	mov	r1, r8
 80033be:	1851      	adds	r1, r2, r1
 80033c0:	6139      	str	r1, [r7, #16]
 80033c2:	4649      	mov	r1, r9
 80033c4:	414b      	adcs	r3, r1
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033d4:	4659      	mov	r1, fp
 80033d6:	00cb      	lsls	r3, r1, #3
 80033d8:	4651      	mov	r1, sl
 80033da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033de:	4651      	mov	r1, sl
 80033e0:	00ca      	lsls	r2, r1, #3
 80033e2:	4610      	mov	r0, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	4603      	mov	r3, r0
 80033e8:	4642      	mov	r2, r8
 80033ea:	189b      	adds	r3, r3, r2
 80033ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033f0:	464b      	mov	r3, r9
 80033f2:	460a      	mov	r2, r1
 80033f4:	eb42 0303 	adc.w	r3, r2, r3
 80033f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003406:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003414:	4649      	mov	r1, r9
 8003416:	008b      	lsls	r3, r1, #2
 8003418:	4641      	mov	r1, r8
 800341a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800341e:	4641      	mov	r1, r8
 8003420:	008a      	lsls	r2, r1, #2
 8003422:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003426:	f7fc ff33 	bl	8000290 <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4611      	mov	r1, r2
 8003430:	4b38      	ldr	r3, [pc, #224]	@ (8003514 <UART_SetConfig+0x4e4>)
 8003432:	fba3 2301 	umull	r2, r3, r3, r1
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2264      	movs	r2, #100	@ 0x64
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	1acb      	subs	r3, r1, r3
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	3332      	adds	r3, #50	@ 0x32
 8003444:	4a33      	ldr	r2, [pc, #204]	@ (8003514 <UART_SetConfig+0x4e4>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003450:	441c      	add	r4, r3
 8003452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003456:	2200      	movs	r2, #0
 8003458:	673b      	str	r3, [r7, #112]	@ 0x70
 800345a:	677a      	str	r2, [r7, #116]	@ 0x74
 800345c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003460:	4642      	mov	r2, r8
 8003462:	464b      	mov	r3, r9
 8003464:	1891      	adds	r1, r2, r2
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	415b      	adcs	r3, r3
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003470:	4641      	mov	r1, r8
 8003472:	1851      	adds	r1, r2, r1
 8003474:	6039      	str	r1, [r7, #0]
 8003476:	4649      	mov	r1, r9
 8003478:	414b      	adcs	r3, r1
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003488:	4659      	mov	r1, fp
 800348a:	00cb      	lsls	r3, r1, #3
 800348c:	4651      	mov	r1, sl
 800348e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003492:	4651      	mov	r1, sl
 8003494:	00ca      	lsls	r2, r1, #3
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	4603      	mov	r3, r0
 800349c:	4642      	mov	r2, r8
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034a2:	464b      	mov	r3, r9
 80034a4:	460a      	mov	r2, r1
 80034a6:	eb42 0303 	adc.w	r3, r2, r3
 80034aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80034b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80034c4:	4649      	mov	r1, r9
 80034c6:	008b      	lsls	r3, r1, #2
 80034c8:	4641      	mov	r1, r8
 80034ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ce:	4641      	mov	r1, r8
 80034d0:	008a      	lsls	r2, r1, #2
 80034d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80034d6:	f7fc fedb 	bl	8000290 <__aeabi_uldivmod>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4b0d      	ldr	r3, [pc, #52]	@ (8003514 <UART_SetConfig+0x4e4>)
 80034e0:	fba3 1302 	umull	r1, r3, r3, r2
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	2164      	movs	r1, #100	@ 0x64
 80034e8:	fb01 f303 	mul.w	r3, r1, r3
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	3332      	adds	r3, #50	@ 0x32
 80034f2:	4a08      	ldr	r2, [pc, #32]	@ (8003514 <UART_SetConfig+0x4e4>)
 80034f4:	fba2 2303 	umull	r2, r3, r2, r3
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	f003 020f 	and.w	r2, r3, #15
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4422      	add	r2, r4
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	bf00      	nop
 800350a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800350e:	46bd      	mov	sp, r7
 8003510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003514:	51eb851f 	.word	0x51eb851f

08003518 <rand>:
 8003518:	4b16      	ldr	r3, [pc, #88]	@ (8003574 <rand+0x5c>)
 800351a:	b510      	push	{r4, lr}
 800351c:	681c      	ldr	r4, [r3, #0]
 800351e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003520:	b9b3      	cbnz	r3, 8003550 <rand+0x38>
 8003522:	2018      	movs	r0, #24
 8003524:	f000 fa40 	bl	80039a8 <malloc>
 8003528:	4602      	mov	r2, r0
 800352a:	6320      	str	r0, [r4, #48]	@ 0x30
 800352c:	b920      	cbnz	r0, 8003538 <rand+0x20>
 800352e:	4b12      	ldr	r3, [pc, #72]	@ (8003578 <rand+0x60>)
 8003530:	4812      	ldr	r0, [pc, #72]	@ (800357c <rand+0x64>)
 8003532:	2152      	movs	r1, #82	@ 0x52
 8003534:	f000 f9d0 	bl	80038d8 <__assert_func>
 8003538:	4911      	ldr	r1, [pc, #68]	@ (8003580 <rand+0x68>)
 800353a:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <rand+0x6c>)
 800353c:	e9c0 1300 	strd	r1, r3, [r0]
 8003540:	4b11      	ldr	r3, [pc, #68]	@ (8003588 <rand+0x70>)
 8003542:	6083      	str	r3, [r0, #8]
 8003544:	230b      	movs	r3, #11
 8003546:	8183      	strh	r3, [r0, #12]
 8003548:	2100      	movs	r1, #0
 800354a:	2001      	movs	r0, #1
 800354c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003550:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003552:	480e      	ldr	r0, [pc, #56]	@ (800358c <rand+0x74>)
 8003554:	690b      	ldr	r3, [r1, #16]
 8003556:	694c      	ldr	r4, [r1, #20]
 8003558:	4a0d      	ldr	r2, [pc, #52]	@ (8003590 <rand+0x78>)
 800355a:	4358      	muls	r0, r3
 800355c:	fb02 0004 	mla	r0, r2, r4, r0
 8003560:	fba3 3202 	umull	r3, r2, r3, r2
 8003564:	3301      	adds	r3, #1
 8003566:	eb40 0002 	adc.w	r0, r0, r2
 800356a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800356e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003572:	bd10      	pop	{r4, pc}
 8003574:	20000018 	.word	0x20000018
 8003578:	08004904 	.word	0x08004904
 800357c:	0800491b 	.word	0x0800491b
 8003580:	abcd330e 	.word	0xabcd330e
 8003584:	e66d1234 	.word	0xe66d1234
 8003588:	0005deec 	.word	0x0005deec
 800358c:	5851f42d 	.word	0x5851f42d
 8003590:	4c957f2d 	.word	0x4c957f2d

08003594 <std>:
 8003594:	2300      	movs	r3, #0
 8003596:	b510      	push	{r4, lr}
 8003598:	4604      	mov	r4, r0
 800359a:	e9c0 3300 	strd	r3, r3, [r0]
 800359e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035a2:	6083      	str	r3, [r0, #8]
 80035a4:	8181      	strh	r1, [r0, #12]
 80035a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80035a8:	81c2      	strh	r2, [r0, #14]
 80035aa:	6183      	str	r3, [r0, #24]
 80035ac:	4619      	mov	r1, r3
 80035ae:	2208      	movs	r2, #8
 80035b0:	305c      	adds	r0, #92	@ 0x5c
 80035b2:	f000 f914 	bl	80037de <memset>
 80035b6:	4b0d      	ldr	r3, [pc, #52]	@ (80035ec <std+0x58>)
 80035b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80035ba:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <std+0x5c>)
 80035bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80035be:	4b0d      	ldr	r3, [pc, #52]	@ (80035f4 <std+0x60>)
 80035c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80035c2:	4b0d      	ldr	r3, [pc, #52]	@ (80035f8 <std+0x64>)
 80035c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80035c6:	4b0d      	ldr	r3, [pc, #52]	@ (80035fc <std+0x68>)
 80035c8:	6224      	str	r4, [r4, #32]
 80035ca:	429c      	cmp	r4, r3
 80035cc:	d006      	beq.n	80035dc <std+0x48>
 80035ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80035d2:	4294      	cmp	r4, r2
 80035d4:	d002      	beq.n	80035dc <std+0x48>
 80035d6:	33d0      	adds	r3, #208	@ 0xd0
 80035d8:	429c      	cmp	r4, r3
 80035da:	d105      	bne.n	80035e8 <std+0x54>
 80035dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80035e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e4:	f000 b974 	b.w	80038d0 <__retarget_lock_init_recursive>
 80035e8:	bd10      	pop	{r4, pc}
 80035ea:	bf00      	nop
 80035ec:	08003759 	.word	0x08003759
 80035f0:	0800377b 	.word	0x0800377b
 80035f4:	080037b3 	.word	0x080037b3
 80035f8:	080037d7 	.word	0x080037d7
 80035fc:	20000188 	.word	0x20000188

08003600 <stdio_exit_handler>:
 8003600:	4a02      	ldr	r2, [pc, #8]	@ (800360c <stdio_exit_handler+0xc>)
 8003602:	4903      	ldr	r1, [pc, #12]	@ (8003610 <stdio_exit_handler+0x10>)
 8003604:	4803      	ldr	r0, [pc, #12]	@ (8003614 <stdio_exit_handler+0x14>)
 8003606:	f000 b869 	b.w	80036dc <_fwalk_sglue>
 800360a:	bf00      	nop
 800360c:	2000000c 	.word	0x2000000c
 8003610:	080041e9 	.word	0x080041e9
 8003614:	2000001c 	.word	0x2000001c

08003618 <cleanup_stdio>:
 8003618:	6841      	ldr	r1, [r0, #4]
 800361a:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <cleanup_stdio+0x34>)
 800361c:	4299      	cmp	r1, r3
 800361e:	b510      	push	{r4, lr}
 8003620:	4604      	mov	r4, r0
 8003622:	d001      	beq.n	8003628 <cleanup_stdio+0x10>
 8003624:	f000 fde0 	bl	80041e8 <_fflush_r>
 8003628:	68a1      	ldr	r1, [r4, #8]
 800362a:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <cleanup_stdio+0x38>)
 800362c:	4299      	cmp	r1, r3
 800362e:	d002      	beq.n	8003636 <cleanup_stdio+0x1e>
 8003630:	4620      	mov	r0, r4
 8003632:	f000 fdd9 	bl	80041e8 <_fflush_r>
 8003636:	68e1      	ldr	r1, [r4, #12]
 8003638:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <cleanup_stdio+0x3c>)
 800363a:	4299      	cmp	r1, r3
 800363c:	d004      	beq.n	8003648 <cleanup_stdio+0x30>
 800363e:	4620      	mov	r0, r4
 8003640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003644:	f000 bdd0 	b.w	80041e8 <_fflush_r>
 8003648:	bd10      	pop	{r4, pc}
 800364a:	bf00      	nop
 800364c:	20000188 	.word	0x20000188
 8003650:	200001f0 	.word	0x200001f0
 8003654:	20000258 	.word	0x20000258

08003658 <global_stdio_init.part.0>:
 8003658:	b510      	push	{r4, lr}
 800365a:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <global_stdio_init.part.0+0x30>)
 800365c:	4c0b      	ldr	r4, [pc, #44]	@ (800368c <global_stdio_init.part.0+0x34>)
 800365e:	4a0c      	ldr	r2, [pc, #48]	@ (8003690 <global_stdio_init.part.0+0x38>)
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	4620      	mov	r0, r4
 8003664:	2200      	movs	r2, #0
 8003666:	2104      	movs	r1, #4
 8003668:	f7ff ff94 	bl	8003594 <std>
 800366c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003670:	2201      	movs	r2, #1
 8003672:	2109      	movs	r1, #9
 8003674:	f7ff ff8e 	bl	8003594 <std>
 8003678:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800367c:	2202      	movs	r2, #2
 800367e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003682:	2112      	movs	r1, #18
 8003684:	f7ff bf86 	b.w	8003594 <std>
 8003688:	200002c0 	.word	0x200002c0
 800368c:	20000188 	.word	0x20000188
 8003690:	08003601 	.word	0x08003601

08003694 <__sfp_lock_acquire>:
 8003694:	4801      	ldr	r0, [pc, #4]	@ (800369c <__sfp_lock_acquire+0x8>)
 8003696:	f000 b91c 	b.w	80038d2 <__retarget_lock_acquire_recursive>
 800369a:	bf00      	nop
 800369c:	200002c9 	.word	0x200002c9

080036a0 <__sfp_lock_release>:
 80036a0:	4801      	ldr	r0, [pc, #4]	@ (80036a8 <__sfp_lock_release+0x8>)
 80036a2:	f000 b917 	b.w	80038d4 <__retarget_lock_release_recursive>
 80036a6:	bf00      	nop
 80036a8:	200002c9 	.word	0x200002c9

080036ac <__sinit>:
 80036ac:	b510      	push	{r4, lr}
 80036ae:	4604      	mov	r4, r0
 80036b0:	f7ff fff0 	bl	8003694 <__sfp_lock_acquire>
 80036b4:	6a23      	ldr	r3, [r4, #32]
 80036b6:	b11b      	cbz	r3, 80036c0 <__sinit+0x14>
 80036b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036bc:	f7ff bff0 	b.w	80036a0 <__sfp_lock_release>
 80036c0:	4b04      	ldr	r3, [pc, #16]	@ (80036d4 <__sinit+0x28>)
 80036c2:	6223      	str	r3, [r4, #32]
 80036c4:	4b04      	ldr	r3, [pc, #16]	@ (80036d8 <__sinit+0x2c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f5      	bne.n	80036b8 <__sinit+0xc>
 80036cc:	f7ff ffc4 	bl	8003658 <global_stdio_init.part.0>
 80036d0:	e7f2      	b.n	80036b8 <__sinit+0xc>
 80036d2:	bf00      	nop
 80036d4:	08003619 	.word	0x08003619
 80036d8:	200002c0 	.word	0x200002c0

080036dc <_fwalk_sglue>:
 80036dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036e0:	4607      	mov	r7, r0
 80036e2:	4688      	mov	r8, r1
 80036e4:	4614      	mov	r4, r2
 80036e6:	2600      	movs	r6, #0
 80036e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036ec:	f1b9 0901 	subs.w	r9, r9, #1
 80036f0:	d505      	bpl.n	80036fe <_fwalk_sglue+0x22>
 80036f2:	6824      	ldr	r4, [r4, #0]
 80036f4:	2c00      	cmp	r4, #0
 80036f6:	d1f7      	bne.n	80036e8 <_fwalk_sglue+0xc>
 80036f8:	4630      	mov	r0, r6
 80036fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036fe:	89ab      	ldrh	r3, [r5, #12]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d907      	bls.n	8003714 <_fwalk_sglue+0x38>
 8003704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003708:	3301      	adds	r3, #1
 800370a:	d003      	beq.n	8003714 <_fwalk_sglue+0x38>
 800370c:	4629      	mov	r1, r5
 800370e:	4638      	mov	r0, r7
 8003710:	47c0      	blx	r8
 8003712:	4306      	orrs	r6, r0
 8003714:	3568      	adds	r5, #104	@ 0x68
 8003716:	e7e9      	b.n	80036ec <_fwalk_sglue+0x10>

08003718 <siprintf>:
 8003718:	b40e      	push	{r1, r2, r3}
 800371a:	b500      	push	{lr}
 800371c:	b09c      	sub	sp, #112	@ 0x70
 800371e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003720:	9002      	str	r0, [sp, #8]
 8003722:	9006      	str	r0, [sp, #24]
 8003724:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003728:	4809      	ldr	r0, [pc, #36]	@ (8003750 <siprintf+0x38>)
 800372a:	9107      	str	r1, [sp, #28]
 800372c:	9104      	str	r1, [sp, #16]
 800372e:	4909      	ldr	r1, [pc, #36]	@ (8003754 <siprintf+0x3c>)
 8003730:	f853 2b04 	ldr.w	r2, [r3], #4
 8003734:	9105      	str	r1, [sp, #20]
 8003736:	6800      	ldr	r0, [r0, #0]
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	a902      	add	r1, sp, #8
 800373c:	f000 fa46 	bl	8003bcc <_svfiprintf_r>
 8003740:	9b02      	ldr	r3, [sp, #8]
 8003742:	2200      	movs	r2, #0
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	b01c      	add	sp, #112	@ 0x70
 8003748:	f85d eb04 	ldr.w	lr, [sp], #4
 800374c:	b003      	add	sp, #12
 800374e:	4770      	bx	lr
 8003750:	20000018 	.word	0x20000018
 8003754:	ffff0208 	.word	0xffff0208

08003758 <__sread>:
 8003758:	b510      	push	{r4, lr}
 800375a:	460c      	mov	r4, r1
 800375c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003760:	f000 f868 	bl	8003834 <_read_r>
 8003764:	2800      	cmp	r0, #0
 8003766:	bfab      	itete	ge
 8003768:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800376a:	89a3      	ldrhlt	r3, [r4, #12]
 800376c:	181b      	addge	r3, r3, r0
 800376e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003772:	bfac      	ite	ge
 8003774:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003776:	81a3      	strhlt	r3, [r4, #12]
 8003778:	bd10      	pop	{r4, pc}

0800377a <__swrite>:
 800377a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800377e:	461f      	mov	r7, r3
 8003780:	898b      	ldrh	r3, [r1, #12]
 8003782:	05db      	lsls	r3, r3, #23
 8003784:	4605      	mov	r5, r0
 8003786:	460c      	mov	r4, r1
 8003788:	4616      	mov	r6, r2
 800378a:	d505      	bpl.n	8003798 <__swrite+0x1e>
 800378c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003790:	2302      	movs	r3, #2
 8003792:	2200      	movs	r2, #0
 8003794:	f000 f83c 	bl	8003810 <_lseek_r>
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800379e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037a2:	81a3      	strh	r3, [r4, #12]
 80037a4:	4632      	mov	r2, r6
 80037a6:	463b      	mov	r3, r7
 80037a8:	4628      	mov	r0, r5
 80037aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ae:	f000 b853 	b.w	8003858 <_write_r>

080037b2 <__sseek>:
 80037b2:	b510      	push	{r4, lr}
 80037b4:	460c      	mov	r4, r1
 80037b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ba:	f000 f829 	bl	8003810 <_lseek_r>
 80037be:	1c43      	adds	r3, r0, #1
 80037c0:	89a3      	ldrh	r3, [r4, #12]
 80037c2:	bf15      	itete	ne
 80037c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037ce:	81a3      	strheq	r3, [r4, #12]
 80037d0:	bf18      	it	ne
 80037d2:	81a3      	strhne	r3, [r4, #12]
 80037d4:	bd10      	pop	{r4, pc}

080037d6 <__sclose>:
 80037d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037da:	f000 b809 	b.w	80037f0 <_close_r>

080037de <memset>:
 80037de:	4402      	add	r2, r0
 80037e0:	4603      	mov	r3, r0
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d100      	bne.n	80037e8 <memset+0xa>
 80037e6:	4770      	bx	lr
 80037e8:	f803 1b01 	strb.w	r1, [r3], #1
 80037ec:	e7f9      	b.n	80037e2 <memset+0x4>
	...

080037f0 <_close_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	4d06      	ldr	r5, [pc, #24]	@ (800380c <_close_r+0x1c>)
 80037f4:	2300      	movs	r3, #0
 80037f6:	4604      	mov	r4, r0
 80037f8:	4608      	mov	r0, r1
 80037fa:	602b      	str	r3, [r5, #0]
 80037fc:	f7fd fa8a 	bl	8000d14 <_close>
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	d102      	bne.n	800380a <_close_r+0x1a>
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	b103      	cbz	r3, 800380a <_close_r+0x1a>
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	bd38      	pop	{r3, r4, r5, pc}
 800380c:	200002c4 	.word	0x200002c4

08003810 <_lseek_r>:
 8003810:	b538      	push	{r3, r4, r5, lr}
 8003812:	4d07      	ldr	r5, [pc, #28]	@ (8003830 <_lseek_r+0x20>)
 8003814:	4604      	mov	r4, r0
 8003816:	4608      	mov	r0, r1
 8003818:	4611      	mov	r1, r2
 800381a:	2200      	movs	r2, #0
 800381c:	602a      	str	r2, [r5, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	f7fd fa9f 	bl	8000d62 <_lseek>
 8003824:	1c43      	adds	r3, r0, #1
 8003826:	d102      	bne.n	800382e <_lseek_r+0x1e>
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	b103      	cbz	r3, 800382e <_lseek_r+0x1e>
 800382c:	6023      	str	r3, [r4, #0]
 800382e:	bd38      	pop	{r3, r4, r5, pc}
 8003830:	200002c4 	.word	0x200002c4

08003834 <_read_r>:
 8003834:	b538      	push	{r3, r4, r5, lr}
 8003836:	4d07      	ldr	r5, [pc, #28]	@ (8003854 <_read_r+0x20>)
 8003838:	4604      	mov	r4, r0
 800383a:	4608      	mov	r0, r1
 800383c:	4611      	mov	r1, r2
 800383e:	2200      	movs	r2, #0
 8003840:	602a      	str	r2, [r5, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	f7fd fa2d 	bl	8000ca2 <_read>
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	d102      	bne.n	8003852 <_read_r+0x1e>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	b103      	cbz	r3, 8003852 <_read_r+0x1e>
 8003850:	6023      	str	r3, [r4, #0]
 8003852:	bd38      	pop	{r3, r4, r5, pc}
 8003854:	200002c4 	.word	0x200002c4

08003858 <_write_r>:
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	4d07      	ldr	r5, [pc, #28]	@ (8003878 <_write_r+0x20>)
 800385c:	4604      	mov	r4, r0
 800385e:	4608      	mov	r0, r1
 8003860:	4611      	mov	r1, r2
 8003862:	2200      	movs	r2, #0
 8003864:	602a      	str	r2, [r5, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	f7fd fa38 	bl	8000cdc <_write>
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	d102      	bne.n	8003876 <_write_r+0x1e>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	b103      	cbz	r3, 8003876 <_write_r+0x1e>
 8003874:	6023      	str	r3, [r4, #0]
 8003876:	bd38      	pop	{r3, r4, r5, pc}
 8003878:	200002c4 	.word	0x200002c4

0800387c <__errno>:
 800387c:	4b01      	ldr	r3, [pc, #4]	@ (8003884 <__errno+0x8>)
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000018 	.word	0x20000018

08003888 <__libc_init_array>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	4d0d      	ldr	r5, [pc, #52]	@ (80038c0 <__libc_init_array+0x38>)
 800388c:	4c0d      	ldr	r4, [pc, #52]	@ (80038c4 <__libc_init_array+0x3c>)
 800388e:	1b64      	subs	r4, r4, r5
 8003890:	10a4      	asrs	r4, r4, #2
 8003892:	2600      	movs	r6, #0
 8003894:	42a6      	cmp	r6, r4
 8003896:	d109      	bne.n	80038ac <__libc_init_array+0x24>
 8003898:	4d0b      	ldr	r5, [pc, #44]	@ (80038c8 <__libc_init_array+0x40>)
 800389a:	4c0c      	ldr	r4, [pc, #48]	@ (80038cc <__libc_init_array+0x44>)
 800389c:	f000 fff0 	bl	8004880 <_init>
 80038a0:	1b64      	subs	r4, r4, r5
 80038a2:	10a4      	asrs	r4, r4, #2
 80038a4:	2600      	movs	r6, #0
 80038a6:	42a6      	cmp	r6, r4
 80038a8:	d105      	bne.n	80038b6 <__libc_init_array+0x2e>
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
 80038ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b0:	4798      	blx	r3
 80038b2:	3601      	adds	r6, #1
 80038b4:	e7ee      	b.n	8003894 <__libc_init_array+0xc>
 80038b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ba:	4798      	blx	r3
 80038bc:	3601      	adds	r6, #1
 80038be:	e7f2      	b.n	80038a6 <__libc_init_array+0x1e>
 80038c0:	080049ec 	.word	0x080049ec
 80038c4:	080049ec 	.word	0x080049ec
 80038c8:	080049ec 	.word	0x080049ec
 80038cc:	080049f0 	.word	0x080049f0

080038d0 <__retarget_lock_init_recursive>:
 80038d0:	4770      	bx	lr

080038d2 <__retarget_lock_acquire_recursive>:
 80038d2:	4770      	bx	lr

080038d4 <__retarget_lock_release_recursive>:
 80038d4:	4770      	bx	lr
	...

080038d8 <__assert_func>:
 80038d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80038da:	4614      	mov	r4, r2
 80038dc:	461a      	mov	r2, r3
 80038de:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <__assert_func+0x2c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4605      	mov	r5, r0
 80038e4:	68d8      	ldr	r0, [r3, #12]
 80038e6:	b954      	cbnz	r4, 80038fe <__assert_func+0x26>
 80038e8:	4b07      	ldr	r3, [pc, #28]	@ (8003908 <__assert_func+0x30>)
 80038ea:	461c      	mov	r4, r3
 80038ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80038f0:	9100      	str	r1, [sp, #0]
 80038f2:	462b      	mov	r3, r5
 80038f4:	4905      	ldr	r1, [pc, #20]	@ (800390c <__assert_func+0x34>)
 80038f6:	f000 fc9f 	bl	8004238 <fiprintf>
 80038fa:	f000 fce7 	bl	80042cc <abort>
 80038fe:	4b04      	ldr	r3, [pc, #16]	@ (8003910 <__assert_func+0x38>)
 8003900:	e7f4      	b.n	80038ec <__assert_func+0x14>
 8003902:	bf00      	nop
 8003904:	20000018 	.word	0x20000018
 8003908:	080049ae 	.word	0x080049ae
 800390c:	08004980 	.word	0x08004980
 8003910:	08004973 	.word	0x08004973

08003914 <_free_r>:
 8003914:	b538      	push	{r3, r4, r5, lr}
 8003916:	4605      	mov	r5, r0
 8003918:	2900      	cmp	r1, #0
 800391a:	d041      	beq.n	80039a0 <_free_r+0x8c>
 800391c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003920:	1f0c      	subs	r4, r1, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	bfb8      	it	lt
 8003926:	18e4      	addlt	r4, r4, r3
 8003928:	f000 f8e8 	bl	8003afc <__malloc_lock>
 800392c:	4a1d      	ldr	r2, [pc, #116]	@ (80039a4 <_free_r+0x90>)
 800392e:	6813      	ldr	r3, [r2, #0]
 8003930:	b933      	cbnz	r3, 8003940 <_free_r+0x2c>
 8003932:	6063      	str	r3, [r4, #4]
 8003934:	6014      	str	r4, [r2, #0]
 8003936:	4628      	mov	r0, r5
 8003938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800393c:	f000 b8e4 	b.w	8003b08 <__malloc_unlock>
 8003940:	42a3      	cmp	r3, r4
 8003942:	d908      	bls.n	8003956 <_free_r+0x42>
 8003944:	6820      	ldr	r0, [r4, #0]
 8003946:	1821      	adds	r1, r4, r0
 8003948:	428b      	cmp	r3, r1
 800394a:	bf01      	itttt	eq
 800394c:	6819      	ldreq	r1, [r3, #0]
 800394e:	685b      	ldreq	r3, [r3, #4]
 8003950:	1809      	addeq	r1, r1, r0
 8003952:	6021      	streq	r1, [r4, #0]
 8003954:	e7ed      	b.n	8003932 <_free_r+0x1e>
 8003956:	461a      	mov	r2, r3
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	b10b      	cbz	r3, 8003960 <_free_r+0x4c>
 800395c:	42a3      	cmp	r3, r4
 800395e:	d9fa      	bls.n	8003956 <_free_r+0x42>
 8003960:	6811      	ldr	r1, [r2, #0]
 8003962:	1850      	adds	r0, r2, r1
 8003964:	42a0      	cmp	r0, r4
 8003966:	d10b      	bne.n	8003980 <_free_r+0x6c>
 8003968:	6820      	ldr	r0, [r4, #0]
 800396a:	4401      	add	r1, r0
 800396c:	1850      	adds	r0, r2, r1
 800396e:	4283      	cmp	r3, r0
 8003970:	6011      	str	r1, [r2, #0]
 8003972:	d1e0      	bne.n	8003936 <_free_r+0x22>
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	6053      	str	r3, [r2, #4]
 800397a:	4408      	add	r0, r1
 800397c:	6010      	str	r0, [r2, #0]
 800397e:	e7da      	b.n	8003936 <_free_r+0x22>
 8003980:	d902      	bls.n	8003988 <_free_r+0x74>
 8003982:	230c      	movs	r3, #12
 8003984:	602b      	str	r3, [r5, #0]
 8003986:	e7d6      	b.n	8003936 <_free_r+0x22>
 8003988:	6820      	ldr	r0, [r4, #0]
 800398a:	1821      	adds	r1, r4, r0
 800398c:	428b      	cmp	r3, r1
 800398e:	bf04      	itt	eq
 8003990:	6819      	ldreq	r1, [r3, #0]
 8003992:	685b      	ldreq	r3, [r3, #4]
 8003994:	6063      	str	r3, [r4, #4]
 8003996:	bf04      	itt	eq
 8003998:	1809      	addeq	r1, r1, r0
 800399a:	6021      	streq	r1, [r4, #0]
 800399c:	6054      	str	r4, [r2, #4]
 800399e:	e7ca      	b.n	8003936 <_free_r+0x22>
 80039a0:	bd38      	pop	{r3, r4, r5, pc}
 80039a2:	bf00      	nop
 80039a4:	200002d0 	.word	0x200002d0

080039a8 <malloc>:
 80039a8:	4b02      	ldr	r3, [pc, #8]	@ (80039b4 <malloc+0xc>)
 80039aa:	4601      	mov	r1, r0
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	f000 b825 	b.w	80039fc <_malloc_r>
 80039b2:	bf00      	nop
 80039b4:	20000018 	.word	0x20000018

080039b8 <sbrk_aligned>:
 80039b8:	b570      	push	{r4, r5, r6, lr}
 80039ba:	4e0f      	ldr	r6, [pc, #60]	@ (80039f8 <sbrk_aligned+0x40>)
 80039bc:	460c      	mov	r4, r1
 80039be:	6831      	ldr	r1, [r6, #0]
 80039c0:	4605      	mov	r5, r0
 80039c2:	b911      	cbnz	r1, 80039ca <sbrk_aligned+0x12>
 80039c4:	f000 fc64 	bl	8004290 <_sbrk_r>
 80039c8:	6030      	str	r0, [r6, #0]
 80039ca:	4621      	mov	r1, r4
 80039cc:	4628      	mov	r0, r5
 80039ce:	f000 fc5f 	bl	8004290 <_sbrk_r>
 80039d2:	1c43      	adds	r3, r0, #1
 80039d4:	d103      	bne.n	80039de <sbrk_aligned+0x26>
 80039d6:	f04f 34ff 	mov.w	r4, #4294967295
 80039da:	4620      	mov	r0, r4
 80039dc:	bd70      	pop	{r4, r5, r6, pc}
 80039de:	1cc4      	adds	r4, r0, #3
 80039e0:	f024 0403 	bic.w	r4, r4, #3
 80039e4:	42a0      	cmp	r0, r4
 80039e6:	d0f8      	beq.n	80039da <sbrk_aligned+0x22>
 80039e8:	1a21      	subs	r1, r4, r0
 80039ea:	4628      	mov	r0, r5
 80039ec:	f000 fc50 	bl	8004290 <_sbrk_r>
 80039f0:	3001      	adds	r0, #1
 80039f2:	d1f2      	bne.n	80039da <sbrk_aligned+0x22>
 80039f4:	e7ef      	b.n	80039d6 <sbrk_aligned+0x1e>
 80039f6:	bf00      	nop
 80039f8:	200002cc 	.word	0x200002cc

080039fc <_malloc_r>:
 80039fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a00:	1ccd      	adds	r5, r1, #3
 8003a02:	f025 0503 	bic.w	r5, r5, #3
 8003a06:	3508      	adds	r5, #8
 8003a08:	2d0c      	cmp	r5, #12
 8003a0a:	bf38      	it	cc
 8003a0c:	250c      	movcc	r5, #12
 8003a0e:	2d00      	cmp	r5, #0
 8003a10:	4606      	mov	r6, r0
 8003a12:	db01      	blt.n	8003a18 <_malloc_r+0x1c>
 8003a14:	42a9      	cmp	r1, r5
 8003a16:	d904      	bls.n	8003a22 <_malloc_r+0x26>
 8003a18:	230c      	movs	r3, #12
 8003a1a:	6033      	str	r3, [r6, #0]
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003af8 <_malloc_r+0xfc>
 8003a26:	f000 f869 	bl	8003afc <__malloc_lock>
 8003a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a2e:	461c      	mov	r4, r3
 8003a30:	bb44      	cbnz	r4, 8003a84 <_malloc_r+0x88>
 8003a32:	4629      	mov	r1, r5
 8003a34:	4630      	mov	r0, r6
 8003a36:	f7ff ffbf 	bl	80039b8 <sbrk_aligned>
 8003a3a:	1c43      	adds	r3, r0, #1
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	d158      	bne.n	8003af2 <_malloc_r+0xf6>
 8003a40:	f8d8 4000 	ldr.w	r4, [r8]
 8003a44:	4627      	mov	r7, r4
 8003a46:	2f00      	cmp	r7, #0
 8003a48:	d143      	bne.n	8003ad2 <_malloc_r+0xd6>
 8003a4a:	2c00      	cmp	r4, #0
 8003a4c:	d04b      	beq.n	8003ae6 <_malloc_r+0xea>
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	4639      	mov	r1, r7
 8003a52:	4630      	mov	r0, r6
 8003a54:	eb04 0903 	add.w	r9, r4, r3
 8003a58:	f000 fc1a 	bl	8004290 <_sbrk_r>
 8003a5c:	4581      	cmp	r9, r0
 8003a5e:	d142      	bne.n	8003ae6 <_malloc_r+0xea>
 8003a60:	6821      	ldr	r1, [r4, #0]
 8003a62:	1a6d      	subs	r5, r5, r1
 8003a64:	4629      	mov	r1, r5
 8003a66:	4630      	mov	r0, r6
 8003a68:	f7ff ffa6 	bl	80039b8 <sbrk_aligned>
 8003a6c:	3001      	adds	r0, #1
 8003a6e:	d03a      	beq.n	8003ae6 <_malloc_r+0xea>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	442b      	add	r3, r5
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	f8d8 3000 	ldr.w	r3, [r8]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	bb62      	cbnz	r2, 8003ad8 <_malloc_r+0xdc>
 8003a7e:	f8c8 7000 	str.w	r7, [r8]
 8003a82:	e00f      	b.n	8003aa4 <_malloc_r+0xa8>
 8003a84:	6822      	ldr	r2, [r4, #0]
 8003a86:	1b52      	subs	r2, r2, r5
 8003a88:	d420      	bmi.n	8003acc <_malloc_r+0xd0>
 8003a8a:	2a0b      	cmp	r2, #11
 8003a8c:	d917      	bls.n	8003abe <_malloc_r+0xc2>
 8003a8e:	1961      	adds	r1, r4, r5
 8003a90:	42a3      	cmp	r3, r4
 8003a92:	6025      	str	r5, [r4, #0]
 8003a94:	bf18      	it	ne
 8003a96:	6059      	strne	r1, [r3, #4]
 8003a98:	6863      	ldr	r3, [r4, #4]
 8003a9a:	bf08      	it	eq
 8003a9c:	f8c8 1000 	streq.w	r1, [r8]
 8003aa0:	5162      	str	r2, [r4, r5]
 8003aa2:	604b      	str	r3, [r1, #4]
 8003aa4:	4630      	mov	r0, r6
 8003aa6:	f000 f82f 	bl	8003b08 <__malloc_unlock>
 8003aaa:	f104 000b 	add.w	r0, r4, #11
 8003aae:	1d23      	adds	r3, r4, #4
 8003ab0:	f020 0007 	bic.w	r0, r0, #7
 8003ab4:	1ac2      	subs	r2, r0, r3
 8003ab6:	bf1c      	itt	ne
 8003ab8:	1a1b      	subne	r3, r3, r0
 8003aba:	50a3      	strne	r3, [r4, r2]
 8003abc:	e7af      	b.n	8003a1e <_malloc_r+0x22>
 8003abe:	6862      	ldr	r2, [r4, #4]
 8003ac0:	42a3      	cmp	r3, r4
 8003ac2:	bf0c      	ite	eq
 8003ac4:	f8c8 2000 	streq.w	r2, [r8]
 8003ac8:	605a      	strne	r2, [r3, #4]
 8003aca:	e7eb      	b.n	8003aa4 <_malloc_r+0xa8>
 8003acc:	4623      	mov	r3, r4
 8003ace:	6864      	ldr	r4, [r4, #4]
 8003ad0:	e7ae      	b.n	8003a30 <_malloc_r+0x34>
 8003ad2:	463c      	mov	r4, r7
 8003ad4:	687f      	ldr	r7, [r7, #4]
 8003ad6:	e7b6      	b.n	8003a46 <_malloc_r+0x4a>
 8003ad8:	461a      	mov	r2, r3
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	42a3      	cmp	r3, r4
 8003ade:	d1fb      	bne.n	8003ad8 <_malloc_r+0xdc>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	6053      	str	r3, [r2, #4]
 8003ae4:	e7de      	b.n	8003aa4 <_malloc_r+0xa8>
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	6033      	str	r3, [r6, #0]
 8003aea:	4630      	mov	r0, r6
 8003aec:	f000 f80c 	bl	8003b08 <__malloc_unlock>
 8003af0:	e794      	b.n	8003a1c <_malloc_r+0x20>
 8003af2:	6005      	str	r5, [r0, #0]
 8003af4:	e7d6      	b.n	8003aa4 <_malloc_r+0xa8>
 8003af6:	bf00      	nop
 8003af8:	200002d0 	.word	0x200002d0

08003afc <__malloc_lock>:
 8003afc:	4801      	ldr	r0, [pc, #4]	@ (8003b04 <__malloc_lock+0x8>)
 8003afe:	f7ff bee8 	b.w	80038d2 <__retarget_lock_acquire_recursive>
 8003b02:	bf00      	nop
 8003b04:	200002c8 	.word	0x200002c8

08003b08 <__malloc_unlock>:
 8003b08:	4801      	ldr	r0, [pc, #4]	@ (8003b10 <__malloc_unlock+0x8>)
 8003b0a:	f7ff bee3 	b.w	80038d4 <__retarget_lock_release_recursive>
 8003b0e:	bf00      	nop
 8003b10:	200002c8 	.word	0x200002c8

08003b14 <__ssputs_r>:
 8003b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b18:	688e      	ldr	r6, [r1, #8]
 8003b1a:	461f      	mov	r7, r3
 8003b1c:	42be      	cmp	r6, r7
 8003b1e:	680b      	ldr	r3, [r1, #0]
 8003b20:	4682      	mov	sl, r0
 8003b22:	460c      	mov	r4, r1
 8003b24:	4690      	mov	r8, r2
 8003b26:	d82d      	bhi.n	8003b84 <__ssputs_r+0x70>
 8003b28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b30:	d026      	beq.n	8003b80 <__ssputs_r+0x6c>
 8003b32:	6965      	ldr	r5, [r4, #20]
 8003b34:	6909      	ldr	r1, [r1, #16]
 8003b36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b3a:	eba3 0901 	sub.w	r9, r3, r1
 8003b3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b42:	1c7b      	adds	r3, r7, #1
 8003b44:	444b      	add	r3, r9
 8003b46:	106d      	asrs	r5, r5, #1
 8003b48:	429d      	cmp	r5, r3
 8003b4a:	bf38      	it	cc
 8003b4c:	461d      	movcc	r5, r3
 8003b4e:	0553      	lsls	r3, r2, #21
 8003b50:	d527      	bpl.n	8003ba2 <__ssputs_r+0x8e>
 8003b52:	4629      	mov	r1, r5
 8003b54:	f7ff ff52 	bl	80039fc <_malloc_r>
 8003b58:	4606      	mov	r6, r0
 8003b5a:	b360      	cbz	r0, 8003bb6 <__ssputs_r+0xa2>
 8003b5c:	6921      	ldr	r1, [r4, #16]
 8003b5e:	464a      	mov	r2, r9
 8003b60:	f000 fba6 	bl	80042b0 <memcpy>
 8003b64:	89a3      	ldrh	r3, [r4, #12]
 8003b66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b6e:	81a3      	strh	r3, [r4, #12]
 8003b70:	6126      	str	r6, [r4, #16]
 8003b72:	6165      	str	r5, [r4, #20]
 8003b74:	444e      	add	r6, r9
 8003b76:	eba5 0509 	sub.w	r5, r5, r9
 8003b7a:	6026      	str	r6, [r4, #0]
 8003b7c:	60a5      	str	r5, [r4, #8]
 8003b7e:	463e      	mov	r6, r7
 8003b80:	42be      	cmp	r6, r7
 8003b82:	d900      	bls.n	8003b86 <__ssputs_r+0x72>
 8003b84:	463e      	mov	r6, r7
 8003b86:	6820      	ldr	r0, [r4, #0]
 8003b88:	4632      	mov	r2, r6
 8003b8a:	4641      	mov	r1, r8
 8003b8c:	f000 fb66 	bl	800425c <memmove>
 8003b90:	68a3      	ldr	r3, [r4, #8]
 8003b92:	1b9b      	subs	r3, r3, r6
 8003b94:	60a3      	str	r3, [r4, #8]
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	4433      	add	r3, r6
 8003b9a:	6023      	str	r3, [r4, #0]
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba2:	462a      	mov	r2, r5
 8003ba4:	f000 fb99 	bl	80042da <_realloc_r>
 8003ba8:	4606      	mov	r6, r0
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d1e0      	bne.n	8003b70 <__ssputs_r+0x5c>
 8003bae:	6921      	ldr	r1, [r4, #16]
 8003bb0:	4650      	mov	r0, sl
 8003bb2:	f7ff feaf 	bl	8003914 <_free_r>
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	f8ca 3000 	str.w	r3, [sl]
 8003bbc:	89a3      	ldrh	r3, [r4, #12]
 8003bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bc2:	81a3      	strh	r3, [r4, #12]
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	e7e9      	b.n	8003b9e <__ssputs_r+0x8a>
	...

08003bcc <_svfiprintf_r>:
 8003bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd0:	4698      	mov	r8, r3
 8003bd2:	898b      	ldrh	r3, [r1, #12]
 8003bd4:	061b      	lsls	r3, r3, #24
 8003bd6:	b09d      	sub	sp, #116	@ 0x74
 8003bd8:	4607      	mov	r7, r0
 8003bda:	460d      	mov	r5, r1
 8003bdc:	4614      	mov	r4, r2
 8003bde:	d510      	bpl.n	8003c02 <_svfiprintf_r+0x36>
 8003be0:	690b      	ldr	r3, [r1, #16]
 8003be2:	b973      	cbnz	r3, 8003c02 <_svfiprintf_r+0x36>
 8003be4:	2140      	movs	r1, #64	@ 0x40
 8003be6:	f7ff ff09 	bl	80039fc <_malloc_r>
 8003bea:	6028      	str	r0, [r5, #0]
 8003bec:	6128      	str	r0, [r5, #16]
 8003bee:	b930      	cbnz	r0, 8003bfe <_svfiprintf_r+0x32>
 8003bf0:	230c      	movs	r3, #12
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf8:	b01d      	add	sp, #116	@ 0x74
 8003bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bfe:	2340      	movs	r3, #64	@ 0x40
 8003c00:	616b      	str	r3, [r5, #20]
 8003c02:	2300      	movs	r3, #0
 8003c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c06:	2320      	movs	r3, #32
 8003c08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c10:	2330      	movs	r3, #48	@ 0x30
 8003c12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003db0 <_svfiprintf_r+0x1e4>
 8003c16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c1a:	f04f 0901 	mov.w	r9, #1
 8003c1e:	4623      	mov	r3, r4
 8003c20:	469a      	mov	sl, r3
 8003c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c26:	b10a      	cbz	r2, 8003c2c <_svfiprintf_r+0x60>
 8003c28:	2a25      	cmp	r2, #37	@ 0x25
 8003c2a:	d1f9      	bne.n	8003c20 <_svfiprintf_r+0x54>
 8003c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8003c30:	d00b      	beq.n	8003c4a <_svfiprintf_r+0x7e>
 8003c32:	465b      	mov	r3, fp
 8003c34:	4622      	mov	r2, r4
 8003c36:	4629      	mov	r1, r5
 8003c38:	4638      	mov	r0, r7
 8003c3a:	f7ff ff6b 	bl	8003b14 <__ssputs_r>
 8003c3e:	3001      	adds	r0, #1
 8003c40:	f000 80a7 	beq.w	8003d92 <_svfiprintf_r+0x1c6>
 8003c44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c46:	445a      	add	r2, fp
 8003c48:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 809f 	beq.w	8003d92 <_svfiprintf_r+0x1c6>
 8003c54:	2300      	movs	r3, #0
 8003c56:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c5e:	f10a 0a01 	add.w	sl, sl, #1
 8003c62:	9304      	str	r3, [sp, #16]
 8003c64:	9307      	str	r3, [sp, #28]
 8003c66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c6c:	4654      	mov	r4, sl
 8003c6e:	2205      	movs	r2, #5
 8003c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c74:	484e      	ldr	r0, [pc, #312]	@ (8003db0 <_svfiprintf_r+0x1e4>)
 8003c76:	f7fc fabb 	bl	80001f0 <memchr>
 8003c7a:	9a04      	ldr	r2, [sp, #16]
 8003c7c:	b9d8      	cbnz	r0, 8003cb6 <_svfiprintf_r+0xea>
 8003c7e:	06d0      	lsls	r0, r2, #27
 8003c80:	bf44      	itt	mi
 8003c82:	2320      	movmi	r3, #32
 8003c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c88:	0711      	lsls	r1, r2, #28
 8003c8a:	bf44      	itt	mi
 8003c8c:	232b      	movmi	r3, #43	@ 0x2b
 8003c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c92:	f89a 3000 	ldrb.w	r3, [sl]
 8003c96:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c98:	d015      	beq.n	8003cc6 <_svfiprintf_r+0xfa>
 8003c9a:	9a07      	ldr	r2, [sp, #28]
 8003c9c:	4654      	mov	r4, sl
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f04f 0c0a 	mov.w	ip, #10
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003caa:	3b30      	subs	r3, #48	@ 0x30
 8003cac:	2b09      	cmp	r3, #9
 8003cae:	d94b      	bls.n	8003d48 <_svfiprintf_r+0x17c>
 8003cb0:	b1b0      	cbz	r0, 8003ce0 <_svfiprintf_r+0x114>
 8003cb2:	9207      	str	r2, [sp, #28]
 8003cb4:	e014      	b.n	8003ce0 <_svfiprintf_r+0x114>
 8003cb6:	eba0 0308 	sub.w	r3, r0, r8
 8003cba:	fa09 f303 	lsl.w	r3, r9, r3
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	9304      	str	r3, [sp, #16]
 8003cc2:	46a2      	mov	sl, r4
 8003cc4:	e7d2      	b.n	8003c6c <_svfiprintf_r+0xa0>
 8003cc6:	9b03      	ldr	r3, [sp, #12]
 8003cc8:	1d19      	adds	r1, r3, #4
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	9103      	str	r1, [sp, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bfbb      	ittet	lt
 8003cd2:	425b      	neglt	r3, r3
 8003cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8003cd8:	9307      	strge	r3, [sp, #28]
 8003cda:	9307      	strlt	r3, [sp, #28]
 8003cdc:	bfb8      	it	lt
 8003cde:	9204      	strlt	r2, [sp, #16]
 8003ce0:	7823      	ldrb	r3, [r4, #0]
 8003ce2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ce4:	d10a      	bne.n	8003cfc <_svfiprintf_r+0x130>
 8003ce6:	7863      	ldrb	r3, [r4, #1]
 8003ce8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cea:	d132      	bne.n	8003d52 <_svfiprintf_r+0x186>
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	1d1a      	adds	r2, r3, #4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	9203      	str	r2, [sp, #12]
 8003cf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cf8:	3402      	adds	r4, #2
 8003cfa:	9305      	str	r3, [sp, #20]
 8003cfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003dc0 <_svfiprintf_r+0x1f4>
 8003d00:	7821      	ldrb	r1, [r4, #0]
 8003d02:	2203      	movs	r2, #3
 8003d04:	4650      	mov	r0, sl
 8003d06:	f7fc fa73 	bl	80001f0 <memchr>
 8003d0a:	b138      	cbz	r0, 8003d1c <_svfiprintf_r+0x150>
 8003d0c:	9b04      	ldr	r3, [sp, #16]
 8003d0e:	eba0 000a 	sub.w	r0, r0, sl
 8003d12:	2240      	movs	r2, #64	@ 0x40
 8003d14:	4082      	lsls	r2, r0
 8003d16:	4313      	orrs	r3, r2
 8003d18:	3401      	adds	r4, #1
 8003d1a:	9304      	str	r3, [sp, #16]
 8003d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d20:	4824      	ldr	r0, [pc, #144]	@ (8003db4 <_svfiprintf_r+0x1e8>)
 8003d22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d26:	2206      	movs	r2, #6
 8003d28:	f7fc fa62 	bl	80001f0 <memchr>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d036      	beq.n	8003d9e <_svfiprintf_r+0x1d2>
 8003d30:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <_svfiprintf_r+0x1ec>)
 8003d32:	bb1b      	cbnz	r3, 8003d7c <_svfiprintf_r+0x1b0>
 8003d34:	9b03      	ldr	r3, [sp, #12]
 8003d36:	3307      	adds	r3, #7
 8003d38:	f023 0307 	bic.w	r3, r3, #7
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	9303      	str	r3, [sp, #12]
 8003d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d42:	4433      	add	r3, r6
 8003d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d46:	e76a      	b.n	8003c1e <_svfiprintf_r+0x52>
 8003d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d4c:	460c      	mov	r4, r1
 8003d4e:	2001      	movs	r0, #1
 8003d50:	e7a8      	b.n	8003ca4 <_svfiprintf_r+0xd8>
 8003d52:	2300      	movs	r3, #0
 8003d54:	3401      	adds	r4, #1
 8003d56:	9305      	str	r3, [sp, #20]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f04f 0c0a 	mov.w	ip, #10
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d64:	3a30      	subs	r2, #48	@ 0x30
 8003d66:	2a09      	cmp	r2, #9
 8003d68:	d903      	bls.n	8003d72 <_svfiprintf_r+0x1a6>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0c6      	beq.n	8003cfc <_svfiprintf_r+0x130>
 8003d6e:	9105      	str	r1, [sp, #20]
 8003d70:	e7c4      	b.n	8003cfc <_svfiprintf_r+0x130>
 8003d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d76:	4604      	mov	r4, r0
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e7f0      	b.n	8003d5e <_svfiprintf_r+0x192>
 8003d7c:	ab03      	add	r3, sp, #12
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	462a      	mov	r2, r5
 8003d82:	4b0e      	ldr	r3, [pc, #56]	@ (8003dbc <_svfiprintf_r+0x1f0>)
 8003d84:	a904      	add	r1, sp, #16
 8003d86:	4638      	mov	r0, r7
 8003d88:	f3af 8000 	nop.w
 8003d8c:	1c42      	adds	r2, r0, #1
 8003d8e:	4606      	mov	r6, r0
 8003d90:	d1d6      	bne.n	8003d40 <_svfiprintf_r+0x174>
 8003d92:	89ab      	ldrh	r3, [r5, #12]
 8003d94:	065b      	lsls	r3, r3, #25
 8003d96:	f53f af2d 	bmi.w	8003bf4 <_svfiprintf_r+0x28>
 8003d9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d9c:	e72c      	b.n	8003bf8 <_svfiprintf_r+0x2c>
 8003d9e:	ab03      	add	r3, sp, #12
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	462a      	mov	r2, r5
 8003da4:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <_svfiprintf_r+0x1f0>)
 8003da6:	a904      	add	r1, sp, #16
 8003da8:	4638      	mov	r0, r7
 8003daa:	f000 f879 	bl	8003ea0 <_printf_i>
 8003dae:	e7ed      	b.n	8003d8c <_svfiprintf_r+0x1c0>
 8003db0:	080049af 	.word	0x080049af
 8003db4:	080049b9 	.word	0x080049b9
 8003db8:	00000000 	.word	0x00000000
 8003dbc:	08003b15 	.word	0x08003b15
 8003dc0:	080049b5 	.word	0x080049b5

08003dc4 <_printf_common>:
 8003dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc8:	4616      	mov	r6, r2
 8003dca:	4698      	mov	r8, r3
 8003dcc:	688a      	ldr	r2, [r1, #8]
 8003dce:	690b      	ldr	r3, [r1, #16]
 8003dd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	bfb8      	it	lt
 8003dd8:	4613      	movlt	r3, r2
 8003dda:	6033      	str	r3, [r6, #0]
 8003ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003de0:	4607      	mov	r7, r0
 8003de2:	460c      	mov	r4, r1
 8003de4:	b10a      	cbz	r2, 8003dea <_printf_common+0x26>
 8003de6:	3301      	adds	r3, #1
 8003de8:	6033      	str	r3, [r6, #0]
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	0699      	lsls	r1, r3, #26
 8003dee:	bf42      	ittt	mi
 8003df0:	6833      	ldrmi	r3, [r6, #0]
 8003df2:	3302      	addmi	r3, #2
 8003df4:	6033      	strmi	r3, [r6, #0]
 8003df6:	6825      	ldr	r5, [r4, #0]
 8003df8:	f015 0506 	ands.w	r5, r5, #6
 8003dfc:	d106      	bne.n	8003e0c <_printf_common+0x48>
 8003dfe:	f104 0a19 	add.w	sl, r4, #25
 8003e02:	68e3      	ldr	r3, [r4, #12]
 8003e04:	6832      	ldr	r2, [r6, #0]
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	42ab      	cmp	r3, r5
 8003e0a:	dc26      	bgt.n	8003e5a <_printf_common+0x96>
 8003e0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e10:	6822      	ldr	r2, [r4, #0]
 8003e12:	3b00      	subs	r3, #0
 8003e14:	bf18      	it	ne
 8003e16:	2301      	movne	r3, #1
 8003e18:	0692      	lsls	r2, r2, #26
 8003e1a:	d42b      	bmi.n	8003e74 <_printf_common+0xb0>
 8003e1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e20:	4641      	mov	r1, r8
 8003e22:	4638      	mov	r0, r7
 8003e24:	47c8      	blx	r9
 8003e26:	3001      	adds	r0, #1
 8003e28:	d01e      	beq.n	8003e68 <_printf_common+0xa4>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	6922      	ldr	r2, [r4, #16]
 8003e2e:	f003 0306 	and.w	r3, r3, #6
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	bf02      	ittt	eq
 8003e36:	68e5      	ldreq	r5, [r4, #12]
 8003e38:	6833      	ldreq	r3, [r6, #0]
 8003e3a:	1aed      	subeq	r5, r5, r3
 8003e3c:	68a3      	ldr	r3, [r4, #8]
 8003e3e:	bf0c      	ite	eq
 8003e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e44:	2500      	movne	r5, #0
 8003e46:	4293      	cmp	r3, r2
 8003e48:	bfc4      	itt	gt
 8003e4a:	1a9b      	subgt	r3, r3, r2
 8003e4c:	18ed      	addgt	r5, r5, r3
 8003e4e:	2600      	movs	r6, #0
 8003e50:	341a      	adds	r4, #26
 8003e52:	42b5      	cmp	r5, r6
 8003e54:	d11a      	bne.n	8003e8c <_printf_common+0xc8>
 8003e56:	2000      	movs	r0, #0
 8003e58:	e008      	b.n	8003e6c <_printf_common+0xa8>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4652      	mov	r2, sl
 8003e5e:	4641      	mov	r1, r8
 8003e60:	4638      	mov	r0, r7
 8003e62:	47c8      	blx	r9
 8003e64:	3001      	adds	r0, #1
 8003e66:	d103      	bne.n	8003e70 <_printf_common+0xac>
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e70:	3501      	adds	r5, #1
 8003e72:	e7c6      	b.n	8003e02 <_printf_common+0x3e>
 8003e74:	18e1      	adds	r1, r4, r3
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	2030      	movs	r0, #48	@ 0x30
 8003e7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e7e:	4422      	add	r2, r4
 8003e80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e88:	3302      	adds	r3, #2
 8003e8a:	e7c7      	b.n	8003e1c <_printf_common+0x58>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	4622      	mov	r2, r4
 8003e90:	4641      	mov	r1, r8
 8003e92:	4638      	mov	r0, r7
 8003e94:	47c8      	blx	r9
 8003e96:	3001      	adds	r0, #1
 8003e98:	d0e6      	beq.n	8003e68 <_printf_common+0xa4>
 8003e9a:	3601      	adds	r6, #1
 8003e9c:	e7d9      	b.n	8003e52 <_printf_common+0x8e>
	...

08003ea0 <_printf_i>:
 8003ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea4:	7e0f      	ldrb	r7, [r1, #24]
 8003ea6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ea8:	2f78      	cmp	r7, #120	@ 0x78
 8003eaa:	4691      	mov	r9, r2
 8003eac:	4680      	mov	r8, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	469a      	mov	sl, r3
 8003eb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003eb6:	d807      	bhi.n	8003ec8 <_printf_i+0x28>
 8003eb8:	2f62      	cmp	r7, #98	@ 0x62
 8003eba:	d80a      	bhi.n	8003ed2 <_printf_i+0x32>
 8003ebc:	2f00      	cmp	r7, #0
 8003ebe:	f000 80d2 	beq.w	8004066 <_printf_i+0x1c6>
 8003ec2:	2f58      	cmp	r7, #88	@ 0x58
 8003ec4:	f000 80b9 	beq.w	800403a <_printf_i+0x19a>
 8003ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ecc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ed0:	e03a      	b.n	8003f48 <_printf_i+0xa8>
 8003ed2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ed6:	2b15      	cmp	r3, #21
 8003ed8:	d8f6      	bhi.n	8003ec8 <_printf_i+0x28>
 8003eda:	a101      	add	r1, pc, #4	@ (adr r1, 8003ee0 <_printf_i+0x40>)
 8003edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ee0:	08003f39 	.word	0x08003f39
 8003ee4:	08003f4d 	.word	0x08003f4d
 8003ee8:	08003ec9 	.word	0x08003ec9
 8003eec:	08003ec9 	.word	0x08003ec9
 8003ef0:	08003ec9 	.word	0x08003ec9
 8003ef4:	08003ec9 	.word	0x08003ec9
 8003ef8:	08003f4d 	.word	0x08003f4d
 8003efc:	08003ec9 	.word	0x08003ec9
 8003f00:	08003ec9 	.word	0x08003ec9
 8003f04:	08003ec9 	.word	0x08003ec9
 8003f08:	08003ec9 	.word	0x08003ec9
 8003f0c:	0800404d 	.word	0x0800404d
 8003f10:	08003f77 	.word	0x08003f77
 8003f14:	08004007 	.word	0x08004007
 8003f18:	08003ec9 	.word	0x08003ec9
 8003f1c:	08003ec9 	.word	0x08003ec9
 8003f20:	0800406f 	.word	0x0800406f
 8003f24:	08003ec9 	.word	0x08003ec9
 8003f28:	08003f77 	.word	0x08003f77
 8003f2c:	08003ec9 	.word	0x08003ec9
 8003f30:	08003ec9 	.word	0x08003ec9
 8003f34:	0800400f 	.word	0x0800400f
 8003f38:	6833      	ldr	r3, [r6, #0]
 8003f3a:	1d1a      	adds	r2, r3, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6032      	str	r2, [r6, #0]
 8003f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e09d      	b.n	8004088 <_printf_i+0x1e8>
 8003f4c:	6833      	ldr	r3, [r6, #0]
 8003f4e:	6820      	ldr	r0, [r4, #0]
 8003f50:	1d19      	adds	r1, r3, #4
 8003f52:	6031      	str	r1, [r6, #0]
 8003f54:	0606      	lsls	r6, r0, #24
 8003f56:	d501      	bpl.n	8003f5c <_printf_i+0xbc>
 8003f58:	681d      	ldr	r5, [r3, #0]
 8003f5a:	e003      	b.n	8003f64 <_printf_i+0xc4>
 8003f5c:	0645      	lsls	r5, r0, #25
 8003f5e:	d5fb      	bpl.n	8003f58 <_printf_i+0xb8>
 8003f60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f64:	2d00      	cmp	r5, #0
 8003f66:	da03      	bge.n	8003f70 <_printf_i+0xd0>
 8003f68:	232d      	movs	r3, #45	@ 0x2d
 8003f6a:	426d      	negs	r5, r5
 8003f6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f70:	4859      	ldr	r0, [pc, #356]	@ (80040d8 <_printf_i+0x238>)
 8003f72:	230a      	movs	r3, #10
 8003f74:	e011      	b.n	8003f9a <_printf_i+0xfa>
 8003f76:	6821      	ldr	r1, [r4, #0]
 8003f78:	6833      	ldr	r3, [r6, #0]
 8003f7a:	0608      	lsls	r0, r1, #24
 8003f7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f80:	d402      	bmi.n	8003f88 <_printf_i+0xe8>
 8003f82:	0649      	lsls	r1, r1, #25
 8003f84:	bf48      	it	mi
 8003f86:	b2ad      	uxthmi	r5, r5
 8003f88:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f8a:	4853      	ldr	r0, [pc, #332]	@ (80040d8 <_printf_i+0x238>)
 8003f8c:	6033      	str	r3, [r6, #0]
 8003f8e:	bf14      	ite	ne
 8003f90:	230a      	movne	r3, #10
 8003f92:	2308      	moveq	r3, #8
 8003f94:	2100      	movs	r1, #0
 8003f96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f9a:	6866      	ldr	r6, [r4, #4]
 8003f9c:	60a6      	str	r6, [r4, #8]
 8003f9e:	2e00      	cmp	r6, #0
 8003fa0:	bfa2      	ittt	ge
 8003fa2:	6821      	ldrge	r1, [r4, #0]
 8003fa4:	f021 0104 	bicge.w	r1, r1, #4
 8003fa8:	6021      	strge	r1, [r4, #0]
 8003faa:	b90d      	cbnz	r5, 8003fb0 <_printf_i+0x110>
 8003fac:	2e00      	cmp	r6, #0
 8003fae:	d04b      	beq.n	8004048 <_printf_i+0x1a8>
 8003fb0:	4616      	mov	r6, r2
 8003fb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fb6:	fb03 5711 	mls	r7, r3, r1, r5
 8003fba:	5dc7      	ldrb	r7, [r0, r7]
 8003fbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fc0:	462f      	mov	r7, r5
 8003fc2:	42bb      	cmp	r3, r7
 8003fc4:	460d      	mov	r5, r1
 8003fc6:	d9f4      	bls.n	8003fb2 <_printf_i+0x112>
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d10b      	bne.n	8003fe4 <_printf_i+0x144>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	07df      	lsls	r7, r3, #31
 8003fd0:	d508      	bpl.n	8003fe4 <_printf_i+0x144>
 8003fd2:	6923      	ldr	r3, [r4, #16]
 8003fd4:	6861      	ldr	r1, [r4, #4]
 8003fd6:	4299      	cmp	r1, r3
 8003fd8:	bfde      	ittt	le
 8003fda:	2330      	movle	r3, #48	@ 0x30
 8003fdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fe0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fe4:	1b92      	subs	r2, r2, r6
 8003fe6:	6122      	str	r2, [r4, #16]
 8003fe8:	f8cd a000 	str.w	sl, [sp]
 8003fec:	464b      	mov	r3, r9
 8003fee:	aa03      	add	r2, sp, #12
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	4640      	mov	r0, r8
 8003ff4:	f7ff fee6 	bl	8003dc4 <_printf_common>
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d14a      	bne.n	8004092 <_printf_i+0x1f2>
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	b004      	add	sp, #16
 8004002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	f043 0320 	orr.w	r3, r3, #32
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	4833      	ldr	r0, [pc, #204]	@ (80040dc <_printf_i+0x23c>)
 8004010:	2778      	movs	r7, #120	@ 0x78
 8004012:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	6831      	ldr	r1, [r6, #0]
 800401a:	061f      	lsls	r7, r3, #24
 800401c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004020:	d402      	bmi.n	8004028 <_printf_i+0x188>
 8004022:	065f      	lsls	r7, r3, #25
 8004024:	bf48      	it	mi
 8004026:	b2ad      	uxthmi	r5, r5
 8004028:	6031      	str	r1, [r6, #0]
 800402a:	07d9      	lsls	r1, r3, #31
 800402c:	bf44      	itt	mi
 800402e:	f043 0320 	orrmi.w	r3, r3, #32
 8004032:	6023      	strmi	r3, [r4, #0]
 8004034:	b11d      	cbz	r5, 800403e <_printf_i+0x19e>
 8004036:	2310      	movs	r3, #16
 8004038:	e7ac      	b.n	8003f94 <_printf_i+0xf4>
 800403a:	4827      	ldr	r0, [pc, #156]	@ (80040d8 <_printf_i+0x238>)
 800403c:	e7e9      	b.n	8004012 <_printf_i+0x172>
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	f023 0320 	bic.w	r3, r3, #32
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	e7f6      	b.n	8004036 <_printf_i+0x196>
 8004048:	4616      	mov	r6, r2
 800404a:	e7bd      	b.n	8003fc8 <_printf_i+0x128>
 800404c:	6833      	ldr	r3, [r6, #0]
 800404e:	6825      	ldr	r5, [r4, #0]
 8004050:	6961      	ldr	r1, [r4, #20]
 8004052:	1d18      	adds	r0, r3, #4
 8004054:	6030      	str	r0, [r6, #0]
 8004056:	062e      	lsls	r6, r5, #24
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	d501      	bpl.n	8004060 <_printf_i+0x1c0>
 800405c:	6019      	str	r1, [r3, #0]
 800405e:	e002      	b.n	8004066 <_printf_i+0x1c6>
 8004060:	0668      	lsls	r0, r5, #25
 8004062:	d5fb      	bpl.n	800405c <_printf_i+0x1bc>
 8004064:	8019      	strh	r1, [r3, #0]
 8004066:	2300      	movs	r3, #0
 8004068:	6123      	str	r3, [r4, #16]
 800406a:	4616      	mov	r6, r2
 800406c:	e7bc      	b.n	8003fe8 <_printf_i+0x148>
 800406e:	6833      	ldr	r3, [r6, #0]
 8004070:	1d1a      	adds	r2, r3, #4
 8004072:	6032      	str	r2, [r6, #0]
 8004074:	681e      	ldr	r6, [r3, #0]
 8004076:	6862      	ldr	r2, [r4, #4]
 8004078:	2100      	movs	r1, #0
 800407a:	4630      	mov	r0, r6
 800407c:	f7fc f8b8 	bl	80001f0 <memchr>
 8004080:	b108      	cbz	r0, 8004086 <_printf_i+0x1e6>
 8004082:	1b80      	subs	r0, r0, r6
 8004084:	6060      	str	r0, [r4, #4]
 8004086:	6863      	ldr	r3, [r4, #4]
 8004088:	6123      	str	r3, [r4, #16]
 800408a:	2300      	movs	r3, #0
 800408c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004090:	e7aa      	b.n	8003fe8 <_printf_i+0x148>
 8004092:	6923      	ldr	r3, [r4, #16]
 8004094:	4632      	mov	r2, r6
 8004096:	4649      	mov	r1, r9
 8004098:	4640      	mov	r0, r8
 800409a:	47d0      	blx	sl
 800409c:	3001      	adds	r0, #1
 800409e:	d0ad      	beq.n	8003ffc <_printf_i+0x15c>
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	079b      	lsls	r3, r3, #30
 80040a4:	d413      	bmi.n	80040ce <_printf_i+0x22e>
 80040a6:	68e0      	ldr	r0, [r4, #12]
 80040a8:	9b03      	ldr	r3, [sp, #12]
 80040aa:	4298      	cmp	r0, r3
 80040ac:	bfb8      	it	lt
 80040ae:	4618      	movlt	r0, r3
 80040b0:	e7a6      	b.n	8004000 <_printf_i+0x160>
 80040b2:	2301      	movs	r3, #1
 80040b4:	4632      	mov	r2, r6
 80040b6:	4649      	mov	r1, r9
 80040b8:	4640      	mov	r0, r8
 80040ba:	47d0      	blx	sl
 80040bc:	3001      	adds	r0, #1
 80040be:	d09d      	beq.n	8003ffc <_printf_i+0x15c>
 80040c0:	3501      	adds	r5, #1
 80040c2:	68e3      	ldr	r3, [r4, #12]
 80040c4:	9903      	ldr	r1, [sp, #12]
 80040c6:	1a5b      	subs	r3, r3, r1
 80040c8:	42ab      	cmp	r3, r5
 80040ca:	dcf2      	bgt.n	80040b2 <_printf_i+0x212>
 80040cc:	e7eb      	b.n	80040a6 <_printf_i+0x206>
 80040ce:	2500      	movs	r5, #0
 80040d0:	f104 0619 	add.w	r6, r4, #25
 80040d4:	e7f5      	b.n	80040c2 <_printf_i+0x222>
 80040d6:	bf00      	nop
 80040d8:	080049c0 	.word	0x080049c0
 80040dc:	080049d1 	.word	0x080049d1

080040e0 <__sflush_r>:
 80040e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e8:	0716      	lsls	r6, r2, #28
 80040ea:	4605      	mov	r5, r0
 80040ec:	460c      	mov	r4, r1
 80040ee:	d454      	bmi.n	800419a <__sflush_r+0xba>
 80040f0:	684b      	ldr	r3, [r1, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	dc02      	bgt.n	80040fc <__sflush_r+0x1c>
 80040f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dd48      	ble.n	800418e <__sflush_r+0xae>
 80040fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80040fe:	2e00      	cmp	r6, #0
 8004100:	d045      	beq.n	800418e <__sflush_r+0xae>
 8004102:	2300      	movs	r3, #0
 8004104:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004108:	682f      	ldr	r7, [r5, #0]
 800410a:	6a21      	ldr	r1, [r4, #32]
 800410c:	602b      	str	r3, [r5, #0]
 800410e:	d030      	beq.n	8004172 <__sflush_r+0x92>
 8004110:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	0759      	lsls	r1, r3, #29
 8004116:	d505      	bpl.n	8004124 <__sflush_r+0x44>
 8004118:	6863      	ldr	r3, [r4, #4]
 800411a:	1ad2      	subs	r2, r2, r3
 800411c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800411e:	b10b      	cbz	r3, 8004124 <__sflush_r+0x44>
 8004120:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004122:	1ad2      	subs	r2, r2, r3
 8004124:	2300      	movs	r3, #0
 8004126:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004128:	6a21      	ldr	r1, [r4, #32]
 800412a:	4628      	mov	r0, r5
 800412c:	47b0      	blx	r6
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	d106      	bne.n	8004142 <__sflush_r+0x62>
 8004134:	6829      	ldr	r1, [r5, #0]
 8004136:	291d      	cmp	r1, #29
 8004138:	d82b      	bhi.n	8004192 <__sflush_r+0xb2>
 800413a:	4a2a      	ldr	r2, [pc, #168]	@ (80041e4 <__sflush_r+0x104>)
 800413c:	410a      	asrs	r2, r1
 800413e:	07d6      	lsls	r6, r2, #31
 8004140:	d427      	bmi.n	8004192 <__sflush_r+0xb2>
 8004142:	2200      	movs	r2, #0
 8004144:	6062      	str	r2, [r4, #4]
 8004146:	04d9      	lsls	r1, r3, #19
 8004148:	6922      	ldr	r2, [r4, #16]
 800414a:	6022      	str	r2, [r4, #0]
 800414c:	d504      	bpl.n	8004158 <__sflush_r+0x78>
 800414e:	1c42      	adds	r2, r0, #1
 8004150:	d101      	bne.n	8004156 <__sflush_r+0x76>
 8004152:	682b      	ldr	r3, [r5, #0]
 8004154:	b903      	cbnz	r3, 8004158 <__sflush_r+0x78>
 8004156:	6560      	str	r0, [r4, #84]	@ 0x54
 8004158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800415a:	602f      	str	r7, [r5, #0]
 800415c:	b1b9      	cbz	r1, 800418e <__sflush_r+0xae>
 800415e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004162:	4299      	cmp	r1, r3
 8004164:	d002      	beq.n	800416c <__sflush_r+0x8c>
 8004166:	4628      	mov	r0, r5
 8004168:	f7ff fbd4 	bl	8003914 <_free_r>
 800416c:	2300      	movs	r3, #0
 800416e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004170:	e00d      	b.n	800418e <__sflush_r+0xae>
 8004172:	2301      	movs	r3, #1
 8004174:	4628      	mov	r0, r5
 8004176:	47b0      	blx	r6
 8004178:	4602      	mov	r2, r0
 800417a:	1c50      	adds	r0, r2, #1
 800417c:	d1c9      	bne.n	8004112 <__sflush_r+0x32>
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0c6      	beq.n	8004112 <__sflush_r+0x32>
 8004184:	2b1d      	cmp	r3, #29
 8004186:	d001      	beq.n	800418c <__sflush_r+0xac>
 8004188:	2b16      	cmp	r3, #22
 800418a:	d11e      	bne.n	80041ca <__sflush_r+0xea>
 800418c:	602f      	str	r7, [r5, #0]
 800418e:	2000      	movs	r0, #0
 8004190:	e022      	b.n	80041d8 <__sflush_r+0xf8>
 8004192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004196:	b21b      	sxth	r3, r3
 8004198:	e01b      	b.n	80041d2 <__sflush_r+0xf2>
 800419a:	690f      	ldr	r7, [r1, #16]
 800419c:	2f00      	cmp	r7, #0
 800419e:	d0f6      	beq.n	800418e <__sflush_r+0xae>
 80041a0:	0793      	lsls	r3, r2, #30
 80041a2:	680e      	ldr	r6, [r1, #0]
 80041a4:	bf08      	it	eq
 80041a6:	694b      	ldreq	r3, [r1, #20]
 80041a8:	600f      	str	r7, [r1, #0]
 80041aa:	bf18      	it	ne
 80041ac:	2300      	movne	r3, #0
 80041ae:	eba6 0807 	sub.w	r8, r6, r7
 80041b2:	608b      	str	r3, [r1, #8]
 80041b4:	f1b8 0f00 	cmp.w	r8, #0
 80041b8:	dde9      	ble.n	800418e <__sflush_r+0xae>
 80041ba:	6a21      	ldr	r1, [r4, #32]
 80041bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80041be:	4643      	mov	r3, r8
 80041c0:	463a      	mov	r2, r7
 80041c2:	4628      	mov	r0, r5
 80041c4:	47b0      	blx	r6
 80041c6:	2800      	cmp	r0, #0
 80041c8:	dc08      	bgt.n	80041dc <__sflush_r+0xfc>
 80041ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041d2:	81a3      	strh	r3, [r4, #12]
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041dc:	4407      	add	r7, r0
 80041de:	eba8 0800 	sub.w	r8, r8, r0
 80041e2:	e7e7      	b.n	80041b4 <__sflush_r+0xd4>
 80041e4:	dfbffffe 	.word	0xdfbffffe

080041e8 <_fflush_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	690b      	ldr	r3, [r1, #16]
 80041ec:	4605      	mov	r5, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	b913      	cbnz	r3, 80041f8 <_fflush_r+0x10>
 80041f2:	2500      	movs	r5, #0
 80041f4:	4628      	mov	r0, r5
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	b118      	cbz	r0, 8004202 <_fflush_r+0x1a>
 80041fa:	6a03      	ldr	r3, [r0, #32]
 80041fc:	b90b      	cbnz	r3, 8004202 <_fflush_r+0x1a>
 80041fe:	f7ff fa55 	bl	80036ac <__sinit>
 8004202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f3      	beq.n	80041f2 <_fflush_r+0xa>
 800420a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800420c:	07d0      	lsls	r0, r2, #31
 800420e:	d404      	bmi.n	800421a <_fflush_r+0x32>
 8004210:	0599      	lsls	r1, r3, #22
 8004212:	d402      	bmi.n	800421a <_fflush_r+0x32>
 8004214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004216:	f7ff fb5c 	bl	80038d2 <__retarget_lock_acquire_recursive>
 800421a:	4628      	mov	r0, r5
 800421c:	4621      	mov	r1, r4
 800421e:	f7ff ff5f 	bl	80040e0 <__sflush_r>
 8004222:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004224:	07da      	lsls	r2, r3, #31
 8004226:	4605      	mov	r5, r0
 8004228:	d4e4      	bmi.n	80041f4 <_fflush_r+0xc>
 800422a:	89a3      	ldrh	r3, [r4, #12]
 800422c:	059b      	lsls	r3, r3, #22
 800422e:	d4e1      	bmi.n	80041f4 <_fflush_r+0xc>
 8004230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004232:	f7ff fb4f 	bl	80038d4 <__retarget_lock_release_recursive>
 8004236:	e7dd      	b.n	80041f4 <_fflush_r+0xc>

08004238 <fiprintf>:
 8004238:	b40e      	push	{r1, r2, r3}
 800423a:	b503      	push	{r0, r1, lr}
 800423c:	4601      	mov	r1, r0
 800423e:	ab03      	add	r3, sp, #12
 8004240:	4805      	ldr	r0, [pc, #20]	@ (8004258 <fiprintf+0x20>)
 8004242:	f853 2b04 	ldr.w	r2, [r3], #4
 8004246:	6800      	ldr	r0, [r0, #0]
 8004248:	9301      	str	r3, [sp, #4]
 800424a:	f000 f89d 	bl	8004388 <_vfiprintf_r>
 800424e:	b002      	add	sp, #8
 8004250:	f85d eb04 	ldr.w	lr, [sp], #4
 8004254:	b003      	add	sp, #12
 8004256:	4770      	bx	lr
 8004258:	20000018 	.word	0x20000018

0800425c <memmove>:
 800425c:	4288      	cmp	r0, r1
 800425e:	b510      	push	{r4, lr}
 8004260:	eb01 0402 	add.w	r4, r1, r2
 8004264:	d902      	bls.n	800426c <memmove+0x10>
 8004266:	4284      	cmp	r4, r0
 8004268:	4623      	mov	r3, r4
 800426a:	d807      	bhi.n	800427c <memmove+0x20>
 800426c:	1e43      	subs	r3, r0, #1
 800426e:	42a1      	cmp	r1, r4
 8004270:	d008      	beq.n	8004284 <memmove+0x28>
 8004272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800427a:	e7f8      	b.n	800426e <memmove+0x12>
 800427c:	4402      	add	r2, r0
 800427e:	4601      	mov	r1, r0
 8004280:	428a      	cmp	r2, r1
 8004282:	d100      	bne.n	8004286 <memmove+0x2a>
 8004284:	bd10      	pop	{r4, pc}
 8004286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800428a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800428e:	e7f7      	b.n	8004280 <memmove+0x24>

08004290 <_sbrk_r>:
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	4d06      	ldr	r5, [pc, #24]	@ (80042ac <_sbrk_r+0x1c>)
 8004294:	2300      	movs	r3, #0
 8004296:	4604      	mov	r4, r0
 8004298:	4608      	mov	r0, r1
 800429a:	602b      	str	r3, [r5, #0]
 800429c:	f7fc fd6e 	bl	8000d7c <_sbrk>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d102      	bne.n	80042aa <_sbrk_r+0x1a>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	b103      	cbz	r3, 80042aa <_sbrk_r+0x1a>
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
 80042ac:	200002c4 	.word	0x200002c4

080042b0 <memcpy>:
 80042b0:	440a      	add	r2, r1
 80042b2:	4291      	cmp	r1, r2
 80042b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042b8:	d100      	bne.n	80042bc <memcpy+0xc>
 80042ba:	4770      	bx	lr
 80042bc:	b510      	push	{r4, lr}
 80042be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042c6:	4291      	cmp	r1, r2
 80042c8:	d1f9      	bne.n	80042be <memcpy+0xe>
 80042ca:	bd10      	pop	{r4, pc}

080042cc <abort>:
 80042cc:	b508      	push	{r3, lr}
 80042ce:	2006      	movs	r0, #6
 80042d0:	f000 fa2e 	bl	8004730 <raise>
 80042d4:	2001      	movs	r0, #1
 80042d6:	f7fc fcd9 	bl	8000c8c <_exit>

080042da <_realloc_r>:
 80042da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042de:	4680      	mov	r8, r0
 80042e0:	4615      	mov	r5, r2
 80042e2:	460c      	mov	r4, r1
 80042e4:	b921      	cbnz	r1, 80042f0 <_realloc_r+0x16>
 80042e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042ea:	4611      	mov	r1, r2
 80042ec:	f7ff bb86 	b.w	80039fc <_malloc_r>
 80042f0:	b92a      	cbnz	r2, 80042fe <_realloc_r+0x24>
 80042f2:	f7ff fb0f 	bl	8003914 <_free_r>
 80042f6:	2400      	movs	r4, #0
 80042f8:	4620      	mov	r0, r4
 80042fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042fe:	f000 fa33 	bl	8004768 <_malloc_usable_size_r>
 8004302:	4285      	cmp	r5, r0
 8004304:	4606      	mov	r6, r0
 8004306:	d802      	bhi.n	800430e <_realloc_r+0x34>
 8004308:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800430c:	d8f4      	bhi.n	80042f8 <_realloc_r+0x1e>
 800430e:	4629      	mov	r1, r5
 8004310:	4640      	mov	r0, r8
 8004312:	f7ff fb73 	bl	80039fc <_malloc_r>
 8004316:	4607      	mov	r7, r0
 8004318:	2800      	cmp	r0, #0
 800431a:	d0ec      	beq.n	80042f6 <_realloc_r+0x1c>
 800431c:	42b5      	cmp	r5, r6
 800431e:	462a      	mov	r2, r5
 8004320:	4621      	mov	r1, r4
 8004322:	bf28      	it	cs
 8004324:	4632      	movcs	r2, r6
 8004326:	f7ff ffc3 	bl	80042b0 <memcpy>
 800432a:	4621      	mov	r1, r4
 800432c:	4640      	mov	r0, r8
 800432e:	f7ff faf1 	bl	8003914 <_free_r>
 8004332:	463c      	mov	r4, r7
 8004334:	e7e0      	b.n	80042f8 <_realloc_r+0x1e>

08004336 <__sfputc_r>:
 8004336:	6893      	ldr	r3, [r2, #8]
 8004338:	3b01      	subs	r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	b410      	push	{r4}
 800433e:	6093      	str	r3, [r2, #8]
 8004340:	da08      	bge.n	8004354 <__sfputc_r+0x1e>
 8004342:	6994      	ldr	r4, [r2, #24]
 8004344:	42a3      	cmp	r3, r4
 8004346:	db01      	blt.n	800434c <__sfputc_r+0x16>
 8004348:	290a      	cmp	r1, #10
 800434a:	d103      	bne.n	8004354 <__sfputc_r+0x1e>
 800434c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004350:	f000 b932 	b.w	80045b8 <__swbuf_r>
 8004354:	6813      	ldr	r3, [r2, #0]
 8004356:	1c58      	adds	r0, r3, #1
 8004358:	6010      	str	r0, [r2, #0]
 800435a:	7019      	strb	r1, [r3, #0]
 800435c:	4608      	mov	r0, r1
 800435e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004362:	4770      	bx	lr

08004364 <__sfputs_r>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	4606      	mov	r6, r0
 8004368:	460f      	mov	r7, r1
 800436a:	4614      	mov	r4, r2
 800436c:	18d5      	adds	r5, r2, r3
 800436e:	42ac      	cmp	r4, r5
 8004370:	d101      	bne.n	8004376 <__sfputs_r+0x12>
 8004372:	2000      	movs	r0, #0
 8004374:	e007      	b.n	8004386 <__sfputs_r+0x22>
 8004376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800437a:	463a      	mov	r2, r7
 800437c:	4630      	mov	r0, r6
 800437e:	f7ff ffda 	bl	8004336 <__sfputc_r>
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	d1f3      	bne.n	800436e <__sfputs_r+0xa>
 8004386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004388 <_vfiprintf_r>:
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438c:	460d      	mov	r5, r1
 800438e:	b09d      	sub	sp, #116	@ 0x74
 8004390:	4614      	mov	r4, r2
 8004392:	4698      	mov	r8, r3
 8004394:	4606      	mov	r6, r0
 8004396:	b118      	cbz	r0, 80043a0 <_vfiprintf_r+0x18>
 8004398:	6a03      	ldr	r3, [r0, #32]
 800439a:	b90b      	cbnz	r3, 80043a0 <_vfiprintf_r+0x18>
 800439c:	f7ff f986 	bl	80036ac <__sinit>
 80043a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043a2:	07d9      	lsls	r1, r3, #31
 80043a4:	d405      	bmi.n	80043b2 <_vfiprintf_r+0x2a>
 80043a6:	89ab      	ldrh	r3, [r5, #12]
 80043a8:	059a      	lsls	r2, r3, #22
 80043aa:	d402      	bmi.n	80043b2 <_vfiprintf_r+0x2a>
 80043ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043ae:	f7ff fa90 	bl	80038d2 <__retarget_lock_acquire_recursive>
 80043b2:	89ab      	ldrh	r3, [r5, #12]
 80043b4:	071b      	lsls	r3, r3, #28
 80043b6:	d501      	bpl.n	80043bc <_vfiprintf_r+0x34>
 80043b8:	692b      	ldr	r3, [r5, #16]
 80043ba:	b99b      	cbnz	r3, 80043e4 <_vfiprintf_r+0x5c>
 80043bc:	4629      	mov	r1, r5
 80043be:	4630      	mov	r0, r6
 80043c0:	f000 f938 	bl	8004634 <__swsetup_r>
 80043c4:	b170      	cbz	r0, 80043e4 <_vfiprintf_r+0x5c>
 80043c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043c8:	07dc      	lsls	r4, r3, #31
 80043ca:	d504      	bpl.n	80043d6 <_vfiprintf_r+0x4e>
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	b01d      	add	sp, #116	@ 0x74
 80043d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d6:	89ab      	ldrh	r3, [r5, #12]
 80043d8:	0598      	lsls	r0, r3, #22
 80043da:	d4f7      	bmi.n	80043cc <_vfiprintf_r+0x44>
 80043dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043de:	f7ff fa79 	bl	80038d4 <__retarget_lock_release_recursive>
 80043e2:	e7f3      	b.n	80043cc <_vfiprintf_r+0x44>
 80043e4:	2300      	movs	r3, #0
 80043e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80043e8:	2320      	movs	r3, #32
 80043ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80043f2:	2330      	movs	r3, #48	@ 0x30
 80043f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045a4 <_vfiprintf_r+0x21c>
 80043f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043fc:	f04f 0901 	mov.w	r9, #1
 8004400:	4623      	mov	r3, r4
 8004402:	469a      	mov	sl, r3
 8004404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004408:	b10a      	cbz	r2, 800440e <_vfiprintf_r+0x86>
 800440a:	2a25      	cmp	r2, #37	@ 0x25
 800440c:	d1f9      	bne.n	8004402 <_vfiprintf_r+0x7a>
 800440e:	ebba 0b04 	subs.w	fp, sl, r4
 8004412:	d00b      	beq.n	800442c <_vfiprintf_r+0xa4>
 8004414:	465b      	mov	r3, fp
 8004416:	4622      	mov	r2, r4
 8004418:	4629      	mov	r1, r5
 800441a:	4630      	mov	r0, r6
 800441c:	f7ff ffa2 	bl	8004364 <__sfputs_r>
 8004420:	3001      	adds	r0, #1
 8004422:	f000 80a7 	beq.w	8004574 <_vfiprintf_r+0x1ec>
 8004426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004428:	445a      	add	r2, fp
 800442a:	9209      	str	r2, [sp, #36]	@ 0x24
 800442c:	f89a 3000 	ldrb.w	r3, [sl]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 809f 	beq.w	8004574 <_vfiprintf_r+0x1ec>
 8004436:	2300      	movs	r3, #0
 8004438:	f04f 32ff 	mov.w	r2, #4294967295
 800443c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004440:	f10a 0a01 	add.w	sl, sl, #1
 8004444:	9304      	str	r3, [sp, #16]
 8004446:	9307      	str	r3, [sp, #28]
 8004448:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800444c:	931a      	str	r3, [sp, #104]	@ 0x68
 800444e:	4654      	mov	r4, sl
 8004450:	2205      	movs	r2, #5
 8004452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004456:	4853      	ldr	r0, [pc, #332]	@ (80045a4 <_vfiprintf_r+0x21c>)
 8004458:	f7fb feca 	bl	80001f0 <memchr>
 800445c:	9a04      	ldr	r2, [sp, #16]
 800445e:	b9d8      	cbnz	r0, 8004498 <_vfiprintf_r+0x110>
 8004460:	06d1      	lsls	r1, r2, #27
 8004462:	bf44      	itt	mi
 8004464:	2320      	movmi	r3, #32
 8004466:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800446a:	0713      	lsls	r3, r2, #28
 800446c:	bf44      	itt	mi
 800446e:	232b      	movmi	r3, #43	@ 0x2b
 8004470:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004474:	f89a 3000 	ldrb.w	r3, [sl]
 8004478:	2b2a      	cmp	r3, #42	@ 0x2a
 800447a:	d015      	beq.n	80044a8 <_vfiprintf_r+0x120>
 800447c:	9a07      	ldr	r2, [sp, #28]
 800447e:	4654      	mov	r4, sl
 8004480:	2000      	movs	r0, #0
 8004482:	f04f 0c0a 	mov.w	ip, #10
 8004486:	4621      	mov	r1, r4
 8004488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800448c:	3b30      	subs	r3, #48	@ 0x30
 800448e:	2b09      	cmp	r3, #9
 8004490:	d94b      	bls.n	800452a <_vfiprintf_r+0x1a2>
 8004492:	b1b0      	cbz	r0, 80044c2 <_vfiprintf_r+0x13a>
 8004494:	9207      	str	r2, [sp, #28]
 8004496:	e014      	b.n	80044c2 <_vfiprintf_r+0x13a>
 8004498:	eba0 0308 	sub.w	r3, r0, r8
 800449c:	fa09 f303 	lsl.w	r3, r9, r3
 80044a0:	4313      	orrs	r3, r2
 80044a2:	9304      	str	r3, [sp, #16]
 80044a4:	46a2      	mov	sl, r4
 80044a6:	e7d2      	b.n	800444e <_vfiprintf_r+0xc6>
 80044a8:	9b03      	ldr	r3, [sp, #12]
 80044aa:	1d19      	adds	r1, r3, #4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	9103      	str	r1, [sp, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bfbb      	ittet	lt
 80044b4:	425b      	neglt	r3, r3
 80044b6:	f042 0202 	orrlt.w	r2, r2, #2
 80044ba:	9307      	strge	r3, [sp, #28]
 80044bc:	9307      	strlt	r3, [sp, #28]
 80044be:	bfb8      	it	lt
 80044c0:	9204      	strlt	r2, [sp, #16]
 80044c2:	7823      	ldrb	r3, [r4, #0]
 80044c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80044c6:	d10a      	bne.n	80044de <_vfiprintf_r+0x156>
 80044c8:	7863      	ldrb	r3, [r4, #1]
 80044ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80044cc:	d132      	bne.n	8004534 <_vfiprintf_r+0x1ac>
 80044ce:	9b03      	ldr	r3, [sp, #12]
 80044d0:	1d1a      	adds	r2, r3, #4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	9203      	str	r2, [sp, #12]
 80044d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044da:	3402      	adds	r4, #2
 80044dc:	9305      	str	r3, [sp, #20]
 80044de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80045b4 <_vfiprintf_r+0x22c>
 80044e2:	7821      	ldrb	r1, [r4, #0]
 80044e4:	2203      	movs	r2, #3
 80044e6:	4650      	mov	r0, sl
 80044e8:	f7fb fe82 	bl	80001f0 <memchr>
 80044ec:	b138      	cbz	r0, 80044fe <_vfiprintf_r+0x176>
 80044ee:	9b04      	ldr	r3, [sp, #16]
 80044f0:	eba0 000a 	sub.w	r0, r0, sl
 80044f4:	2240      	movs	r2, #64	@ 0x40
 80044f6:	4082      	lsls	r2, r0
 80044f8:	4313      	orrs	r3, r2
 80044fa:	3401      	adds	r4, #1
 80044fc:	9304      	str	r3, [sp, #16]
 80044fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004502:	4829      	ldr	r0, [pc, #164]	@ (80045a8 <_vfiprintf_r+0x220>)
 8004504:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004508:	2206      	movs	r2, #6
 800450a:	f7fb fe71 	bl	80001f0 <memchr>
 800450e:	2800      	cmp	r0, #0
 8004510:	d03f      	beq.n	8004592 <_vfiprintf_r+0x20a>
 8004512:	4b26      	ldr	r3, [pc, #152]	@ (80045ac <_vfiprintf_r+0x224>)
 8004514:	bb1b      	cbnz	r3, 800455e <_vfiprintf_r+0x1d6>
 8004516:	9b03      	ldr	r3, [sp, #12]
 8004518:	3307      	adds	r3, #7
 800451a:	f023 0307 	bic.w	r3, r3, #7
 800451e:	3308      	adds	r3, #8
 8004520:	9303      	str	r3, [sp, #12]
 8004522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004524:	443b      	add	r3, r7
 8004526:	9309      	str	r3, [sp, #36]	@ 0x24
 8004528:	e76a      	b.n	8004400 <_vfiprintf_r+0x78>
 800452a:	fb0c 3202 	mla	r2, ip, r2, r3
 800452e:	460c      	mov	r4, r1
 8004530:	2001      	movs	r0, #1
 8004532:	e7a8      	b.n	8004486 <_vfiprintf_r+0xfe>
 8004534:	2300      	movs	r3, #0
 8004536:	3401      	adds	r4, #1
 8004538:	9305      	str	r3, [sp, #20]
 800453a:	4619      	mov	r1, r3
 800453c:	f04f 0c0a 	mov.w	ip, #10
 8004540:	4620      	mov	r0, r4
 8004542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004546:	3a30      	subs	r2, #48	@ 0x30
 8004548:	2a09      	cmp	r2, #9
 800454a:	d903      	bls.n	8004554 <_vfiprintf_r+0x1cc>
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0c6      	beq.n	80044de <_vfiprintf_r+0x156>
 8004550:	9105      	str	r1, [sp, #20]
 8004552:	e7c4      	b.n	80044de <_vfiprintf_r+0x156>
 8004554:	fb0c 2101 	mla	r1, ip, r1, r2
 8004558:	4604      	mov	r4, r0
 800455a:	2301      	movs	r3, #1
 800455c:	e7f0      	b.n	8004540 <_vfiprintf_r+0x1b8>
 800455e:	ab03      	add	r3, sp, #12
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	462a      	mov	r2, r5
 8004564:	4b12      	ldr	r3, [pc, #72]	@ (80045b0 <_vfiprintf_r+0x228>)
 8004566:	a904      	add	r1, sp, #16
 8004568:	4630      	mov	r0, r6
 800456a:	f3af 8000 	nop.w
 800456e:	4607      	mov	r7, r0
 8004570:	1c78      	adds	r0, r7, #1
 8004572:	d1d6      	bne.n	8004522 <_vfiprintf_r+0x19a>
 8004574:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004576:	07d9      	lsls	r1, r3, #31
 8004578:	d405      	bmi.n	8004586 <_vfiprintf_r+0x1fe>
 800457a:	89ab      	ldrh	r3, [r5, #12]
 800457c:	059a      	lsls	r2, r3, #22
 800457e:	d402      	bmi.n	8004586 <_vfiprintf_r+0x1fe>
 8004580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004582:	f7ff f9a7 	bl	80038d4 <__retarget_lock_release_recursive>
 8004586:	89ab      	ldrh	r3, [r5, #12]
 8004588:	065b      	lsls	r3, r3, #25
 800458a:	f53f af1f 	bmi.w	80043cc <_vfiprintf_r+0x44>
 800458e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004590:	e71e      	b.n	80043d0 <_vfiprintf_r+0x48>
 8004592:	ab03      	add	r3, sp, #12
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	462a      	mov	r2, r5
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <_vfiprintf_r+0x228>)
 800459a:	a904      	add	r1, sp, #16
 800459c:	4630      	mov	r0, r6
 800459e:	f7ff fc7f 	bl	8003ea0 <_printf_i>
 80045a2:	e7e4      	b.n	800456e <_vfiprintf_r+0x1e6>
 80045a4:	080049af 	.word	0x080049af
 80045a8:	080049b9 	.word	0x080049b9
 80045ac:	00000000 	.word	0x00000000
 80045b0:	08004365 	.word	0x08004365
 80045b4:	080049b5 	.word	0x080049b5

080045b8 <__swbuf_r>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	460e      	mov	r6, r1
 80045bc:	4614      	mov	r4, r2
 80045be:	4605      	mov	r5, r0
 80045c0:	b118      	cbz	r0, 80045ca <__swbuf_r+0x12>
 80045c2:	6a03      	ldr	r3, [r0, #32]
 80045c4:	b90b      	cbnz	r3, 80045ca <__swbuf_r+0x12>
 80045c6:	f7ff f871 	bl	80036ac <__sinit>
 80045ca:	69a3      	ldr	r3, [r4, #24]
 80045cc:	60a3      	str	r3, [r4, #8]
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	071a      	lsls	r2, r3, #28
 80045d2:	d501      	bpl.n	80045d8 <__swbuf_r+0x20>
 80045d4:	6923      	ldr	r3, [r4, #16]
 80045d6:	b943      	cbnz	r3, 80045ea <__swbuf_r+0x32>
 80045d8:	4621      	mov	r1, r4
 80045da:	4628      	mov	r0, r5
 80045dc:	f000 f82a 	bl	8004634 <__swsetup_r>
 80045e0:	b118      	cbz	r0, 80045ea <__swbuf_r+0x32>
 80045e2:	f04f 37ff 	mov.w	r7, #4294967295
 80045e6:	4638      	mov	r0, r7
 80045e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	6922      	ldr	r2, [r4, #16]
 80045ee:	1a98      	subs	r0, r3, r2
 80045f0:	6963      	ldr	r3, [r4, #20]
 80045f2:	b2f6      	uxtb	r6, r6
 80045f4:	4283      	cmp	r3, r0
 80045f6:	4637      	mov	r7, r6
 80045f8:	dc05      	bgt.n	8004606 <__swbuf_r+0x4e>
 80045fa:	4621      	mov	r1, r4
 80045fc:	4628      	mov	r0, r5
 80045fe:	f7ff fdf3 	bl	80041e8 <_fflush_r>
 8004602:	2800      	cmp	r0, #0
 8004604:	d1ed      	bne.n	80045e2 <__swbuf_r+0x2a>
 8004606:	68a3      	ldr	r3, [r4, #8]
 8004608:	3b01      	subs	r3, #1
 800460a:	60a3      	str	r3, [r4, #8]
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	6022      	str	r2, [r4, #0]
 8004612:	701e      	strb	r6, [r3, #0]
 8004614:	6962      	ldr	r2, [r4, #20]
 8004616:	1c43      	adds	r3, r0, #1
 8004618:	429a      	cmp	r2, r3
 800461a:	d004      	beq.n	8004626 <__swbuf_r+0x6e>
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	07db      	lsls	r3, r3, #31
 8004620:	d5e1      	bpl.n	80045e6 <__swbuf_r+0x2e>
 8004622:	2e0a      	cmp	r6, #10
 8004624:	d1df      	bne.n	80045e6 <__swbuf_r+0x2e>
 8004626:	4621      	mov	r1, r4
 8004628:	4628      	mov	r0, r5
 800462a:	f7ff fddd 	bl	80041e8 <_fflush_r>
 800462e:	2800      	cmp	r0, #0
 8004630:	d0d9      	beq.n	80045e6 <__swbuf_r+0x2e>
 8004632:	e7d6      	b.n	80045e2 <__swbuf_r+0x2a>

08004634 <__swsetup_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4b29      	ldr	r3, [pc, #164]	@ (80046dc <__swsetup_r+0xa8>)
 8004638:	4605      	mov	r5, r0
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	460c      	mov	r4, r1
 800463e:	b118      	cbz	r0, 8004648 <__swsetup_r+0x14>
 8004640:	6a03      	ldr	r3, [r0, #32]
 8004642:	b90b      	cbnz	r3, 8004648 <__swsetup_r+0x14>
 8004644:	f7ff f832 	bl	80036ac <__sinit>
 8004648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800464c:	0719      	lsls	r1, r3, #28
 800464e:	d422      	bmi.n	8004696 <__swsetup_r+0x62>
 8004650:	06da      	lsls	r2, r3, #27
 8004652:	d407      	bmi.n	8004664 <__swsetup_r+0x30>
 8004654:	2209      	movs	r2, #9
 8004656:	602a      	str	r2, [r5, #0]
 8004658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800465c:	81a3      	strh	r3, [r4, #12]
 800465e:	f04f 30ff 	mov.w	r0, #4294967295
 8004662:	e033      	b.n	80046cc <__swsetup_r+0x98>
 8004664:	0758      	lsls	r0, r3, #29
 8004666:	d512      	bpl.n	800468e <__swsetup_r+0x5a>
 8004668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800466a:	b141      	cbz	r1, 800467e <__swsetup_r+0x4a>
 800466c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004670:	4299      	cmp	r1, r3
 8004672:	d002      	beq.n	800467a <__swsetup_r+0x46>
 8004674:	4628      	mov	r0, r5
 8004676:	f7ff f94d 	bl	8003914 <_free_r>
 800467a:	2300      	movs	r3, #0
 800467c:	6363      	str	r3, [r4, #52]	@ 0x34
 800467e:	89a3      	ldrh	r3, [r4, #12]
 8004680:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004684:	81a3      	strh	r3, [r4, #12]
 8004686:	2300      	movs	r3, #0
 8004688:	6063      	str	r3, [r4, #4]
 800468a:	6923      	ldr	r3, [r4, #16]
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	f043 0308 	orr.w	r3, r3, #8
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	6923      	ldr	r3, [r4, #16]
 8004698:	b94b      	cbnz	r3, 80046ae <__swsetup_r+0x7a>
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a4:	d003      	beq.n	80046ae <__swsetup_r+0x7a>
 80046a6:	4621      	mov	r1, r4
 80046a8:	4628      	mov	r0, r5
 80046aa:	f000 f88b 	bl	80047c4 <__smakebuf_r>
 80046ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b2:	f013 0201 	ands.w	r2, r3, #1
 80046b6:	d00a      	beq.n	80046ce <__swsetup_r+0x9a>
 80046b8:	2200      	movs	r2, #0
 80046ba:	60a2      	str	r2, [r4, #8]
 80046bc:	6962      	ldr	r2, [r4, #20]
 80046be:	4252      	negs	r2, r2
 80046c0:	61a2      	str	r2, [r4, #24]
 80046c2:	6922      	ldr	r2, [r4, #16]
 80046c4:	b942      	cbnz	r2, 80046d8 <__swsetup_r+0xa4>
 80046c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80046ca:	d1c5      	bne.n	8004658 <__swsetup_r+0x24>
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
 80046ce:	0799      	lsls	r1, r3, #30
 80046d0:	bf58      	it	pl
 80046d2:	6962      	ldrpl	r2, [r4, #20]
 80046d4:	60a2      	str	r2, [r4, #8]
 80046d6:	e7f4      	b.n	80046c2 <__swsetup_r+0x8e>
 80046d8:	2000      	movs	r0, #0
 80046da:	e7f7      	b.n	80046cc <__swsetup_r+0x98>
 80046dc:	20000018 	.word	0x20000018

080046e0 <_raise_r>:
 80046e0:	291f      	cmp	r1, #31
 80046e2:	b538      	push	{r3, r4, r5, lr}
 80046e4:	4605      	mov	r5, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	d904      	bls.n	80046f4 <_raise_r+0x14>
 80046ea:	2316      	movs	r3, #22
 80046ec:	6003      	str	r3, [r0, #0]
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80046f6:	b112      	cbz	r2, 80046fe <_raise_r+0x1e>
 80046f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80046fc:	b94b      	cbnz	r3, 8004712 <_raise_r+0x32>
 80046fe:	4628      	mov	r0, r5
 8004700:	f000 f830 	bl	8004764 <_getpid_r>
 8004704:	4622      	mov	r2, r4
 8004706:	4601      	mov	r1, r0
 8004708:	4628      	mov	r0, r5
 800470a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800470e:	f000 b817 	b.w	8004740 <_kill_r>
 8004712:	2b01      	cmp	r3, #1
 8004714:	d00a      	beq.n	800472c <_raise_r+0x4c>
 8004716:	1c59      	adds	r1, r3, #1
 8004718:	d103      	bne.n	8004722 <_raise_r+0x42>
 800471a:	2316      	movs	r3, #22
 800471c:	6003      	str	r3, [r0, #0]
 800471e:	2001      	movs	r0, #1
 8004720:	e7e7      	b.n	80046f2 <_raise_r+0x12>
 8004722:	2100      	movs	r1, #0
 8004724:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004728:	4620      	mov	r0, r4
 800472a:	4798      	blx	r3
 800472c:	2000      	movs	r0, #0
 800472e:	e7e0      	b.n	80046f2 <_raise_r+0x12>

08004730 <raise>:
 8004730:	4b02      	ldr	r3, [pc, #8]	@ (800473c <raise+0xc>)
 8004732:	4601      	mov	r1, r0
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	f7ff bfd3 	b.w	80046e0 <_raise_r>
 800473a:	bf00      	nop
 800473c:	20000018 	.word	0x20000018

08004740 <_kill_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4d07      	ldr	r5, [pc, #28]	@ (8004760 <_kill_r+0x20>)
 8004744:	2300      	movs	r3, #0
 8004746:	4604      	mov	r4, r0
 8004748:	4608      	mov	r0, r1
 800474a:	4611      	mov	r1, r2
 800474c:	602b      	str	r3, [r5, #0]
 800474e:	f7fc fa8d 	bl	8000c6c <_kill>
 8004752:	1c43      	adds	r3, r0, #1
 8004754:	d102      	bne.n	800475c <_kill_r+0x1c>
 8004756:	682b      	ldr	r3, [r5, #0]
 8004758:	b103      	cbz	r3, 800475c <_kill_r+0x1c>
 800475a:	6023      	str	r3, [r4, #0]
 800475c:	bd38      	pop	{r3, r4, r5, pc}
 800475e:	bf00      	nop
 8004760:	200002c4 	.word	0x200002c4

08004764 <_getpid_r>:
 8004764:	f7fc ba7a 	b.w	8000c5c <_getpid>

08004768 <_malloc_usable_size_r>:
 8004768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800476c:	1f18      	subs	r0, r3, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	bfbc      	itt	lt
 8004772:	580b      	ldrlt	r3, [r1, r0]
 8004774:	18c0      	addlt	r0, r0, r3
 8004776:	4770      	bx	lr

08004778 <__swhatbuf_r>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	460c      	mov	r4, r1
 800477c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004780:	2900      	cmp	r1, #0
 8004782:	b096      	sub	sp, #88	@ 0x58
 8004784:	4615      	mov	r5, r2
 8004786:	461e      	mov	r6, r3
 8004788:	da0d      	bge.n	80047a6 <__swhatbuf_r+0x2e>
 800478a:	89a3      	ldrh	r3, [r4, #12]
 800478c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004790:	f04f 0100 	mov.w	r1, #0
 8004794:	bf14      	ite	ne
 8004796:	2340      	movne	r3, #64	@ 0x40
 8004798:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800479c:	2000      	movs	r0, #0
 800479e:	6031      	str	r1, [r6, #0]
 80047a0:	602b      	str	r3, [r5, #0]
 80047a2:	b016      	add	sp, #88	@ 0x58
 80047a4:	bd70      	pop	{r4, r5, r6, pc}
 80047a6:	466a      	mov	r2, sp
 80047a8:	f000 f848 	bl	800483c <_fstat_r>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	dbec      	blt.n	800478a <__swhatbuf_r+0x12>
 80047b0:	9901      	ldr	r1, [sp, #4]
 80047b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80047b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80047ba:	4259      	negs	r1, r3
 80047bc:	4159      	adcs	r1, r3
 80047be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047c2:	e7eb      	b.n	800479c <__swhatbuf_r+0x24>

080047c4 <__smakebuf_r>:
 80047c4:	898b      	ldrh	r3, [r1, #12]
 80047c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047c8:	079d      	lsls	r5, r3, #30
 80047ca:	4606      	mov	r6, r0
 80047cc:	460c      	mov	r4, r1
 80047ce:	d507      	bpl.n	80047e0 <__smakebuf_r+0x1c>
 80047d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	6123      	str	r3, [r4, #16]
 80047d8:	2301      	movs	r3, #1
 80047da:	6163      	str	r3, [r4, #20]
 80047dc:	b003      	add	sp, #12
 80047de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e0:	ab01      	add	r3, sp, #4
 80047e2:	466a      	mov	r2, sp
 80047e4:	f7ff ffc8 	bl	8004778 <__swhatbuf_r>
 80047e8:	9f00      	ldr	r7, [sp, #0]
 80047ea:	4605      	mov	r5, r0
 80047ec:	4639      	mov	r1, r7
 80047ee:	4630      	mov	r0, r6
 80047f0:	f7ff f904 	bl	80039fc <_malloc_r>
 80047f4:	b948      	cbnz	r0, 800480a <__smakebuf_r+0x46>
 80047f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047fa:	059a      	lsls	r2, r3, #22
 80047fc:	d4ee      	bmi.n	80047dc <__smakebuf_r+0x18>
 80047fe:	f023 0303 	bic.w	r3, r3, #3
 8004802:	f043 0302 	orr.w	r3, r3, #2
 8004806:	81a3      	strh	r3, [r4, #12]
 8004808:	e7e2      	b.n	80047d0 <__smakebuf_r+0xc>
 800480a:	89a3      	ldrh	r3, [r4, #12]
 800480c:	6020      	str	r0, [r4, #0]
 800480e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	9b01      	ldr	r3, [sp, #4]
 8004816:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800481a:	b15b      	cbz	r3, 8004834 <__smakebuf_r+0x70>
 800481c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004820:	4630      	mov	r0, r6
 8004822:	f000 f81d 	bl	8004860 <_isatty_r>
 8004826:	b128      	cbz	r0, 8004834 <__smakebuf_r+0x70>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	f023 0303 	bic.w	r3, r3, #3
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	81a3      	strh	r3, [r4, #12]
 8004834:	89a3      	ldrh	r3, [r4, #12]
 8004836:	431d      	orrs	r5, r3
 8004838:	81a5      	strh	r5, [r4, #12]
 800483a:	e7cf      	b.n	80047dc <__smakebuf_r+0x18>

0800483c <_fstat_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4d07      	ldr	r5, [pc, #28]	@ (800485c <_fstat_r+0x20>)
 8004840:	2300      	movs	r3, #0
 8004842:	4604      	mov	r4, r0
 8004844:	4608      	mov	r0, r1
 8004846:	4611      	mov	r1, r2
 8004848:	602b      	str	r3, [r5, #0]
 800484a:	f7fc fa6f 	bl	8000d2c <_fstat>
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	d102      	bne.n	8004858 <_fstat_r+0x1c>
 8004852:	682b      	ldr	r3, [r5, #0]
 8004854:	b103      	cbz	r3, 8004858 <_fstat_r+0x1c>
 8004856:	6023      	str	r3, [r4, #0]
 8004858:	bd38      	pop	{r3, r4, r5, pc}
 800485a:	bf00      	nop
 800485c:	200002c4 	.word	0x200002c4

08004860 <_isatty_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4d06      	ldr	r5, [pc, #24]	@ (800487c <_isatty_r+0x1c>)
 8004864:	2300      	movs	r3, #0
 8004866:	4604      	mov	r4, r0
 8004868:	4608      	mov	r0, r1
 800486a:	602b      	str	r3, [r5, #0]
 800486c:	f7fc fa6e 	bl	8000d4c <_isatty>
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	d102      	bne.n	800487a <_isatty_r+0x1a>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	b103      	cbz	r3, 800487a <_isatty_r+0x1a>
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	bd38      	pop	{r3, r4, r5, pc}
 800487c:	200002c4 	.word	0x200002c4

08004880 <_init>:
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	bf00      	nop
 8004884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004886:	bc08      	pop	{r3}
 8004888:	469e      	mov	lr, r3
 800488a:	4770      	bx	lr

0800488c <_fini>:
 800488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488e:	bf00      	nop
 8004890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004892:	bc08      	pop	{r3}
 8004894:	469e      	mov	lr, r3
 8004896:	4770      	bx	lr
