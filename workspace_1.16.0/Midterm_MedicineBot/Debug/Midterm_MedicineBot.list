
Midterm_MedicineBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08007840  08007840  00008840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007934  08007934  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  08007934  08007934  00008934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800793c  0800793c  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800793c  0800793c  0000893c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007940  08007940  00008940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007944  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d5c  20000080  080079c4  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ddc  080079c4  00009ddc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016be2  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003272  00000000  00000000  0001fc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00022f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb3  00000000  00000000  00024330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003118  00000000  00000000  000252e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b18  00000000  00000000  000283fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000988ef  00000000  00000000  0003ef13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7802  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b44  00000000  00000000  000d7848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000dd38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007828 	.word	0x08007828

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08007828 	.word	0x08007828

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	0000      	movs	r0, r0
	...

08000d60 <measureDistance>:
// MULTITASKING handles
osThreadId_t measureDistanceHandle;
osThreadId_t detectLineHandle;
osThreadId_t buzzerMelodyHandle;

static void measureDistance() {
 8000d60:	b598      	push	{r3, r4, r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	// This function keeps running all the time
	while (1) {
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d6a:	483b      	ldr	r0, [pc, #236]	@ (8000e58 <measureDistance+0xf8>)
 8000d6c:	f001 f9f6 	bl	800215c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d70:	4b3a      	ldr	r3, [pc, #232]	@ (8000e5c <measureDistance+0xfc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2200      	movs	r2, #0
 8000d76:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000d78:	bf00      	nop
 8000d7a:	4b38      	ldr	r3, [pc, #224]	@ (8000e5c <measureDistance+0xfc>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d80:	2b09      	cmp	r3, #9
 8000d82:	d9fa      	bls.n	8000d7a <measureDistance+0x1a>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8a:	4833      	ldr	r0, [pc, #204]	@ (8000e58 <measureDistance+0xf8>)
 8000d8c:	f001 f9e6 	bl	800215c <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000d90:	f000 ff36 	bl	8001c00 <HAL_GetTick>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4a32      	ldr	r2, [pc, #200]	@ (8000e60 <measureDistance+0x100>)
 8000d98:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000d9a:	bf00      	nop
 8000d9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da0:	482d      	ldr	r0, [pc, #180]	@ (8000e58 <measureDistance+0xf8>)
 8000da2:	f001 f9c3 	bl	800212c <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d108      	bne.n	8000dbe <measureDistance+0x5e>
 8000dac:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <measureDistance+0x100>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f103 040a 	add.w	r4, r3, #10
 8000db4:	f000 ff24 	bl	8001c00 <HAL_GetTick>
 8000db8:	4603      	mov	r3, r0
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	d8ee      	bhi.n	8000d9c <measureDistance+0x3c>
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000dbe:	4b27      	ldr	r3, [pc, #156]	@ (8000e5c <measureDistance+0xfc>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc4:	4a27      	ldr	r2, [pc, #156]	@ (8000e64 <measureDistance+0x104>)
 8000dc6:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000dc8:	f000 ff1a 	bl	8001c00 <HAL_GetTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4a24      	ldr	r2, [pc, #144]	@ (8000e60 <measureDistance+0x100>)
 8000dd0:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000dd2:	bf00      	nop
 8000dd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dd8:	481f      	ldr	r0, [pc, #124]	@ (8000e58 <measureDistance+0xf8>)
 8000dda:	f001 f9a7 	bl	800212c <HAL_GPIO_ReadPin>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d008      	beq.n	8000df6 <measureDistance+0x96>
 8000de4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <measureDistance+0x100>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000dec:	f000 ff08 	bl	8001c00 <HAL_GetTick>
 8000df0:	4603      	mov	r3, r0
 8000df2:	429c      	cmp	r4, r3
 8000df4:	d8ee      	bhi.n	8000dd4 <measureDistance+0x74>
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <measureDistance+0xfc>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8000e68 <measureDistance+0x108>)
 8000dfe:	6013      	str	r3, [r2, #0]

	Distance = (Value2-Value1)* 0.034/2;
 8000e00:	4b19      	ldr	r3, [pc, #100]	@ (8000e68 <measureDistance+0x108>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <measureDistance+0x104>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb82 	bl	8000514 <__aeabi_ui2d>
 8000e10:	a30f      	add	r3, pc, #60	@ (adr r3, 8000e50 <measureDistance+0xf0>)
 8000e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e16:	f7ff fbf7 	bl	8000608 <__aeabi_dmul>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e2a:	f7ff fd17 	bl	800085c <__aeabi_ddiv>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fdf9 	bl	8000a2c <__aeabi_d2uiz>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <measureDistance+0x10c>)
 8000e40:	801a      	strh	r2, [r3, #0]
	osDelay(10);
 8000e42:	200a      	movs	r0, #10
 8000e44:	f003 fbac 	bl	80045a0 <osDelay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000e48:	e78c      	b.n	8000d64 <measureDistance+0x4>
 8000e4a:	bf00      	nop
 8000e4c:	f3af 8000 	nop.w
 8000e50:	b020c49c 	.word	0xb020c49c
 8000e54:	3fa16872 	.word	0x3fa16872
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	2000009c 	.word	0x2000009c
 8000e60:	200001c0 	.word	0x200001c0
 8000e64:	200001c4 	.word	0x200001c4
 8000e68:	200001c8 	.word	0x200001c8
 8000e6c:	200001cc 	.word	0x200001cc

08000e70 <detectLine>:
	}
}

static void detectLine() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	// This function keeps running all the time
	while (1) {
		l1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8000e74:	2140      	movs	r1, #64	@ 0x40
 8000e76:	4817      	ldr	r0, [pc, #92]	@ (8000ed4 <detectLine+0x64>)
 8000e78:	f001 f958 	bl	800212c <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <detectLine+0x68>)
 8000e82:	601a      	str	r2, [r3, #0]
		l2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8000e84:	2180      	movs	r1, #128	@ 0x80
 8000e86:	4813      	ldr	r0, [pc, #76]	@ (8000ed4 <detectLine+0x64>)
 8000e88:	f001 f950 	bl	800212c <HAL_GPIO_ReadPin>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <detectLine+0x6c>)
 8000e92:	601a      	str	r2, [r3, #0]
		l3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8000e94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e98:	480e      	ldr	r0, [pc, #56]	@ (8000ed4 <detectLine+0x64>)
 8000e9a:	f001 f947 	bl	800212c <HAL_GPIO_ReadPin>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <detectLine+0x70>)
 8000ea4:	601a      	str	r2, [r3, #0]
		l4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8000ea6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eaa:	480a      	ldr	r0, [pc, #40]	@ (8000ed4 <detectLine+0x64>)
 8000eac:	f001 f93e 	bl	800212c <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <detectLine+0x74>)
 8000eb6:	601a      	str	r2, [r3, #0]
		l5 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8000eb8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ebc:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <detectLine+0x64>)
 8000ebe:	f001 f935 	bl	800212c <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <detectLine+0x78>)
 8000ec8:	601a      	str	r2, [r3, #0]
		osDelay(5);
 8000eca:	2005      	movs	r0, #5
 8000ecc:	f003 fb68 	bl	80045a0 <osDelay>
		l1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8000ed0:	bf00      	nop
 8000ed2:	e7cf      	b.n	8000e74 <detectLine+0x4>
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	200001d0 	.word	0x200001d0
 8000edc:	200001d4 	.word	0x200001d4
 8000ee0:	200001d8 	.word	0x200001d8
 8000ee4:	200001dc 	.word	0x200001dc
 8000ee8:	200001e0 	.word	0x200001e0

08000eec <Tone>:
	}
}

static void Tone(uint32_t Frequency, uint32_t Duration, int Volume) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
	TIM2->ARR = (1000000UL / Frequency) - 1; //Setting the PWM Frequency
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f34 <Tone+0x48>)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f04:	3b01      	subs	r3, #1
 8000f06:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM2->CCR1 = (TIM2->ARR / 2 * Volume / 100); //Setting duty cycle to 50% (volume depending on frequency)
 8000f08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0e:	085b      	lsrs	r3, r3, #1
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f1a:	4907      	ldr	r1, [pc, #28]	@ (8000f38 <Tone+0x4c>)
 8000f1c:	fba1 1303 	umull	r1, r3, r1, r3
 8000f20:	095b      	lsrs	r3, r3, #5
 8000f22:	6353      	str	r3, [r2, #52]	@ 0x34
	HAL_Delay(Duration);
 8000f24:	68b8      	ldr	r0, [r7, #8]
 8000f26:	f000 fe77 	bl	8001c18 <HAL_Delay>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	000f4240 	.word	0x000f4240
 8000f38:	51eb851f 	.word	0x51eb851f

08000f3c <noTone>:

static void noTone() {
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	TIM2->CCR1 = 0; //Mute by setting duty cycle 0%
 8000f40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <buzzerMelody>:

static void buzzerMelody() {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	while (1) {
		Tone(OctaveFourCMajor[NoteIndex++], 300, 60);
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <buzzerMelody+0x40>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	b2d1      	uxtb	r1, r2
 8000f60:	4a0c      	ldr	r2, [pc, #48]	@ (8000f94 <buzzerMelody+0x40>)
 8000f62:	7011      	strb	r1, [r2, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <buzzerMelody+0x44>)
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	223c      	movs	r2, #60	@ 0x3c
 8000f6e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ffba 	bl	8000eec <Tone>
		if (NoteIndex == 8) {
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <buzzerMelody+0x40>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d1eb      	bne.n	8000f58 <buzzerMelody+0x4>
		  NoteIndex = 0;
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <buzzerMelody+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
		  noTone();
 8000f86:	f7ff ffd9 	bl	8000f3c <noTone>
		  osDelay(3000);
 8000f8a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f8e:	f003 fb07 	bl	80045a0 <osDelay>
		Tone(OctaveFourCMajor[NoteIndex++], 300, 60);
 8000f92:	e7e1      	b.n	8000f58 <buzzerMelody+0x4>
 8000f94:	200001e4 	.word	0x200001e4
 8000f98:	20000000 	.word	0x20000000

08000f9c <driveCar>:
static void detectLine();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void driveCar(float powerL, float powerR, int direction) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000fa6:	edc7 0a02 	vstr	s1, [r7, #8]
 8000faa:	6078      	str	r0, [r7, #4]
	//Change the DIRECTION of the car
	switch (direction) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <driveCar+0x1e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d014      	beq.n	8000fe2 <driveCar+0x46>
 8000fb8:	e027      	b.n	800100a <driveCar+0x6e>
	case 0: //Reverse direction
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); //LEFT pair REVERSE off
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4825      	ldr	r0, [pc, #148]	@ (8001054 <driveCar+0xb8>)
 8000fc0:	f001 f8cc 	bl	800215c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); //LEFT pair FORWARD on
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	4822      	ldr	r0, [pc, #136]	@ (8001054 <driveCar+0xb8>)
 8000fca:	f001 f8c7 	bl	800215c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); //RIGHT pair reverse off
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4820      	ldr	r0, [pc, #128]	@ (8001054 <driveCar+0xb8>)
 8000fd4:	f001 f8c2 	bl	800215c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); //RIGHT pair forward on
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2108      	movs	r1, #8
 8000fdc:	481d      	ldr	r0, [pc, #116]	@ (8001054 <driveCar+0xb8>)
 8000fde:	f001 f8bd 	bl	800215c <HAL_GPIO_WritePin>
	case 1: //Forward direction
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); //LEFT pair REVERSE off
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	481b      	ldr	r0, [pc, #108]	@ (8001054 <driveCar+0xb8>)
 8000fe8:	f001 f8b8 	bl	800215c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); //LEFT pair FORWARD on
 8000fec:	2200      	movs	r2, #0
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4818      	ldr	r0, [pc, #96]	@ (8001054 <driveCar+0xb8>)
 8000ff2:	f001 f8b3 	bl	800215c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); //RIGHT pair reverse off
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4816      	ldr	r0, [pc, #88]	@ (8001054 <driveCar+0xb8>)
 8000ffc:	f001 f8ae 	bl	800215c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); //RIGHT pair forward on
 8001000:	2201      	movs	r2, #1
 8001002:	2108      	movs	r1, #8
 8001004:	4813      	ldr	r0, [pc, #76]	@ (8001054 <driveCar+0xb8>)
 8001006:	f001 f8a9 	bl	800215c <HAL_GPIO_WritePin>
	}
	//Change the POWER OUTPUT of the car
	TIM3->CCR1 = 4095 * (powerL/100); //Duty time output per 100% power for LEFT pair
 800100a:	ed97 7a03 	vldr	s14, [r7, #12]
 800100e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001058 <driveCar+0xbc>
 8001012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001016:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800105c <driveCar+0xc0>
 800101a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <driveCar+0xc4>)
 8001020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001024:	ee17 2a90 	vmov	r2, s15
 8001028:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 4095 * (powerR/100); //Duty time output per 100% power for RIGHT pair
 800102a:	ed97 7a02 	vldr	s14, [r7, #8]
 800102e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001058 <driveCar+0xbc>
 8001032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001036:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800105c <driveCar+0xc0>
 800103a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103e:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <driveCar+0xc4>)
 8001040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001044:	ee17 2a90 	vmov	r2, s15
 8001048:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40020800 	.word	0x40020800
 8001058:	42c80000 	.word	0x42c80000
 800105c:	457ff000 	.word	0x457ff000
 8001060:	40000400 	.word	0x40000400

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b092      	sub	sp, #72	@ 0x48
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106a:	f000 fd93 	bl	8001b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106e:	f000 f889 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001072:	f000 fa61 	bl	8001538 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001076:	f000 fa35 	bl	80014e4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800107a:	f000 f8eb 	bl	8001254 <MX_TIM1_Init>
  MX_TIM3_Init();
 800107e:	f000 f9af 	bl	80013e0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001082:	f000 f937 	bl	80012f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Initialization for BUZZER
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //For BUZZER
 8001086:	2100      	movs	r1, #0
 8001088:	482e      	ldr	r0, [pc, #184]	@ (8001144 <main+0xe0>)
 800108a:	f001 feb1 	bl	8002df0 <HAL_TIM_PWM_Start>
  // Initialization for WHEEL MOTORS
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //For LEFT PWM
 800108e:	2100      	movs	r1, #0
 8001090:	482d      	ldr	r0, [pc, #180]	@ (8001148 <main+0xe4>)
 8001092:	f001 fead 	bl	8002df0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //For RIGHT PWM
 8001096:	2104      	movs	r1, #4
 8001098:	482b      	ldr	r0, [pc, #172]	@ (8001148 <main+0xe4>)
 800109a:	f001 fea9 	bl	8002df0 <HAL_TIM_PWM_Start>
  driveCar(80, 80, 1);
 800109e:	2001      	movs	r0, #1
 80010a0:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 800114c <main+0xe8>
 80010a4:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800114c <main+0xe8>
 80010a8:	f7ff ff78 	bl	8000f9c <driveCar>
  // Initialization for ULTRASONIC SENSOR
  HAL_TIM_Base_Start(&htim1);
 80010ac:	4828      	ldr	r0, [pc, #160]	@ (8001150 <main+0xec>)
 80010ae:	f001 fd89 	bl	8002bc4 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); //pulls TRIG pin to LOW
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b8:	4826      	ldr	r0, [pc, #152]	@ (8001154 <main+0xf0>)
 80010ba:	f001 f84f 	bl	800215c <HAL_GPIO_WritePin>
  // Variables
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010be:	f003 f993 	bl	80043e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010c2:	4a25      	ldr	r2, [pc, #148]	@ (8001158 <main+0xf4>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4825      	ldr	r0, [pc, #148]	@ (800115c <main+0xf8>)
 80010c8:	f003 f9d8 	bl	800447c <osThreadNew>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a24      	ldr	r2, [pc, #144]	@ (8001160 <main+0xfc>)
 80010d0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  const osThreadAttr_t measureDistance_attributes = {
 80010d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d6:	2224      	movs	r2, #36	@ 0x24
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f005 ff24 	bl	8006f28 <memset>
 80010e0:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <main+0x100>)
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80010e8:	2318      	movs	r3, #24
 80010ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		  .name = "measureDistance",
		  .priority = (osPriority_t) osPriorityNormal,
		  .stack_size = 128
  };

  const osThreadAttr_t detectLine_attributes = {
 80010ec:	463b      	mov	r3, r7
 80010ee:	2224      	movs	r2, #36	@ 0x24
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f005 ff18 	bl	8006f28 <memset>
 80010f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <main+0x104>)
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	2318      	movs	r3, #24
 8001102:	61bb      	str	r3, [r7, #24]
		  .name = "buzzerMelody",
		  .priority = (osPriority_t) osPriorityNormal,
		  .stack_size = 128
  };

  measureDistanceHandle = osThreadNew(measureDistance, NULL, &measureDistance_attributes);
 8001104:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001108:	461a      	mov	r2, r3
 800110a:	2100      	movs	r1, #0
 800110c:	4817      	ldr	r0, [pc, #92]	@ (800116c <main+0x108>)
 800110e:	f003 f9b5 	bl	800447c <osThreadNew>
 8001112:	4603      	mov	r3, r0
 8001114:	4a16      	ldr	r2, [pc, #88]	@ (8001170 <main+0x10c>)
 8001116:	6013      	str	r3, [r2, #0]
  detectLineHandle = osThreadNew(detectLine, NULL, &detectLine_attributes);
 8001118:	463b      	mov	r3, r7
 800111a:	461a      	mov	r2, r3
 800111c:	2100      	movs	r1, #0
 800111e:	4815      	ldr	r0, [pc, #84]	@ (8001174 <main+0x110>)
 8001120:	f003 f9ac 	bl	800447c <osThreadNew>
 8001124:	4603      	mov	r3, r0
 8001126:	4a14      	ldr	r2, [pc, #80]	@ (8001178 <main+0x114>)
 8001128:	6013      	str	r3, [r2, #0]
  buzzerMelodyHandle = osThreadNew(buzzerMelody, NULL, &detectLine_attributes);
 800112a:	463b      	mov	r3, r7
 800112c:	461a      	mov	r2, r3
 800112e:	2100      	movs	r1, #0
 8001130:	4812      	ldr	r0, [pc, #72]	@ (800117c <main+0x118>)
 8001132:	f003 f9a3 	bl	800447c <osThreadNew>
 8001136:	4603      	mov	r3, r0
 8001138:	4a11      	ldr	r2, [pc, #68]	@ (8001180 <main+0x11c>)
 800113a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800113c:	f003 f978 	bl	8004430 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <main+0xdc>
 8001144:	200000e4 	.word	0x200000e4
 8001148:	2000012c 	.word	0x2000012c
 800114c:	42a00000 	.word	0x42a00000
 8001150:	2000009c 	.word	0x2000009c
 8001154:	40020000 	.word	0x40020000
 8001158:	080078c4 	.word	0x080078c4
 800115c:	08001675 	.word	0x08001675
 8001160:	200001bc 	.word	0x200001bc
 8001164:	0800784c 	.word	0x0800784c
 8001168:	0800785c 	.word	0x0800785c
 800116c:	08000d61 	.word	0x08000d61
 8001170:	200001e8 	.word	0x200001e8
 8001174:	08000e71 	.word	0x08000e71
 8001178:	200001ec 	.word	0x200001ec
 800117c:	08000f55 	.word	0x08000f55
 8001180:	200001f0 	.word	0x200001f0

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b094      	sub	sp, #80	@ 0x50
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0320 	add.w	r3, r7, #32
 800118e:	2230      	movs	r2, #48	@ 0x30
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f005 fec8 	bl	8006f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	4b27      	ldr	r3, [pc, #156]	@ (800124c <SystemClock_Config+0xc8>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	4a26      	ldr	r2, [pc, #152]	@ (800124c <SystemClock_Config+0xc8>)
 80011b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b8:	4b24      	ldr	r3, [pc, #144]	@ (800124c <SystemClock_Config+0xc8>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <SystemClock_Config+0xcc>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a20      	ldr	r2, [pc, #128]	@ (8001250 <SystemClock_Config+0xcc>)
 80011ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <SystemClock_Config+0xcc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ea:	2302      	movs	r3, #2
 80011ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011f4:	2304      	movs	r3, #4
 80011f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011f8:	2348      	movs	r3, #72	@ 0x48
 80011fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001200:	2304      	movs	r3, #4
 8001202:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001204:	f107 0320 	add.w	r3, r7, #32
 8001208:	4618      	mov	r0, r3
 800120a:	f000 ffc1 	bl	8002190 <HAL_RCC_OscConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001214:	f000 fa86 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001218:	230f      	movs	r3, #15
 800121a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121c:	2302      	movs	r3, #2
 800121e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001224:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2102      	movs	r1, #2
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fa23 	bl	8002680 <HAL_RCC_ClockConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001240:	f000 fa70 	bl	8001724 <Error_Handler>
  }
}
 8001244:	bf00      	nop
 8001246:	3750      	adds	r7, #80	@ 0x50
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40007000 	.word	0x40007000

08001254 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001270:	4b1e      	ldr	r3, [pc, #120]	@ (80012ec <MX_TIM1_Init+0x98>)
 8001272:	4a1f      	ldr	r2, [pc, #124]	@ (80012f0 <MX_TIM1_Init+0x9c>)
 8001274:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001276:	4b1d      	ldr	r3, [pc, #116]	@ (80012ec <MX_TIM1_Init+0x98>)
 8001278:	2247      	movs	r2, #71	@ 0x47
 800127a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <MX_TIM1_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001282:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <MX_TIM1_Init+0x98>)
 8001284:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001288:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128a:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <MX_TIM1_Init+0x98>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001290:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <MX_TIM1_Init+0x98>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <MX_TIM1_Init+0x98>)
 8001298:	2280      	movs	r2, #128	@ 0x80
 800129a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800129c:	4813      	ldr	r0, [pc, #76]	@ (80012ec <MX_TIM1_Init+0x98>)
 800129e:	f001 fc41 	bl	8002b24 <HAL_TIM_Base_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80012a8:	f000 fa3c 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4619      	mov	r1, r3
 80012b8:	480c      	ldr	r0, [pc, #48]	@ (80012ec <MX_TIM1_Init+0x98>)
 80012ba:	f001 fffb 	bl	80032b4 <HAL_TIM_ConfigClockSource>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80012c4:	f000 fa2e 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	@ (80012ec <MX_TIM1_Init+0x98>)
 80012d6:	f002 fbb5 	bl	8003a44 <HAL_TIMEx_MasterConfigSynchronization>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012e0:	f000 fa20 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000009c 	.word	0x2000009c
 80012f0:	40010000 	.word	0x40010000

080012f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	@ 0x38
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001324:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <MX_TIM2_Init+0xe8>)
 8001326:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800132a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800132c:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <MX_TIM2_Init+0xe8>)
 800132e:	2247      	movs	r2, #71	@ 0x47
 8001330:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b2a      	ldr	r3, [pc, #168]	@ (80013dc <MX_TIM2_Init+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001338:	4b28      	ldr	r3, [pc, #160]	@ (80013dc <MX_TIM2_Init+0xe8>)
 800133a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800133e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <MX_TIM2_Init+0xe8>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001346:	4b25      	ldr	r3, [pc, #148]	@ (80013dc <MX_TIM2_Init+0xe8>)
 8001348:	2280      	movs	r2, #128	@ 0x80
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800134c:	4823      	ldr	r0, [pc, #140]	@ (80013dc <MX_TIM2_Init+0xe8>)
 800134e:	f001 fbe9 	bl	8002b24 <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001358:	f000 f9e4 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001366:	4619      	mov	r1, r3
 8001368:	481c      	ldr	r0, [pc, #112]	@ (80013dc <MX_TIM2_Init+0xe8>)
 800136a:	f001 ffa3 	bl	80032b4 <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001374:	f000 f9d6 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001378:	4818      	ldr	r0, [pc, #96]	@ (80013dc <MX_TIM2_Init+0xe8>)
 800137a:	f001 fcdf 	bl	8002d3c <HAL_TIM_PWM_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001384:	f000 f9ce 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001390:	f107 0320 	add.w	r3, r7, #32
 8001394:	4619      	mov	r1, r3
 8001396:	4811      	ldr	r0, [pc, #68]	@ (80013dc <MX_TIM2_Init+0xe8>)
 8001398:	f002 fb54 	bl	8003a44 <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013a2:	f000 f9bf 	bl	8001724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a6:	2360      	movs	r3, #96	@ 0x60
 80013a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	@ (80013dc <MX_TIM2_Init+0xe8>)
 80013be:	f001 feb7 	bl	8003130 <HAL_TIM_PWM_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013c8:	f000 f9ac 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013cc:	4803      	ldr	r0, [pc, #12]	@ (80013dc <MX_TIM2_Init+0xe8>)
 80013ce:	f000 fa27 	bl	8001820 <HAL_TIM_MspPostInit>

}
 80013d2:	bf00      	nop
 80013d4:	3738      	adds	r7, #56	@ 0x38
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200000e4 	.word	0x200000e4

080013e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08e      	sub	sp, #56	@ 0x38
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
 800140c:	615a      	str	r2, [r3, #20]
 800140e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001410:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <MX_TIM3_Init+0xfc>)
 8001412:	4a33      	ldr	r2, [pc, #204]	@ (80014e0 <MX_TIM3_Init+0x100>)
 8001414:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001416:	4b31      	ldr	r3, [pc, #196]	@ (80014dc <MX_TIM3_Init+0xfc>)
 8001418:	2247      	movs	r2, #71	@ 0x47
 800141a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <MX_TIM3_Init+0xfc>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 8001422:	4b2e      	ldr	r3, [pc, #184]	@ (80014dc <MX_TIM3_Init+0xfc>)
 8001424:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001428:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142a:	4b2c      	ldr	r3, [pc, #176]	@ (80014dc <MX_TIM3_Init+0xfc>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <MX_TIM3_Init+0xfc>)
 8001432:	2280      	movs	r2, #128	@ 0x80
 8001434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001436:	4829      	ldr	r0, [pc, #164]	@ (80014dc <MX_TIM3_Init+0xfc>)
 8001438:	f001 fb74 	bl	8002b24 <HAL_TIM_Base_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001442:	f000 f96f 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001446:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800144c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001450:	4619      	mov	r1, r3
 8001452:	4822      	ldr	r0, [pc, #136]	@ (80014dc <MX_TIM3_Init+0xfc>)
 8001454:	f001 ff2e 	bl	80032b4 <HAL_TIM_ConfigClockSource>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800145e:	f000 f961 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001462:	481e      	ldr	r0, [pc, #120]	@ (80014dc <MX_TIM3_Init+0xfc>)
 8001464:	f001 fc6a 	bl	8002d3c <HAL_TIM_PWM_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800146e:	f000 f959 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	4619      	mov	r1, r3
 8001480:	4816      	ldr	r0, [pc, #88]	@ (80014dc <MX_TIM3_Init+0xfc>)
 8001482:	f002 fadf 	bl	8003a44 <HAL_TIMEx_MasterConfigSynchronization>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800148c:	f000 f94a 	bl	8001724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001490:	2360      	movs	r3, #96	@ 0x60
 8001492:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	4619      	mov	r1, r3
 80014a6:	480d      	ldr	r0, [pc, #52]	@ (80014dc <MX_TIM3_Init+0xfc>)
 80014a8:	f001 fe42 	bl	8003130 <HAL_TIM_PWM_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014b2:	f000 f937 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2204      	movs	r2, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4807      	ldr	r0, [pc, #28]	@ (80014dc <MX_TIM3_Init+0xfc>)
 80014be:	f001 fe37 	bl	8003130 <HAL_TIM_PWM_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014c8:	f000 f92c 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014cc:	4803      	ldr	r0, [pc, #12]	@ (80014dc <MX_TIM3_Init+0xfc>)
 80014ce:	f000 f9a7 	bl	8001820 <HAL_TIM_MspPostInit>

}
 80014d2:	bf00      	nop
 80014d4:	3738      	adds	r7, #56	@ 0x38
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000012c 	.word	0x2000012c
 80014e0:	40000400 	.word	0x40000400

080014e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_USART2_UART_Init+0x4c>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <MX_USART2_UART_Init+0x50>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <MX_USART2_UART_Init+0x4c>)
 80014f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <MX_USART2_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <MX_USART2_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <MX_USART2_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <MX_USART2_UART_Init+0x4c>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <MX_USART2_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <MX_USART2_UART_Init+0x4c>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_USART2_UART_Init+0x4c>)
 800151c:	f002 fb14 	bl	8003b48 <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001526:	f000 f8fd 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000174 	.word	0x20000174
 8001534:	40004400 	.word	0x40004400

08001538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b45      	ldr	r3, [pc, #276]	@ (8001668 <MX_GPIO_Init+0x130>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a44      	ldr	r2, [pc, #272]	@ (8001668 <MX_GPIO_Init+0x130>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b42      	ldr	r3, [pc, #264]	@ (8001668 <MX_GPIO_Init+0x130>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b3e      	ldr	r3, [pc, #248]	@ (8001668 <MX_GPIO_Init+0x130>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a3d      	ldr	r2, [pc, #244]	@ (8001668 <MX_GPIO_Init+0x130>)
 8001574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b3b      	ldr	r3, [pc, #236]	@ (8001668 <MX_GPIO_Init+0x130>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b37      	ldr	r3, [pc, #220]	@ (8001668 <MX_GPIO_Init+0x130>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	4a36      	ldr	r2, [pc, #216]	@ (8001668 <MX_GPIO_Init+0x130>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	@ 0x30
 8001596:	4b34      	ldr	r3, [pc, #208]	@ (8001668 <MX_GPIO_Init+0x130>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b30      	ldr	r3, [pc, #192]	@ (8001668 <MX_GPIO_Init+0x130>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001668 <MX_GPIO_Init+0x130>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <MX_GPIO_Init+0x130>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LefttPair_DirectionR_Pin|LeftPair_DirectionF_Pin|RightPair_DirectionR_Pin|RightPair_DirectionF_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	210f      	movs	r1, #15
 80015c2:	482a      	ldr	r0, [pc, #168]	@ (800166c <MX_GPIO_Init+0x134>)
 80015c4:	f000 fdca 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Ultrasonic_Trig_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80015ce:	4828      	ldr	r0, [pc, #160]	@ (8001670 <MX_GPIO_Init+0x138>)
 80015d0:	f000 fdc4 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4820      	ldr	r0, [pc, #128]	@ (800166c <MX_GPIO_Init+0x134>)
 80015ec:	f000 fc1a 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LefttPair_DirectionR_Pin LeftPair_DirectionF_Pin RightPair_DirectionR_Pin RightPair_DirectionF_Pin */
  GPIO_InitStruct.Pin = LefttPair_DirectionR_Pin|LeftPair_DirectionF_Pin|RightPair_DirectionR_Pin|RightPair_DirectionF_Pin;
 80015f0:	230f      	movs	r3, #15
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	4819      	ldr	r0, [pc, #100]	@ (800166c <MX_GPIO_Init+0x134>)
 8001608:	f000 fc0c 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Ultrasonic_Trig_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Ultrasonic_Trig_Pin;
 800160c:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4812      	ldr	r0, [pc, #72]	@ (8001670 <MX_GPIO_Init+0x138>)
 8001626:	f000 fbfd 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LineTracking_OUT1_Pin LineTracking_OUT2_Pin LineTracking_OUT3_Pin LineTracking_OUT4_Pin
                           LineTracking_OUT5_Pin */
  GPIO_InitStruct.Pin = LineTracking_OUT1_Pin|LineTracking_OUT2_Pin|LineTracking_OUT3_Pin|LineTracking_OUT4_Pin
 800162a:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800162e:	617b      	str	r3, [r7, #20]
                          |LineTracking_OUT5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	480b      	ldr	r0, [pc, #44]	@ (800166c <MX_GPIO_Init+0x134>)
 8001640:	f000 fbf0 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ultrasonic_Echo_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_Echo_Pin;
 8001644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Ultrasonic_Echo_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_GPIO_Init+0x138>)
 800165a:	f000 fbe3 	bl	8001e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	@ 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40020800 	.word	0x40020800
 8001670:	40020000 	.word	0x40020000

08001674 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af04      	add	r7, sp, #16
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	driveCar(80, 80, 1);
 800167c:	2001      	movs	r0, #1
 800167e:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80016d8 <StartDefaultTask+0x64>
 8001682:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80016d8 <StartDefaultTask+0x64>
 8001686:	f7ff fc89 	bl	8000f9c <driveCar>
  /* Infinite loop */
  for(;;)
  {
	  sprintf(msg, "Distance: %d cm, Line detection: %d %d %d %d %d\r\n", Distance, l1, l2, l3, l4, l5);
 800168a:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <StartDefaultTask+0x68>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	461d      	mov	r5, r3
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <StartDefaultTask+0x6c>)
 8001692:	681c      	ldr	r4, [r3, #0]
 8001694:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <StartDefaultTask+0x70>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a13      	ldr	r2, [pc, #76]	@ (80016e8 <StartDefaultTask+0x74>)
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	4913      	ldr	r1, [pc, #76]	@ (80016ec <StartDefaultTask+0x78>)
 800169e:	6809      	ldr	r1, [r1, #0]
 80016a0:	4813      	ldr	r0, [pc, #76]	@ (80016f0 <StartDefaultTask+0x7c>)
 80016a2:	6800      	ldr	r0, [r0, #0]
 80016a4:	9003      	str	r0, [sp, #12]
 80016a6:	9102      	str	r1, [sp, #8]
 80016a8:	9201      	str	r2, [sp, #4]
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	4623      	mov	r3, r4
 80016ae:	462a      	mov	r2, r5
 80016b0:	4910      	ldr	r1, [pc, #64]	@ (80016f4 <StartDefaultTask+0x80>)
 80016b2:	4811      	ldr	r0, [pc, #68]	@ (80016f8 <StartDefaultTask+0x84>)
 80016b4:	f005 fc18 	bl	8006ee8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 80016b8:	480f      	ldr	r0, [pc, #60]	@ (80016f8 <StartDefaultTask+0x84>)
 80016ba:	f7fe fd91 	bl	80001e0 <strlen>
 80016be:	4603      	mov	r3, r0
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016c6:	490c      	ldr	r1, [pc, #48]	@ (80016f8 <StartDefaultTask+0x84>)
 80016c8:	480c      	ldr	r0, [pc, #48]	@ (80016fc <StartDefaultTask+0x88>)
 80016ca:	f002 fa8d 	bl	8003be8 <HAL_UART_Transmit>
	  osDelay(50);
 80016ce:	2032      	movs	r0, #50	@ 0x32
 80016d0:	f002 ff66 	bl	80045a0 <osDelay>
  {
 80016d4:	bf00      	nop
 80016d6:	e7d8      	b.n	800168a <StartDefaultTask+0x16>
 80016d8:	42a00000 	.word	0x42a00000
 80016dc:	200001cc 	.word	0x200001cc
 80016e0:	200001d0 	.word	0x200001d0
 80016e4:	200001d4 	.word	0x200001d4
 80016e8:	200001d8 	.word	0x200001d8
 80016ec:	200001dc 	.word	0x200001dc
 80016f0:	200001e0 	.word	0x200001e0
 80016f4:	08007868 	.word	0x08007868
 80016f8:	200001f4 	.word	0x200001f4
 80016fc:	20000174 	.word	0x20000174

08001700 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001712:	f000 fa61 	bl	8001bd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40000800 	.word	0x40000800

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <Error_Handler+0x8>

08001730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_MspInit+0x54>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <HAL_MspInit+0x54>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001744:	6453      	str	r3, [r2, #68]	@ 0x44
 8001746:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <HAL_MspInit+0x54>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_MspInit+0x54>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <HAL_MspInit+0x54>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <HAL_MspInit+0x54>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	210f      	movs	r1, #15
 8001772:	f06f 0001 	mvn.w	r0, #1
 8001776:	f000 fb2b 	bl	8001dd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1f      	ldr	r2, [pc, #124]	@ (8001814 <HAL_TIM_Base_MspInit+0x8c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d10e      	bne.n	80017b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <HAL_TIM_Base_MspInit+0x90>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001818 <HAL_TIM_Base_MspInit+0x90>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <HAL_TIM_Base_MspInit+0x90>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017b6:	e026      	b.n	8001806 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017c0:	d10e      	bne.n	80017e0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <HAL_TIM_Base_MspInit+0x90>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	4a13      	ldr	r2, [pc, #76]	@ (8001818 <HAL_TIM_Base_MspInit+0x90>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <HAL_TIM_Base_MspInit+0x90>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
}
 80017de:	e012      	b.n	8001806 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <HAL_TIM_Base_MspInit+0x94>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d10d      	bne.n	8001806 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <HAL_TIM_Base_MspInit+0x90>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	4a09      	ldr	r2, [pc, #36]	@ (8001818 <HAL_TIM_Base_MspInit+0x90>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fa:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <HAL_TIM_Base_MspInit+0x90>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
}
 8001806:	bf00      	nop
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40010000 	.word	0x40010000
 8001818:	40023800 	.word	0x40023800
 800181c:	40000400 	.word	0x40000400

08001820 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001840:	d11e      	bne.n	8001880 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a21      	ldr	r2, [pc, #132]	@ (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b1f      	ldr	r3, [pc, #124]	@ (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_PWM_Pin;
 800185e:	2301      	movs	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800186e:	2301      	movs	r3, #1
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Buzzer_PWM_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4816      	ldr	r0, [pc, #88]	@ (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 800187a:	f000 fad3 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800187e:	e022      	b.n	80018c6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <HAL_TIM_MspPostInit+0xb8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d11d      	bne.n	80018c6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftPair_PWM_Pin|RightPair_PWM_Pin;
 80018a6:	23c0      	movs	r3, #192	@ 0xc0
 80018a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018b6:	2302      	movs	r3, #2
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 80018c2:	f000 faaf 	bl	8001e24 <HAL_GPIO_Init>
}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	@ 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40000400 	.word	0x40000400

080018dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	@ 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a19      	ldr	r2, [pc, #100]	@ (8001960 <HAL_UART_MspInit+0x84>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d12b      	bne.n	8001956 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <HAL_UART_MspInit+0x88>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	4a17      	ldr	r2, [pc, #92]	@ (8001964 <HAL_UART_MspInit+0x88>)
 8001908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800190c:	6413      	str	r3, [r2, #64]	@ 0x40
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <HAL_UART_MspInit+0x88>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <HAL_UART_MspInit+0x88>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a10      	ldr	r2, [pc, #64]	@ (8001964 <HAL_UART_MspInit+0x88>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_UART_MspInit+0x88>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001936:	230c      	movs	r3, #12
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001946:	2307      	movs	r3, #7
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	@ (8001968 <HAL_UART_MspInit+0x8c>)
 8001952:	f000 fa67 	bl	8001e24 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	@ 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40004400 	.word	0x40004400
 8001964:	40023800 	.word	0x40023800
 8001968:	40020000 	.word	0x40020000

0800196c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08e      	sub	sp, #56	@ 0x38
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	4b33      	ldr	r3, [pc, #204]	@ (8001a50 <HAL_InitTick+0xe4>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	4a32      	ldr	r2, [pc, #200]	@ (8001a50 <HAL_InitTick+0xe4>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6413      	str	r3, [r2, #64]	@ 0x40
 800198c:	4b30      	ldr	r3, [pc, #192]	@ (8001a50 <HAL_InitTick+0xe4>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001998:	f107 0210 	add.w	r2, r7, #16
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f001 f88c 	bl	8002ac0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019b2:	f001 f85d 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 80019b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80019b8:	e004      	b.n	80019c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019ba:	f001 f859 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 80019be:	4603      	mov	r3, r0
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c6:	4a23      	ldr	r2, [pc, #140]	@ (8001a54 <HAL_InitTick+0xe8>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	0c9b      	lsrs	r3, r3, #18
 80019ce:	3b01      	subs	r3, #1
 80019d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80019d2:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <HAL_InitTick+0xec>)
 80019d4:	4a21      	ldr	r2, [pc, #132]	@ (8001a5c <HAL_InitTick+0xf0>)
 80019d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <HAL_InitTick+0xec>)
 80019da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019de:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80019e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a58 <HAL_InitTick+0xec>)
 80019e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e4:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a58 <HAL_InitTick+0xec>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <HAL_InitTick+0xec>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f2:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <HAL_InitTick+0xec>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80019f8:	4817      	ldr	r0, [pc, #92]	@ (8001a58 <HAL_InitTick+0xec>)
 80019fa:	f001 f893 	bl	8002b24 <HAL_TIM_Base_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d11b      	bne.n	8001a44 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001a0c:	4812      	ldr	r0, [pc, #72]	@ (8001a58 <HAL_InitTick+0xec>)
 8001a0e:	f001 f933 	bl	8002c78 <HAL_TIM_Base_Start_IT>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d111      	bne.n	8001a44 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a20:	201e      	movs	r0, #30
 8001a22:	f000 f9f1 	bl	8001e08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d808      	bhi.n	8001a3e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	201e      	movs	r0, #30
 8001a32:	f000 f9cd 	bl	8001dd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a36:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <HAL_InitTick+0xf4>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	e002      	b.n	8001a44 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3738      	adds	r7, #56	@ 0x38
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	431bde83 	.word	0x431bde83
 8001a58:	200002f4 	.word	0x200002f4
 8001a5c:	40000800 	.word	0x40000800
 8001a60:	20000024 	.word	0x20000024

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <NMI_Handler+0x4>

08001a6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <BusFault_Handler+0x4>

08001a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <UsageFault_Handler+0x4>

08001a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <TIM4_IRQHandler+0x10>)
 8001aa2:	f001 fa55 	bl	8002f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200002f4 	.word	0x200002f4

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	@ (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f005 fa2a 	bl	8006f38 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20020000 	.word	0x20020000
 8001b10:	00000400 	.word	0x00000400
 8001b14:	2000033c 	.word	0x2000033c
 8001b18:	20004de0 	.word	0x20004de0

08001b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <SystemInit+0x20>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <SystemInit+0x20>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b44:	f7ff ffea 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b48:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b4a:	490d      	ldr	r1, [pc, #52]	@ (8001b80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b60:	4c0a      	ldr	r4, [pc, #40]	@ (8001b8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f005 f9e9 	bl	8006f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b72:	f7ff fa77 	bl	8001064 <main>
  bx  lr    
 8001b76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001b84:	08007944 	.word	0x08007944
  ldr r2, =_sbss
 8001b88:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001b8c:	20004ddc 	.word	0x20004ddc

08001b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC_IRQHandler>
	...

08001b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b98:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd4 <HAL_Init+0x40>)
 8001b9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <HAL_Init+0x40>)
 8001baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	@ (8001bd4 <HAL_Init+0x40>)
 8001bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f000 f8fc 	bl	8001dba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f7ff fed2 	bl	800196c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff fdb2 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_IncTick+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_IncTick+0x24>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <HAL_IncTick+0x24>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000028 	.word	0x20000028
 8001bfc:	20000340 	.word	0x20000340

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000340 	.word	0x20000340

08001c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff ffee 	bl	8001c00 <HAL_GetTick>
 8001c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c30:	d005      	beq.n	8001c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <HAL_Delay+0x44>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c3e:	bf00      	nop
 8001c40:	f7ff ffde 	bl	8001c00 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d8f7      	bhi.n	8001c40 <HAL_Delay+0x28>
  {
  }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000028 	.word	0x20000028

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4907      	ldr	r1, [pc, #28]	@ (8001cfc <__NVIC_EnableIRQ+0x38>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	@ (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	@ (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	@ 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ff4c 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de2:	f7ff ff61 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001de6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	6978      	ldr	r0, [r7, #20]
 8001dee:	f7ff ffb1 	bl	8001d54 <NVIC_EncodePriority>
 8001df2:	4602      	mov	r2, r0
 8001df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff80 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e00:	bf00      	nop
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff54 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e159      	b.n	80020f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e40:	2201      	movs	r2, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	f040 8148 	bne.w	80020ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d005      	beq.n	8001e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d130      	bne.n	8001ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2203      	movs	r2, #3
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eac:	2201      	movs	r2, #1
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 0201 	and.w	r2, r3, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d017      	beq.n	8001f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d123      	bne.n	8001f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	08da      	lsrs	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	220f      	movs	r2, #15
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	08da      	lsrs	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3208      	adds	r2, #8
 8001f62:	69b9      	ldr	r1, [r7, #24]
 8001f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0203 	and.w	r2, r3, #3
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a2 	beq.w	80020ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b57      	ldr	r3, [pc, #348]	@ (800210c <HAL_GPIO_Init+0x2e8>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	4a56      	ldr	r2, [pc, #344]	@ (800210c <HAL_GPIO_Init+0x2e8>)
 8001fb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fba:	4b54      	ldr	r3, [pc, #336]	@ (800210c <HAL_GPIO_Init+0x2e8>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fc6:	4a52      	ldr	r2, [pc, #328]	@ (8002110 <HAL_GPIO_Init+0x2ec>)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	220f      	movs	r2, #15
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a49      	ldr	r2, [pc, #292]	@ (8002114 <HAL_GPIO_Init+0x2f0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d019      	beq.n	8002026 <HAL_GPIO_Init+0x202>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a48      	ldr	r2, [pc, #288]	@ (8002118 <HAL_GPIO_Init+0x2f4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_GPIO_Init+0x1fe>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a47      	ldr	r2, [pc, #284]	@ (800211c <HAL_GPIO_Init+0x2f8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00d      	beq.n	800201e <HAL_GPIO_Init+0x1fa>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a46      	ldr	r2, [pc, #280]	@ (8002120 <HAL_GPIO_Init+0x2fc>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <HAL_GPIO_Init+0x1f6>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a45      	ldr	r2, [pc, #276]	@ (8002124 <HAL_GPIO_Init+0x300>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_GPIO_Init+0x1f2>
 8002012:	2304      	movs	r3, #4
 8002014:	e008      	b.n	8002028 <HAL_GPIO_Init+0x204>
 8002016:	2307      	movs	r3, #7
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x204>
 800201a:	2303      	movs	r3, #3
 800201c:	e004      	b.n	8002028 <HAL_GPIO_Init+0x204>
 800201e:	2302      	movs	r3, #2
 8002020:	e002      	b.n	8002028 <HAL_GPIO_Init+0x204>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_GPIO_Init+0x204>
 8002026:	2300      	movs	r3, #0
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	f002 0203 	and.w	r2, r2, #3
 800202e:	0092      	lsls	r2, r2, #2
 8002030:	4093      	lsls	r3, r2
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002038:	4935      	ldr	r1, [pc, #212]	@ (8002110 <HAL_GPIO_Init+0x2ec>)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002046:	4b38      	ldr	r3, [pc, #224]	@ (8002128 <HAL_GPIO_Init+0x304>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206a:	4a2f      	ldr	r2, [pc, #188]	@ (8002128 <HAL_GPIO_Init+0x304>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002070:	4b2d      	ldr	r3, [pc, #180]	@ (8002128 <HAL_GPIO_Init+0x304>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002094:	4a24      	ldr	r2, [pc, #144]	@ (8002128 <HAL_GPIO_Init+0x304>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800209a:	4b23      	ldr	r3, [pc, #140]	@ (8002128 <HAL_GPIO_Init+0x304>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020be:	4a1a      	ldr	r2, [pc, #104]	@ (8002128 <HAL_GPIO_Init+0x304>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c4:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <HAL_GPIO_Init+0x304>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002128 <HAL_GPIO_Init+0x304>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3301      	adds	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	f67f aea2 	bls.w	8001e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3724      	adds	r7, #36	@ 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	40013800 	.word	0x40013800
 8002114:	40020000 	.word	0x40020000
 8002118:	40020400 	.word	0x40020400
 800211c:	40020800 	.word	0x40020800
 8002120:	40020c00 	.word	0x40020c00
 8002124:	40021000 	.word	0x40021000
 8002128:	40013c00 	.word	0x40013c00

0800212c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e001      	b.n	800214e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002178:	e003      	b.n	8002182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	041a      	lsls	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	619a      	str	r2, [r3, #24]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e267      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d075      	beq.n	800229a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ae:	4b88      	ldr	r3, [pc, #544]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d00c      	beq.n	80021d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ba:	4b85      	ldr	r3, [pc, #532]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d112      	bne.n	80021ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c6:	4b82      	ldr	r3, [pc, #520]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021d2:	d10b      	bne.n	80021ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	4b7e      	ldr	r3, [pc, #504]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d05b      	beq.n	8002298 <HAL_RCC_OscConfig+0x108>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d157      	bne.n	8002298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e242      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f4:	d106      	bne.n	8002204 <HAL_RCC_OscConfig+0x74>
 80021f6:	4b76      	ldr	r3, [pc, #472]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a75      	ldr	r2, [pc, #468]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e01d      	b.n	8002240 <HAL_RCC_OscConfig+0xb0>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x98>
 800220e:	4b70      	ldr	r3, [pc, #448]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6f      	ldr	r2, [pc, #444]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b6d      	ldr	r3, [pc, #436]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a6c      	ldr	r2, [pc, #432]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e00b      	b.n	8002240 <HAL_RCC_OscConfig+0xb0>
 8002228:	4b69      	ldr	r3, [pc, #420]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a68      	ldr	r2, [pc, #416]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800222e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b66      	ldr	r3, [pc, #408]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a65      	ldr	r2, [pc, #404]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800223a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800223e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d013      	beq.n	8002270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7ff fcda 	bl	8001c00 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002250:	f7ff fcd6 	bl	8001c00 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	@ 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e207      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	4b5b      	ldr	r3, [pc, #364]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0xc0>
 800226e:	e014      	b.n	800229a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7ff fcc6 	bl	8001c00 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7ff fcc2 	bl	8001c00 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	@ 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e1f3      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228a:	4b51      	ldr	r3, [pc, #324]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0xe8>
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d063      	beq.n	800236e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022a6:	4b4a      	ldr	r3, [pc, #296]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b2:	4b47      	ldr	r3, [pc, #284]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d11c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022be:	4b44      	ldr	r3, [pc, #272]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d116      	bne.n	80022f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	4b41      	ldr	r3, [pc, #260]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_RCC_OscConfig+0x152>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e1c7      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e2:	4b3b      	ldr	r3, [pc, #236]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4937      	ldr	r1, [pc, #220]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	e03a      	b.n	800236e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002300:	4b34      	ldr	r3, [pc, #208]	@ (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002302:	2201      	movs	r2, #1
 8002304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7ff fc7b 	bl	8001c00 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230e:	f7ff fc77 	bl	8001c00 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e1a8      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002320:	4b2b      	ldr	r3, [pc, #172]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	4b28      	ldr	r3, [pc, #160]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4925      	ldr	r1, [pc, #148]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]
 8002340:	e015      	b.n	800236e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002342:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff fc5a 	bl	8001c00 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002350:	f7ff fc56 	bl	8001c00 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e187      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	4b1b      	ldr	r3, [pc, #108]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d036      	beq.n	80023e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d016      	beq.n	80023b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002382:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <HAL_RCC_OscConfig+0x248>)
 8002384:	2201      	movs	r2, #1
 8002386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7ff fc3a 	bl	8001c00 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002390:	f7ff fc36 	bl	8001c00 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e167      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a2:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80023a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x200>
 80023ae:	e01b      	b.n	80023e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_RCC_OscConfig+0x248>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b6:	f7ff fc23 	bl	8001c00 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	e00e      	b.n	80023dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023be:	f7ff fc1f 	bl	8001c00 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d907      	bls.n	80023dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e150      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
 80023d0:	40023800 	.word	0x40023800
 80023d4:	42470000 	.word	0x42470000
 80023d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	4b88      	ldr	r3, [pc, #544]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80023de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1ea      	bne.n	80023be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8097 	beq.w	8002524 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fa:	4b81      	ldr	r3, [pc, #516]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10f      	bne.n	8002426 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	4b7d      	ldr	r3, [pc, #500]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	4a7c      	ldr	r2, [pc, #496]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002414:	6413      	str	r3, [r2, #64]	@ 0x40
 8002416:	4b7a      	ldr	r3, [pc, #488]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002426:	4b77      	ldr	r3, [pc, #476]	@ (8002604 <HAL_RCC_OscConfig+0x474>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002432:	4b74      	ldr	r3, [pc, #464]	@ (8002604 <HAL_RCC_OscConfig+0x474>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a73      	ldr	r2, [pc, #460]	@ (8002604 <HAL_RCC_OscConfig+0x474>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243e:	f7ff fbdf 	bl	8001c00 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002446:	f7ff fbdb 	bl	8001c00 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e10c      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	4b6a      	ldr	r3, [pc, #424]	@ (8002604 <HAL_RCC_OscConfig+0x474>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x2ea>
 800246c:	4b64      	ldr	r3, [pc, #400]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002470:	4a63      	ldr	r2, [pc, #396]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6713      	str	r3, [r2, #112]	@ 0x70
 8002478:	e01c      	b.n	80024b4 <HAL_RCC_OscConfig+0x324>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0x30c>
 8002482:	4b5f      	ldr	r3, [pc, #380]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002486:	4a5e      	ldr	r2, [pc, #376]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	6713      	str	r3, [r2, #112]	@ 0x70
 800248e:	4b5c      	ldr	r3, [pc, #368]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002492:	4a5b      	ldr	r2, [pc, #364]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6713      	str	r3, [r2, #112]	@ 0x70
 800249a:	e00b      	b.n	80024b4 <HAL_RCC_OscConfig+0x324>
 800249c:	4b58      	ldr	r3, [pc, #352]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a0:	4a57      	ldr	r2, [pc, #348]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80024a2:	f023 0301 	bic.w	r3, r3, #1
 80024a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a8:	4b55      	ldr	r3, [pc, #340]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ac:	4a54      	ldr	r2, [pc, #336]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80024ae:	f023 0304 	bic.w	r3, r3, #4
 80024b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d015      	beq.n	80024e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7ff fba0 	bl	8001c00 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c2:	e00a      	b.n	80024da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c4:	f7ff fb9c 	bl	8001c00 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e0cb      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024da:	4b49      	ldr	r3, [pc, #292]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0ee      	beq.n	80024c4 <HAL_RCC_OscConfig+0x334>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e8:	f7ff fb8a 	bl	8001c00 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7ff fb86 	bl	8001c00 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e0b5      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002506:	4b3e      	ldr	r3, [pc, #248]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ee      	bne.n	80024f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002512:	7dfb      	ldrb	r3, [r7, #23]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002518:	4b39      	ldr	r3, [pc, #228]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	4a38      	ldr	r2, [pc, #224]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 800251e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002522:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80a1 	beq.w	8002670 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800252e:	4b34      	ldr	r3, [pc, #208]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b08      	cmp	r3, #8
 8002538:	d05c      	beq.n	80025f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d141      	bne.n	80025c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b31      	ldr	r3, [pc, #196]	@ (8002608 <HAL_RCC_OscConfig+0x478>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff fb5a 	bl	8001c00 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7ff fb56 	bl	8001c00 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e087      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	4b27      	ldr	r3, [pc, #156]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69da      	ldr	r2, [r3, #28]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	019b      	lsls	r3, r3, #6
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	3b01      	subs	r3, #1
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	491b      	ldr	r1, [pc, #108]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002598:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_RCC_OscConfig+0x478>)
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7ff fb2f 	bl	8001c00 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7ff fb2b 	bl	8001c00 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e05c      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b8:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x416>
 80025c4:	e054      	b.n	8002670 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c6:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_RCC_OscConfig+0x478>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7ff fb18 	bl	8001c00 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d4:	f7ff fb14 	bl	8001c00 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e045      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x444>
 80025f2:	e03d      	b.n	8002670 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d107      	bne.n	800260c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e038      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
 8002600:	40023800 	.word	0x40023800
 8002604:	40007000 	.word	0x40007000
 8002608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800260c:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <HAL_RCC_OscConfig+0x4ec>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d028      	beq.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d121      	bne.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d11a      	bne.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800263c:	4013      	ands	r3, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002644:	4293      	cmp	r3, r2
 8002646:	d111      	bne.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	3b01      	subs	r3, #1
 8002656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800

08002680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0cc      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002694:	4b68      	ldr	r3, [pc, #416]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d90c      	bls.n	80026bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b65      	ldr	r3, [pc, #404]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b63      	ldr	r3, [pc, #396]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0b8      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d4:	4b59      	ldr	r3, [pc, #356]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a58      	ldr	r2, [pc, #352]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ec:	4b53      	ldr	r3, [pc, #332]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4a52      	ldr	r2, [pc, #328]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f8:	4b50      	ldr	r3, [pc, #320]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	494d      	ldr	r1, [pc, #308]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d044      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b47      	ldr	r3, [pc, #284]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d119      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e07f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d003      	beq.n	800273e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273a:	2b03      	cmp	r3, #3
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	4b3f      	ldr	r3, [pc, #252]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	4b3b      	ldr	r3, [pc, #236]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e067      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275e:	4b37      	ldr	r3, [pc, #220]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f023 0203 	bic.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4934      	ldr	r1, [pc, #208]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	4313      	orrs	r3, r2
 800276e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002770:	f7ff fa46 	bl	8001c00 <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	e00a      	b.n	800278e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f7ff fa42 	bl	8001c00 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e04f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	4b2b      	ldr	r3, [pc, #172]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 020c 	and.w	r2, r3, #12
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	429a      	cmp	r2, r3
 800279e:	d1eb      	bne.n	8002778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b25      	ldr	r3, [pc, #148]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d20c      	bcs.n	80027c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b22      	ldr	r3, [pc, #136]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b20      	ldr	r3, [pc, #128]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e032      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4916      	ldr	r1, [pc, #88]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f2:	4b12      	ldr	r3, [pc, #72]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	490e      	ldr	r1, [pc, #56]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002806:	f000 f821 	bl	800284c <HAL_RCC_GetSysClockFreq>
 800280a:	4602      	mov	r2, r0
 800280c:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	490a      	ldr	r1, [pc, #40]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	5ccb      	ldrb	r3, [r1, r3]
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	4a09      	ldr	r2, [pc, #36]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_RCC_ClockConfig+0x1c8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff f8a0 	bl	800196c <HAL_InitTick>

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023c00 	.word	0x40023c00
 800283c:	40023800 	.word	0x40023800
 8002840:	080078e8 	.word	0x080078e8
 8002844:	20000020 	.word	0x20000020
 8002848:	20000024 	.word	0x20000024

0800284c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800284c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002850:	b094      	sub	sp, #80	@ 0x50
 8002852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002864:	4b79      	ldr	r3, [pc, #484]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d00d      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x40>
 8002870:	2b08      	cmp	r3, #8
 8002872:	f200 80e1 	bhi.w	8002a38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x34>
 800287a:	2b04      	cmp	r3, #4
 800287c:	d003      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x3a>
 800287e:	e0db      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b73      	ldr	r3, [pc, #460]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002882:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002884:	e0db      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002886:	4b73      	ldr	r3, [pc, #460]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002888:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800288a:	e0d8      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800288c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002894:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002896:	4b6d      	ldr	r3, [pc, #436]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	099b      	lsrs	r3, r3, #6
 80028a8:	2200      	movs	r2, #0
 80028aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80028b6:	2300      	movs	r3, #0
 80028b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80028ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028be:	4622      	mov	r2, r4
 80028c0:	462b      	mov	r3, r5
 80028c2:	f04f 0000 	mov.w	r0, #0
 80028c6:	f04f 0100 	mov.w	r1, #0
 80028ca:	0159      	lsls	r1, r3, #5
 80028cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d0:	0150      	lsls	r0, r2, #5
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4621      	mov	r1, r4
 80028d8:	1a51      	subs	r1, r2, r1
 80028da:	6139      	str	r1, [r7, #16]
 80028dc:	4629      	mov	r1, r5
 80028de:	eb63 0301 	sbc.w	r3, r3, r1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028f0:	4659      	mov	r1, fp
 80028f2:	018b      	lsls	r3, r1, #6
 80028f4:	4651      	mov	r1, sl
 80028f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028fa:	4651      	mov	r1, sl
 80028fc:	018a      	lsls	r2, r1, #6
 80028fe:	4651      	mov	r1, sl
 8002900:	ebb2 0801 	subs.w	r8, r2, r1
 8002904:	4659      	mov	r1, fp
 8002906:	eb63 0901 	sbc.w	r9, r3, r1
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800291a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291e:	4690      	mov	r8, r2
 8002920:	4699      	mov	r9, r3
 8002922:	4623      	mov	r3, r4
 8002924:	eb18 0303 	adds.w	r3, r8, r3
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	462b      	mov	r3, r5
 800292c:	eb49 0303 	adc.w	r3, r9, r3
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800293e:	4629      	mov	r1, r5
 8002940:	024b      	lsls	r3, r1, #9
 8002942:	4621      	mov	r1, r4
 8002944:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002948:	4621      	mov	r1, r4
 800294a:	024a      	lsls	r2, r1, #9
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002952:	2200      	movs	r2, #0
 8002954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002956:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800295c:	f7fe f886 	bl	8000a6c <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4613      	mov	r3, r2
 8002966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002968:	e058      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296a:	4b38      	ldr	r3, [pc, #224]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	2200      	movs	r2, #0
 8002972:	4618      	mov	r0, r3
 8002974:	4611      	mov	r1, r2
 8002976:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800297a:	623b      	str	r3, [r7, #32]
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002984:	4642      	mov	r2, r8
 8002986:	464b      	mov	r3, r9
 8002988:	f04f 0000 	mov.w	r0, #0
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	0159      	lsls	r1, r3, #5
 8002992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002996:	0150      	lsls	r0, r2, #5
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4641      	mov	r1, r8
 800299e:	ebb2 0a01 	subs.w	sl, r2, r1
 80029a2:	4649      	mov	r1, r9
 80029a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029bc:	ebb2 040a 	subs.w	r4, r2, sl
 80029c0:	eb63 050b 	sbc.w	r5, r3, fp
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	00eb      	lsls	r3, r5, #3
 80029ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d2:	00e2      	lsls	r2, r4, #3
 80029d4:	4614      	mov	r4, r2
 80029d6:	461d      	mov	r5, r3
 80029d8:	4643      	mov	r3, r8
 80029da:	18e3      	adds	r3, r4, r3
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	464b      	mov	r3, r9
 80029e0:	eb45 0303 	adc.w	r3, r5, r3
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029f2:	4629      	mov	r1, r5
 80029f4:	028b      	lsls	r3, r1, #10
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029fc:	4621      	mov	r1, r4
 80029fe:	028a      	lsls	r2, r1, #10
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a06:	2200      	movs	r2, #0
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	61fa      	str	r2, [r7, #28]
 8002a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a10:	f7fe f82c 	bl	8000a6c <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	3301      	adds	r3, #1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3750      	adds	r7, #80	@ 0x50
 8002a44:	46bd      	mov	sp, r7
 8002a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	00f42400 	.word	0x00f42400
 8002a54:	007a1200 	.word	0x007a1200

08002a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	@ (8002a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000020 	.word	0x20000020

08002a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a74:	f7ff fff0 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b05      	ldr	r3, [pc, #20]	@ (8002a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	0a9b      	lsrs	r3, r3, #10
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4903      	ldr	r1, [pc, #12]	@ (8002a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	080078f8 	.word	0x080078f8

08002a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a9c:	f7ff ffdc 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	0b5b      	lsrs	r3, r3, #13
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4903      	ldr	r1, [pc, #12]	@ (8002abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	080078f8 	.word	0x080078f8

08002ac0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	220f      	movs	r2, #15
 8002ace:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ad0:	4b12      	ldr	r3, [pc, #72]	@ (8002b1c <HAL_RCC_GetClockConfig+0x5c>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0203 	and.w	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002adc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b1c <HAL_RCC_GetClockConfig+0x5c>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <HAL_RCC_GetClockConfig+0x5c>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002af4:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <HAL_RCC_GetClockConfig+0x5c>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	08db      	lsrs	r3, r3, #3
 8002afa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b02:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <HAL_RCC_GetClockConfig+0x60>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0207 	and.w	r2, r3, #7
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	601a      	str	r2, [r3, #0]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40023c00 	.word	0x40023c00

08002b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e041      	b.n	8002bba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe fe1c 	bl	8001788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f000 fc96 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d001      	beq.n	8002bdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e03c      	b.n	8002c56 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c64 <HAL_TIM_Base_Start+0xa0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d018      	beq.n	8002c20 <HAL_TIM_Base_Start+0x5c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf6:	d013      	beq.n	8002c20 <HAL_TIM_Base_Start+0x5c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8002c68 <HAL_TIM_Base_Start+0xa4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00e      	beq.n	8002c20 <HAL_TIM_Base_Start+0x5c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a19      	ldr	r2, [pc, #100]	@ (8002c6c <HAL_TIM_Base_Start+0xa8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_TIM_Base_Start+0x5c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a17      	ldr	r2, [pc, #92]	@ (8002c70 <HAL_TIM_Base_Start+0xac>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_TIM_Base_Start+0x5c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a16      	ldr	r2, [pc, #88]	@ (8002c74 <HAL_TIM_Base_Start+0xb0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d111      	bne.n	8002c44 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d010      	beq.n	8002c54 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c42:	e007      	b.n	8002c54 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	40000c00 	.word	0x40000c00
 8002c74:	40014000 	.word	0x40014000

08002c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d001      	beq.n	8002c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e044      	b.n	8002d1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1e      	ldr	r2, [pc, #120]	@ (8002d28 <HAL_TIM_Base_Start_IT+0xb0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d018      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cba:	d013      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d2c <HAL_TIM_Base_Start_IT+0xb4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00e      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a19      	ldr	r2, [pc, #100]	@ (8002d30 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d009      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a17      	ldr	r2, [pc, #92]	@ (8002d34 <HAL_TIM_Base_Start_IT+0xbc>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a16      	ldr	r2, [pc, #88]	@ (8002d38 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d111      	bne.n	8002d08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b06      	cmp	r3, #6
 8002cf4:	d010      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d06:	e007      	b.n	8002d18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40010000 	.word	0x40010000
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	40000800 	.word	0x40000800
 8002d34:	40000c00 	.word	0x40000c00
 8002d38:	40014000 	.word	0x40014000

08002d3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e041      	b.n	8002dd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f839 	bl	8002dda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	f000 fb8a 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <HAL_TIM_PWM_Start+0x24>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	bf14      	ite	ne
 8002e0c:	2301      	movne	r3, #1
 8002e0e:	2300      	moveq	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	e022      	b.n	8002e5a <HAL_TIM_PWM_Start+0x6a>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d109      	bne.n	8002e2e <HAL_TIM_PWM_Start+0x3e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	e015      	b.n	8002e5a <HAL_TIM_PWM_Start+0x6a>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d109      	bne.n	8002e48 <HAL_TIM_PWM_Start+0x58>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	e008      	b.n	8002e5a <HAL_TIM_PWM_Start+0x6a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e068      	b.n	8002f34 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d104      	bne.n	8002e72 <HAL_TIM_PWM_Start+0x82>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e70:	e013      	b.n	8002e9a <HAL_TIM_PWM_Start+0xaa>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d104      	bne.n	8002e82 <HAL_TIM_PWM_Start+0x92>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e80:	e00b      	b.n	8002e9a <HAL_TIM_PWM_Start+0xaa>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d104      	bne.n	8002e92 <HAL_TIM_PWM_Start+0xa2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e90:	e003      	b.n	8002e9a <HAL_TIM_PWM_Start+0xaa>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2202      	movs	r2, #2
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	6839      	ldr	r1, [r7, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fda8 	bl	80039f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a23      	ldr	r2, [pc, #140]	@ (8002f3c <HAL_TIM_PWM_Start+0x14c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d107      	bne.n	8002ec2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f3c <HAL_TIM_PWM_Start+0x14c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d018      	beq.n	8002efe <HAL_TIM_PWM_Start+0x10e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed4:	d013      	beq.n	8002efe <HAL_TIM_PWM_Start+0x10e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a19      	ldr	r2, [pc, #100]	@ (8002f40 <HAL_TIM_PWM_Start+0x150>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00e      	beq.n	8002efe <HAL_TIM_PWM_Start+0x10e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a17      	ldr	r2, [pc, #92]	@ (8002f44 <HAL_TIM_PWM_Start+0x154>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d009      	beq.n	8002efe <HAL_TIM_PWM_Start+0x10e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a16      	ldr	r2, [pc, #88]	@ (8002f48 <HAL_TIM_PWM_Start+0x158>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_TIM_PWM_Start+0x10e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a14      	ldr	r2, [pc, #80]	@ (8002f4c <HAL_TIM_PWM_Start+0x15c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d111      	bne.n	8002f22 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b06      	cmp	r3, #6
 8002f0e:	d010      	beq.n	8002f32 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f20:	e007      	b.n	8002f32 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40000800 	.word	0x40000800
 8002f48:	40000c00 	.word	0x40000c00
 8002f4c:	40014000 	.word	0x40014000

08002f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d020      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01b      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0202 	mvn.w	r2, #2
 8002f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fa5b 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa4d 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fa5e 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d020      	beq.n	8003000 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01b      	beq.n	8003000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0204 	mvn.w	r2, #4
 8002fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa35 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8002fec:	e005      	b.n	8002ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa27 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fa38 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d020      	beq.n	800304c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01b      	beq.n	800304c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0208 	mvn.w	r2, #8
 800301c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2204      	movs	r2, #4
 8003022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fa0f 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8003038:	e005      	b.n	8003046 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fa01 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fa12 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d020      	beq.n	8003098 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01b      	beq.n	8003098 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0210 	mvn.w	r2, #16
 8003068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2208      	movs	r2, #8
 800306e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f9e9 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f9db 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f9ec 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0201 	mvn.w	r2, #1
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe fb22 	bl	8001700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00c      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fd2a 	bl	8003b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f9bd 	bl	800347e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00c      	beq.n	8003128 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0220 	mvn.w	r2, #32
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fcfc 	bl	8003b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800314a:	2302      	movs	r3, #2
 800314c:	e0ae      	b.n	80032ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b0c      	cmp	r3, #12
 800315a:	f200 809f 	bhi.w	800329c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800315e:	a201      	add	r2, pc, #4	@ (adr r2, 8003164 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	08003199 	.word	0x08003199
 8003168:	0800329d 	.word	0x0800329d
 800316c:	0800329d 	.word	0x0800329d
 8003170:	0800329d 	.word	0x0800329d
 8003174:	080031d9 	.word	0x080031d9
 8003178:	0800329d 	.word	0x0800329d
 800317c:	0800329d 	.word	0x0800329d
 8003180:	0800329d 	.word	0x0800329d
 8003184:	0800321b 	.word	0x0800321b
 8003188:	0800329d 	.word	0x0800329d
 800318c:	0800329d 	.word	0x0800329d
 8003190:	0800329d 	.word	0x0800329d
 8003194:	0800325b 	.word	0x0800325b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fa04 	bl	80035ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0208 	orr.w	r2, r2, #8
 80031b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0204 	bic.w	r2, r2, #4
 80031c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6999      	ldr	r1, [r3, #24]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	619a      	str	r2, [r3, #24]
      break;
 80031d6:	e064      	b.n	80032a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fa4a 	bl	8003678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6999      	ldr	r1, [r3, #24]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	021a      	lsls	r2, r3, #8
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	619a      	str	r2, [r3, #24]
      break;
 8003218:	e043      	b.n	80032a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fa95 	bl	8003750 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69da      	ldr	r2, [r3, #28]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0208 	orr.w	r2, r2, #8
 8003234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0204 	bic.w	r2, r2, #4
 8003244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69d9      	ldr	r1, [r3, #28]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	61da      	str	r2, [r3, #28]
      break;
 8003258:	e023      	b.n	80032a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fadf 	bl	8003824 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69da      	ldr	r2, [r3, #28]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69d9      	ldr	r1, [r3, #28]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	021a      	lsls	r2, r3, #8
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	61da      	str	r2, [r3, #28]
      break;
 800329a:	e002      	b.n	80032a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	75fb      	strb	r3, [r7, #23]
      break;
 80032a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_TIM_ConfigClockSource+0x1c>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e0b4      	b.n	800343a <HAL_TIM_ConfigClockSource+0x186>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003308:	d03e      	beq.n	8003388 <HAL_TIM_ConfigClockSource+0xd4>
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800330e:	f200 8087 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003316:	f000 8086 	beq.w	8003426 <HAL_TIM_ConfigClockSource+0x172>
 800331a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800331e:	d87f      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003320:	2b70      	cmp	r3, #112	@ 0x70
 8003322:	d01a      	beq.n	800335a <HAL_TIM_ConfigClockSource+0xa6>
 8003324:	2b70      	cmp	r3, #112	@ 0x70
 8003326:	d87b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003328:	2b60      	cmp	r3, #96	@ 0x60
 800332a:	d050      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x11a>
 800332c:	2b60      	cmp	r3, #96	@ 0x60
 800332e:	d877      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003330:	2b50      	cmp	r3, #80	@ 0x50
 8003332:	d03c      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0xfa>
 8003334:	2b50      	cmp	r3, #80	@ 0x50
 8003336:	d873      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003338:	2b40      	cmp	r3, #64	@ 0x40
 800333a:	d058      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x13a>
 800333c:	2b40      	cmp	r3, #64	@ 0x40
 800333e:	d86f      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003340:	2b30      	cmp	r3, #48	@ 0x30
 8003342:	d064      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x15a>
 8003344:	2b30      	cmp	r3, #48	@ 0x30
 8003346:	d86b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d060      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x15a>
 800334c:	2b20      	cmp	r3, #32
 800334e:	d867      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d05c      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x15a>
 8003354:	2b10      	cmp	r3, #16
 8003356:	d05a      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x15a>
 8003358:	e062      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800336a:	f000 fb25 	bl	80039b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800337c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	609a      	str	r2, [r3, #8]
      break;
 8003386:	e04f      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003398:	f000 fb0e 	bl	80039b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033aa:	609a      	str	r2, [r3, #8]
      break;
 80033ac:	e03c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	461a      	mov	r2, r3
 80033bc:	f000 fa82 	bl	80038c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2150      	movs	r1, #80	@ 0x50
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fadb 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 80033cc:	e02c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033da:	461a      	mov	r2, r3
 80033dc:	f000 faa1 	bl	8003922 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2160      	movs	r1, #96	@ 0x60
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 facb 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 80033ec:	e01c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	461a      	mov	r2, r3
 80033fc:	f000 fa62 	bl	80038c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2140      	movs	r1, #64	@ 0x40
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fabb 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 800340c:	e00c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f000 fab2 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 800341e:	e003      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
      break;
 8003424:	e000      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003590 <TIM_Base_SetConfig+0xfc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00f      	beq.n	80034cc <TIM_Base_SetConfig+0x38>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b2:	d00b      	beq.n	80034cc <TIM_Base_SetConfig+0x38>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a37      	ldr	r2, [pc, #220]	@ (8003594 <TIM_Base_SetConfig+0x100>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d007      	beq.n	80034cc <TIM_Base_SetConfig+0x38>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a36      	ldr	r2, [pc, #216]	@ (8003598 <TIM_Base_SetConfig+0x104>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d003      	beq.n	80034cc <TIM_Base_SetConfig+0x38>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a35      	ldr	r2, [pc, #212]	@ (800359c <TIM_Base_SetConfig+0x108>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d108      	bne.n	80034de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003590 <TIM_Base_SetConfig+0xfc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01b      	beq.n	800351e <TIM_Base_SetConfig+0x8a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ec:	d017      	beq.n	800351e <TIM_Base_SetConfig+0x8a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a28      	ldr	r2, [pc, #160]	@ (8003594 <TIM_Base_SetConfig+0x100>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <TIM_Base_SetConfig+0x8a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a27      	ldr	r2, [pc, #156]	@ (8003598 <TIM_Base_SetConfig+0x104>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00f      	beq.n	800351e <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a26      	ldr	r2, [pc, #152]	@ (800359c <TIM_Base_SetConfig+0x108>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00b      	beq.n	800351e <TIM_Base_SetConfig+0x8a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a25      	ldr	r2, [pc, #148]	@ (80035a0 <TIM_Base_SetConfig+0x10c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d007      	beq.n	800351e <TIM_Base_SetConfig+0x8a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a24      	ldr	r2, [pc, #144]	@ (80035a4 <TIM_Base_SetConfig+0x110>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d003      	beq.n	800351e <TIM_Base_SetConfig+0x8a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a23      	ldr	r2, [pc, #140]	@ (80035a8 <TIM_Base_SetConfig+0x114>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d108      	bne.n	8003530 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a0e      	ldr	r2, [pc, #56]	@ (8003590 <TIM_Base_SetConfig+0xfc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d103      	bne.n	8003564 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d105      	bne.n	8003582 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f023 0201 	bic.w	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	611a      	str	r2, [r3, #16]
  }
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00
 80035a0:	40014000 	.word	0x40014000
 80035a4:	40014400 	.word	0x40014400
 80035a8:	40014800 	.word	0x40014800

080035ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	f023 0201 	bic.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f023 0302 	bic.w	r3, r3, #2
 80035f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a1c      	ldr	r2, [pc, #112]	@ (8003674 <TIM_OC1_SetConfig+0xc8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d10c      	bne.n	8003622 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f023 0308 	bic.w	r3, r3, #8
 800360e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f023 0304 	bic.w	r3, r3, #4
 8003620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a13      	ldr	r2, [pc, #76]	@ (8003674 <TIM_OC1_SetConfig+0xc8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d111      	bne.n	800364e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	621a      	str	r2, [r3, #32]
}
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40010000 	.word	0x40010000

08003678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f023 0210 	bic.w	r2, r3, #16
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f023 0320 	bic.w	r3, r3, #32
 80036c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a1e      	ldr	r2, [pc, #120]	@ (800374c <TIM_OC2_SetConfig+0xd4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d10d      	bne.n	80036f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a15      	ldr	r2, [pc, #84]	@ (800374c <TIM_OC2_SetConfig+0xd4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d113      	bne.n	8003724 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800370a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40010000 	.word	0x40010000

08003750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0303 	bic.w	r3, r3, #3
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003820 <TIM_OC3_SetConfig+0xd0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d10d      	bne.n	80037ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a14      	ldr	r2, [pc, #80]	@ (8003820 <TIM_OC3_SetConfig+0xd0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d113      	bne.n	80037fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	621a      	str	r2, [r3, #32]
}
 8003814:	bf00      	nop
 8003816:	371c      	adds	r7, #28
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	40010000 	.word	0x40010000

08003824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800385a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	021b      	lsls	r3, r3, #8
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800386e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	031b      	lsls	r3, r3, #12
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a10      	ldr	r2, [pc, #64]	@ (80038c0 <TIM_OC4_SetConfig+0x9c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d109      	bne.n	8003898 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800388a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	019b      	lsls	r3, r3, #6
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40010000 	.word	0x40010000

080038c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f023 0201 	bic.w	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 030a 	bic.w	r3, r3, #10
 8003900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	621a      	str	r2, [r3, #32]
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003922:	b480      	push	{r7}
 8003924:	b087      	sub	sp, #28
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	f023 0210 	bic.w	r2, r3, #16
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800394c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	031b      	lsls	r3, r3, #12
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800395e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	621a      	str	r2, [r3, #32]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	f043 0307 	orr.w	r3, r3, #7
 80039a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	609a      	str	r2, [r3, #8]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	431a      	orrs	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4313      	orrs	r3, r2
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	bf00      	nop
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1a      	ldr	r2, [r3, #32]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1a      	ldr	r2, [r3, #32]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	bf00      	nop
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e050      	b.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d018      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa8:	d013      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a18      	ldr	r2, [pc, #96]	@ (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a16      	ldr	r2, [pc, #88]	@ (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d009      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a15      	ldr	r2, [pc, #84]	@ (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a13      	ldr	r2, [pc, #76]	@ (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d10c      	bne.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800
 8003b18:	40000c00 	.word	0x40000c00
 8003b1c:	40014000 	.word	0x40014000

08003b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e042      	b.n	8003be0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd feb4 	bl	80018dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	@ 0x24
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f973 	bl	8003e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	@ 0x28
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d175      	bne.n	8003cf4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_UART_Transmit+0x2c>
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e06e      	b.n	8003cf6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2221      	movs	r2, #33	@ 0x21
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c26:	f7fd ffeb 	bl	8001c00 <HAL_GetTick>
 8003c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	88fa      	ldrh	r2, [r7, #6]
 8003c30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	88fa      	ldrh	r2, [r7, #6]
 8003c36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c40:	d108      	bne.n	8003c54 <HAL_UART_Transmit+0x6c>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d104      	bne.n	8003c54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e003      	b.n	8003c5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c5c:	e02e      	b.n	8003cbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2180      	movs	r1, #128	@ 0x80
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f848 	bl	8003cfe <UART_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e03a      	b.n	8003cf6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10b      	bne.n	8003c9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	3302      	adds	r3, #2
 8003c9a:	61bb      	str	r3, [r7, #24]
 8003c9c:	e007      	b.n	8003cae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	781a      	ldrb	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3301      	adds	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1cb      	bne.n	8003c5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2140      	movs	r1, #64	@ 0x40
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f814 	bl	8003cfe <UART_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e006      	b.n	8003cf6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0e:	e03b      	b.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d037      	beq.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d18:	f7fd ff72 	bl	8001c00 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	6a3a      	ldr	r2, [r7, #32]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d302      	bcc.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e03a      	b.n	8003da8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d023      	beq.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b80      	cmp	r3, #128	@ 0x80
 8003d44:	d020      	beq.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b40      	cmp	r3, #64	@ 0x40
 8003d4a:	d01d      	beq.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d116      	bne.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f81d 	bl	8003db0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2208      	movs	r2, #8
 8003d7a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e00f      	b.n	8003da8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4013      	ands	r3, r2
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d0b4      	beq.n	8003d10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b095      	sub	sp, #84	@ 0x54
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dd8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ddc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003dde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e5      	bne.n	8003db8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3314      	adds	r3, #20
 8003df2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3314      	adds	r3, #20
 8003e0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e5      	bne.n	8003dec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d119      	bne.n	8003e5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f023 0310 	bic.w	r3, r3, #16
 8003e3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e48:	61ba      	str	r2, [r7, #24]
 8003e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6979      	ldr	r1, [r7, #20]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	613b      	str	r3, [r7, #16]
   return(result);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e5      	bne.n	8003e28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e6a:	bf00      	nop
 8003e6c:	3754      	adds	r7, #84	@ 0x54
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e7c:	b0c0      	sub	sp, #256	@ 0x100
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e94:	68d9      	ldr	r1, [r3, #12]
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	ea40 0301 	orr.w	r3, r0, r1
 8003ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ed0:	f021 010c 	bic.w	r1, r1, #12
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef2:	6999      	ldr	r1, [r3, #24]
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	ea40 0301 	orr.w	r3, r0, r1
 8003efe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b8f      	ldr	r3, [pc, #572]	@ (8004144 <UART_SetConfig+0x2cc>)
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d005      	beq.n	8003f18 <UART_SetConfig+0xa0>
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4b8d      	ldr	r3, [pc, #564]	@ (8004148 <UART_SetConfig+0x2d0>)
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d104      	bne.n	8003f22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f18:	f7fe fdbe 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 8003f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f20:	e003      	b.n	8003f2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f22:	f7fe fda5 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8003f26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f34:	f040 810c 	bne.w	8004150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	1891      	adds	r1, r2, r2
 8003f50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f52:	415b      	adcs	r3, r3
 8003f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	eb12 0801 	adds.w	r8, r2, r1
 8003f60:	4629      	mov	r1, r5
 8003f62:	eb43 0901 	adc.w	r9, r3, r1
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f7a:	4690      	mov	r8, r2
 8003f7c:	4699      	mov	r9, r3
 8003f7e:	4623      	mov	r3, r4
 8003f80:	eb18 0303 	adds.w	r3, r8, r3
 8003f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f88:	462b      	mov	r3, r5
 8003f8a:	eb49 0303 	adc.w	r3, r9, r3
 8003f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	18db      	adds	r3, r3, r3
 8003faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fac:	4613      	mov	r3, r2
 8003fae:	eb42 0303 	adc.w	r3, r2, r3
 8003fb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003fbc:	f7fc fd56 	bl	8000a6c <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4b61      	ldr	r3, [pc, #388]	@ (800414c <UART_SetConfig+0x2d4>)
 8003fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	011c      	lsls	r4, r3, #4
 8003fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	1891      	adds	r1, r2, r2
 8003fe6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003fe8:	415b      	adcs	r3, r3
 8003fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	eb43 0b01 	adc.w	fp, r3, r1
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800400c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004010:	4692      	mov	sl, r2
 8004012:	469b      	mov	fp, r3
 8004014:	4643      	mov	r3, r8
 8004016:	eb1a 0303 	adds.w	r3, sl, r3
 800401a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800401e:	464b      	mov	r3, r9
 8004020:	eb4b 0303 	adc.w	r3, fp, r3
 8004024:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004034:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800403c:	460b      	mov	r3, r1
 800403e:	18db      	adds	r3, r3, r3
 8004040:	643b      	str	r3, [r7, #64]	@ 0x40
 8004042:	4613      	mov	r3, r2
 8004044:	eb42 0303 	adc.w	r3, r2, r3
 8004048:	647b      	str	r3, [r7, #68]	@ 0x44
 800404a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800404e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004052:	f7fc fd0b 	bl	8000a6c <__aeabi_uldivmod>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4611      	mov	r1, r2
 800405c:	4b3b      	ldr	r3, [pc, #236]	@ (800414c <UART_SetConfig+0x2d4>)
 800405e:	fba3 2301 	umull	r2, r3, r3, r1
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	2264      	movs	r2, #100	@ 0x64
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	1acb      	subs	r3, r1, r3
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004072:	4b36      	ldr	r3, [pc, #216]	@ (800414c <UART_SetConfig+0x2d4>)
 8004074:	fba3 2302 	umull	r2, r3, r3, r2
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004080:	441c      	add	r4, r3
 8004082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800408c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	1891      	adds	r1, r2, r2
 800409a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800409c:	415b      	adcs	r3, r3
 800409e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040a4:	4641      	mov	r1, r8
 80040a6:	1851      	adds	r1, r2, r1
 80040a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80040aa:	4649      	mov	r1, r9
 80040ac:	414b      	adcs	r3, r1
 80040ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040bc:	4659      	mov	r1, fp
 80040be:	00cb      	lsls	r3, r1, #3
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c6:	4651      	mov	r1, sl
 80040c8:	00ca      	lsls	r2, r1, #3
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	4642      	mov	r2, r8
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040d8:	464b      	mov	r3, r9
 80040da:	460a      	mov	r2, r1
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040f8:	460b      	mov	r3, r1
 80040fa:	18db      	adds	r3, r3, r3
 80040fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040fe:	4613      	mov	r3, r2
 8004100:	eb42 0303 	adc.w	r3, r2, r3
 8004104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800410a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800410e:	f7fc fcad 	bl	8000a6c <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4b0d      	ldr	r3, [pc, #52]	@ (800414c <UART_SetConfig+0x2d4>)
 8004118:	fba3 1302 	umull	r1, r3, r3, r2
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	2164      	movs	r1, #100	@ 0x64
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	3332      	adds	r3, #50	@ 0x32
 800412a:	4a08      	ldr	r2, [pc, #32]	@ (800414c <UART_SetConfig+0x2d4>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	f003 0207 	and.w	r2, r3, #7
 8004136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4422      	add	r2, r4
 800413e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004140:	e106      	b.n	8004350 <UART_SetConfig+0x4d8>
 8004142:	bf00      	nop
 8004144:	40011000 	.word	0x40011000
 8004148:	40011400 	.word	0x40011400
 800414c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004154:	2200      	movs	r2, #0
 8004156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800415a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800415e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004162:	4642      	mov	r2, r8
 8004164:	464b      	mov	r3, r9
 8004166:	1891      	adds	r1, r2, r2
 8004168:	6239      	str	r1, [r7, #32]
 800416a:	415b      	adcs	r3, r3
 800416c:	627b      	str	r3, [r7, #36]	@ 0x24
 800416e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004172:	4641      	mov	r1, r8
 8004174:	1854      	adds	r4, r2, r1
 8004176:	4649      	mov	r1, r9
 8004178:	eb43 0501 	adc.w	r5, r3, r1
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	00eb      	lsls	r3, r5, #3
 8004186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800418a:	00e2      	lsls	r2, r4, #3
 800418c:	4614      	mov	r4, r2
 800418e:	461d      	mov	r5, r3
 8004190:	4643      	mov	r3, r8
 8004192:	18e3      	adds	r3, r4, r3
 8004194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004198:	464b      	mov	r3, r9
 800419a:	eb45 0303 	adc.w	r3, r5, r3
 800419e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041be:	4629      	mov	r1, r5
 80041c0:	008b      	lsls	r3, r1, #2
 80041c2:	4621      	mov	r1, r4
 80041c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c8:	4621      	mov	r1, r4
 80041ca:	008a      	lsls	r2, r1, #2
 80041cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041d0:	f7fc fc4c 	bl	8000a6c <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4b60      	ldr	r3, [pc, #384]	@ (800435c <UART_SetConfig+0x4e4>)
 80041da:	fba3 2302 	umull	r2, r3, r3, r2
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	011c      	lsls	r4, r3, #4
 80041e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80041f4:	4642      	mov	r2, r8
 80041f6:	464b      	mov	r3, r9
 80041f8:	1891      	adds	r1, r2, r2
 80041fa:	61b9      	str	r1, [r7, #24]
 80041fc:	415b      	adcs	r3, r3
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004204:	4641      	mov	r1, r8
 8004206:	1851      	adds	r1, r2, r1
 8004208:	6139      	str	r1, [r7, #16]
 800420a:	4649      	mov	r1, r9
 800420c:	414b      	adcs	r3, r1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800421c:	4659      	mov	r1, fp
 800421e:	00cb      	lsls	r3, r1, #3
 8004220:	4651      	mov	r1, sl
 8004222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004226:	4651      	mov	r1, sl
 8004228:	00ca      	lsls	r2, r1, #3
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	4603      	mov	r3, r0
 8004230:	4642      	mov	r2, r8
 8004232:	189b      	adds	r3, r3, r2
 8004234:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004238:	464b      	mov	r3, r9
 800423a:	460a      	mov	r2, r1
 800423c:	eb42 0303 	adc.w	r3, r2, r3
 8004240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800424e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800425c:	4649      	mov	r1, r9
 800425e:	008b      	lsls	r3, r1, #2
 8004260:	4641      	mov	r1, r8
 8004262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004266:	4641      	mov	r1, r8
 8004268:	008a      	lsls	r2, r1, #2
 800426a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800426e:	f7fc fbfd 	bl	8000a6c <__aeabi_uldivmod>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4611      	mov	r1, r2
 8004278:	4b38      	ldr	r3, [pc, #224]	@ (800435c <UART_SetConfig+0x4e4>)
 800427a:	fba3 2301 	umull	r2, r3, r3, r1
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	2264      	movs	r2, #100	@ 0x64
 8004282:	fb02 f303 	mul.w	r3, r2, r3
 8004286:	1acb      	subs	r3, r1, r3
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	3332      	adds	r3, #50	@ 0x32
 800428c:	4a33      	ldr	r2, [pc, #204]	@ (800435c <UART_SetConfig+0x4e4>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004298:	441c      	add	r4, r3
 800429a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800429e:	2200      	movs	r2, #0
 80042a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80042a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80042a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	1891      	adds	r1, r2, r2
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	415b      	adcs	r3, r3
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b8:	4641      	mov	r1, r8
 80042ba:	1851      	adds	r1, r2, r1
 80042bc:	6039      	str	r1, [r7, #0]
 80042be:	4649      	mov	r1, r9
 80042c0:	414b      	adcs	r3, r1
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042d0:	4659      	mov	r1, fp
 80042d2:	00cb      	lsls	r3, r1, #3
 80042d4:	4651      	mov	r1, sl
 80042d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042da:	4651      	mov	r1, sl
 80042dc:	00ca      	lsls	r2, r1, #3
 80042de:	4610      	mov	r0, r2
 80042e0:	4619      	mov	r1, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	4642      	mov	r2, r8
 80042e6:	189b      	adds	r3, r3, r2
 80042e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ea:	464b      	mov	r3, r9
 80042ec:	460a      	mov	r2, r1
 80042ee:	eb42 0303 	adc.w	r3, r2, r3
 80042f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80042fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800430c:	4649      	mov	r1, r9
 800430e:	008b      	lsls	r3, r1, #2
 8004310:	4641      	mov	r1, r8
 8004312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004316:	4641      	mov	r1, r8
 8004318:	008a      	lsls	r2, r1, #2
 800431a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800431e:	f7fc fba5 	bl	8000a6c <__aeabi_uldivmod>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4b0d      	ldr	r3, [pc, #52]	@ (800435c <UART_SetConfig+0x4e4>)
 8004328:	fba3 1302 	umull	r1, r3, r3, r2
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	2164      	movs	r1, #100	@ 0x64
 8004330:	fb01 f303 	mul.w	r3, r1, r3
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	3332      	adds	r3, #50	@ 0x32
 800433a:	4a08      	ldr	r2, [pc, #32]	@ (800435c <UART_SetConfig+0x4e4>)
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	f003 020f 	and.w	r2, r3, #15
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4422      	add	r2, r4
 800434e:	609a      	str	r2, [r3, #8]
}
 8004350:	bf00      	nop
 8004352:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004356:	46bd      	mov	sp, r7
 8004358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435c:	51eb851f 	.word	0x51eb851f

08004360 <__NVIC_SetPriority>:
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	6039      	str	r1, [r7, #0]
 800436a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800436c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004370:	2b00      	cmp	r3, #0
 8004372:	db0a      	blt.n	800438a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	b2da      	uxtb	r2, r3
 8004378:	490c      	ldr	r1, [pc, #48]	@ (80043ac <__NVIC_SetPriority+0x4c>)
 800437a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437e:	0112      	lsls	r2, r2, #4
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	440b      	add	r3, r1
 8004384:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004388:	e00a      	b.n	80043a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	4908      	ldr	r1, [pc, #32]	@ (80043b0 <__NVIC_SetPriority+0x50>)
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	3b04      	subs	r3, #4
 8004398:	0112      	lsls	r2, r2, #4
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	440b      	add	r3, r1
 800439e:	761a      	strb	r2, [r3, #24]
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	e000e100 	.word	0xe000e100
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80043b8:	4b05      	ldr	r3, [pc, #20]	@ (80043d0 <SysTick_Handler+0x1c>)
 80043ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80043bc:	f001 fd18 	bl	8005df0 <xTaskGetSchedulerState>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d001      	beq.n	80043ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80043c6:	f002 fb0f 	bl	80069e8 <xPortSysTickHandler>
  }
}
 80043ca:	bf00      	nop
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	e000e010 	.word	0xe000e010

080043d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043d8:	2100      	movs	r1, #0
 80043da:	f06f 0004 	mvn.w	r0, #4
 80043de:	f7ff ffbf 	bl	8004360 <__NVIC_SetPriority>
#endif
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ee:	f3ef 8305 	mrs	r3, IPSR
 80043f2:	603b      	str	r3, [r7, #0]
  return(result);
 80043f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043fa:	f06f 0305 	mvn.w	r3, #5
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	e00c      	b.n	800441c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004402:	4b0a      	ldr	r3, [pc, #40]	@ (800442c <osKernelInitialize+0x44>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d105      	bne.n	8004416 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800440a:	4b08      	ldr	r3, [pc, #32]	@ (800442c <osKernelInitialize+0x44>)
 800440c:	2201      	movs	r2, #1
 800440e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004410:	2300      	movs	r3, #0
 8004412:	607b      	str	r3, [r7, #4]
 8004414:	e002      	b.n	800441c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800441c:	687b      	ldr	r3, [r7, #4]
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000344 	.word	0x20000344

08004430 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004436:	f3ef 8305 	mrs	r3, IPSR
 800443a:	603b      	str	r3, [r7, #0]
  return(result);
 800443c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004442:	f06f 0305 	mvn.w	r3, #5
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	e010      	b.n	800446c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800444a:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <osKernelStart+0x48>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d109      	bne.n	8004466 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004452:	f7ff ffbf 	bl	80043d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004456:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <osKernelStart+0x48>)
 8004458:	2202      	movs	r2, #2
 800445a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800445c:	f001 f87a 	bl	8005554 <vTaskStartScheduler>
      stat = osOK;
 8004460:	2300      	movs	r3, #0
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	e002      	b.n	800446c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800446c:	687b      	ldr	r3, [r7, #4]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000344 	.word	0x20000344

0800447c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b08e      	sub	sp, #56	@ 0x38
 8004480:	af04      	add	r7, sp, #16
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800448c:	f3ef 8305 	mrs	r3, IPSR
 8004490:	617b      	str	r3, [r7, #20]
  return(result);
 8004492:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004494:	2b00      	cmp	r3, #0
 8004496:	d17e      	bne.n	8004596 <osThreadNew+0x11a>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d07b      	beq.n	8004596 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800449e:	2380      	movs	r3, #128	@ 0x80
 80044a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044a2:	2318      	movs	r3, #24
 80044a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80044aa:	f04f 33ff 	mov.w	r3, #4294967295
 80044ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d045      	beq.n	8004542 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <osThreadNew+0x48>
        name = attr->name;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <osThreadNew+0x6e>
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b38      	cmp	r3, #56	@ 0x38
 80044dc:	d805      	bhi.n	80044ea <osThreadNew+0x6e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <osThreadNew+0x72>
        return (NULL);
 80044ea:	2300      	movs	r3, #0
 80044ec:	e054      	b.n	8004598 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00e      	beq.n	8004524 <osThreadNew+0xa8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b5b      	cmp	r3, #91	@ 0x5b
 800450c:	d90a      	bls.n	8004524 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004512:	2b00      	cmp	r3, #0
 8004514:	d006      	beq.n	8004524 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <osThreadNew+0xa8>
        mem = 1;
 800451e:	2301      	movs	r3, #1
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	e010      	b.n	8004546 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10c      	bne.n	8004546 <osThreadNew+0xca>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d108      	bne.n	8004546 <osThreadNew+0xca>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <osThreadNew+0xca>
          mem = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	e001      	b.n	8004546 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d110      	bne.n	800456e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004554:	9202      	str	r2, [sp, #8]
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	6a3a      	ldr	r2, [r7, #32]
 8004560:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fe1a 	bl	800519c <xTaskCreateStatic>
 8004568:	4603      	mov	r3, r0
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	e013      	b.n	8004596 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d110      	bne.n	8004596 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	b29a      	uxth	r2, r3
 8004578:	f107 0310 	add.w	r3, r7, #16
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fe68 	bl	800525c <xTaskCreate>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d001      	beq.n	8004596 <osThreadNew+0x11a>
            hTask = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004596:	693b      	ldr	r3, [r7, #16]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3728      	adds	r7, #40	@ 0x28
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045a8:	f3ef 8305 	mrs	r3, IPSR
 80045ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <osDelay+0x1c>
    stat = osErrorISR;
 80045b4:	f06f 0305 	mvn.w	r3, #5
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	e007      	b.n	80045cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 ff8e 	bl	80054e8 <vTaskDelay>
    }
  }

  return (stat);
 80045cc:	68fb      	ldr	r3, [r7, #12]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4a07      	ldr	r2, [pc, #28]	@ (8004604 <vApplicationGetIdleTaskMemory+0x2c>)
 80045e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4a06      	ldr	r2, [pc, #24]	@ (8004608 <vApplicationGetIdleTaskMemory+0x30>)
 80045ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2280      	movs	r2, #128	@ 0x80
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000348 	.word	0x20000348
 8004608:	200003a4 	.word	0x200003a4

0800460c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4a07      	ldr	r2, [pc, #28]	@ (8004638 <vApplicationGetTimerTaskMemory+0x2c>)
 800461c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4a06      	ldr	r2, [pc, #24]	@ (800463c <vApplicationGetTimerTaskMemory+0x30>)
 8004622:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800462a:	601a      	str	r2, [r3, #0]
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	200005a4 	.word	0x200005a4
 800463c:	20000600 	.word	0x20000600

08004640 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f103 0208 	add.w	r2, r3, #8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f04f 32ff 	mov.w	r2, #4294967295
 8004658:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f103 0208 	add.w	r2, r3, #8
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f103 0208 	add.w	r2, r3, #8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	601a      	str	r2, [r3, #0]
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d103      	bne.n	8004702 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	e00c      	b.n	800471c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3308      	adds	r3, #8
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e002      	b.n	8004710 <vListInsert+0x2e>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d2f6      	bcs.n	800470a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	601a      	str	r2, [r3, #0]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6892      	ldr	r2, [r2, #8]
 800476a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6852      	ldr	r2, [r2, #4]
 8004774:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	429a      	cmp	r2, r3
 800477e:	d103      	bne.n	8004788 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	1e5a      	subs	r2, r3, #1
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10b      	bne.n	80047d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047ce:	bf00      	nop
 80047d0:	bf00      	nop
 80047d2:	e7fd      	b.n	80047d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047d4:	f002 f878 	bl	80068c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e0:	68f9      	ldr	r1, [r7, #12]
 80047e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	441a      	add	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004804:	3b01      	subs	r3, #1
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	441a      	add	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	22ff      	movs	r2, #255	@ 0xff
 8004818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	22ff      	movs	r2, #255	@ 0xff
 8004820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d114      	bne.n	8004854 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01a      	beq.n	8004868 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3310      	adds	r3, #16
 8004836:	4618      	mov	r0, r3
 8004838:	f001 f91a 	bl	8005a70 <xTaskRemoveFromEventList>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d012      	beq.n	8004868 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004842:	4b0d      	ldr	r3, [pc, #52]	@ (8004878 <xQueueGenericReset+0xd0>)
 8004844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	e009      	b.n	8004868 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3310      	adds	r3, #16
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff fef1 	bl	8004640 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3324      	adds	r3, #36	@ 0x24
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff feec 	bl	8004640 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004868:	f002 f860 	bl	800692c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800486c:	2301      	movs	r3, #1
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08e      	sub	sp, #56	@ 0x38
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10b      	bne.n	80048c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	e7fd      	b.n	80048c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <xQueueGenericCreateStatic+0x56>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <xQueueGenericCreateStatic+0x5a>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <xQueueGenericCreateStatic+0x5c>
 80048d6:	2300      	movs	r3, #0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10b      	bne.n	80048f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	623b      	str	r3, [r7, #32]
}
 80048ee:	bf00      	nop
 80048f0:	bf00      	nop
 80048f2:	e7fd      	b.n	80048f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d102      	bne.n	8004900 <xQueueGenericCreateStatic+0x84>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <xQueueGenericCreateStatic+0x88>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <xQueueGenericCreateStatic+0x8a>
 8004904:	2300      	movs	r3, #0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10b      	bne.n	8004922 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	61fb      	str	r3, [r7, #28]
}
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	e7fd      	b.n	800491e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004922:	2350      	movs	r3, #80	@ 0x50
 8004924:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b50      	cmp	r3, #80	@ 0x50
 800492a:	d00b      	beq.n	8004944 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	61bb      	str	r3, [r7, #24]
}
 800493e:	bf00      	nop
 8004940:	bf00      	nop
 8004942:	e7fd      	b.n	8004940 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004944:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800494a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00d      	beq.n	800496c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004958:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	4613      	mov	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f805 	bl	8004976 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800496c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800496e:	4618      	mov	r0, r3
 8004970:	3730      	adds	r7, #48	@ 0x30
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d103      	bne.n	8004992 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e002      	b.n	8004998 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049a4:	2101      	movs	r1, #1
 80049a6:	69b8      	ldr	r0, [r7, #24]
 80049a8:	f7ff fefe 	bl	80047a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08e      	sub	sp, #56	@ 0x38
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049ca:	2300      	movs	r3, #0
 80049cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <xQueueGenericSend+0x34>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <xQueueGenericSend+0x42>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <xQueueGenericSend+0x46>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <xQueueGenericSend+0x48>
 8004a02:	2300      	movs	r3, #0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <xQueueGenericSend+0x64>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d103      	bne.n	8004a2e <xQueueGenericSend+0x72>
 8004a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <xQueueGenericSend+0x76>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <xQueueGenericSend+0x78>
 8004a32:	2300      	movs	r3, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <xQueueGenericSend+0x94>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	623b      	str	r3, [r7, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	e7fd      	b.n	8004a4c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a50:	f001 f9ce 	bl	8005df0 <xTaskGetSchedulerState>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <xQueueGenericSend+0xa4>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <xQueueGenericSend+0xa8>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <xQueueGenericSend+0xaa>
 8004a64:	2300      	movs	r3, #0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <xQueueGenericSend+0xc6>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	61fb      	str	r3, [r7, #28]
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	e7fd      	b.n	8004a7e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a82:	f001 ff21 	bl	80068c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d302      	bcc.n	8004a98 <xQueueGenericSend+0xdc>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d129      	bne.n	8004aec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a9e:	f000 fa0f 	bl	8004ec0 <prvCopyDataToQueue>
 8004aa2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d010      	beq.n	8004ace <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aae:	3324      	adds	r3, #36	@ 0x24
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 ffdd 	bl	8005a70 <xTaskRemoveFromEventList>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d013      	beq.n	8004ae4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004abc:	4b3f      	ldr	r3, [pc, #252]	@ (8004bbc <xQueueGenericSend+0x200>)
 8004abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	e00a      	b.n	8004ae4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ad4:	4b39      	ldr	r3, [pc, #228]	@ (8004bbc <xQueueGenericSend+0x200>)
 8004ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ae4:	f001 ff22 	bl	800692c <vPortExitCritical>
				return pdPASS;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e063      	b.n	8004bb4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d103      	bne.n	8004afa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004af2:	f001 ff1b 	bl	800692c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	e05c      	b.n	8004bb4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d106      	bne.n	8004b0e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b00:	f107 0314 	add.w	r3, r7, #20
 8004b04:	4618      	mov	r0, r3
 8004b06:	f001 f817 	bl	8005b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b0e:	f001 ff0d 	bl	800692c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b12:	f000 fd87 	bl	8005624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b16:	f001 fed7 	bl	80068c8 <vPortEnterCritical>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b20:	b25b      	sxtb	r3, r3
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d103      	bne.n	8004b30 <xQueueGenericSend+0x174>
 8004b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b36:	b25b      	sxtb	r3, r3
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3c:	d103      	bne.n	8004b46 <xQueueGenericSend+0x18a>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b46:	f001 fef1 	bl	800692c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b4a:	1d3a      	adds	r2, r7, #4
 8004b4c:	f107 0314 	add.w	r3, r7, #20
 8004b50:	4611      	mov	r1, r2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 f806 	bl	8005b64 <xTaskCheckForTimeOut>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d124      	bne.n	8004ba8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b60:	f000 faa6 	bl	80050b0 <prvIsQueueFull>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d018      	beq.n	8004b9c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6c:	3310      	adds	r3, #16
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 ff2a 	bl	80059cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b7a:	f000 fa31 	bl	8004fe0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b7e:	f000 fd5f 	bl	8005640 <xTaskResumeAll>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f47f af7c 	bne.w	8004a82 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004bbc <xQueueGenericSend+0x200>)
 8004b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	e772      	b.n	8004a82 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b9e:	f000 fa1f 	bl	8004fe0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ba2:	f000 fd4d 	bl	8005640 <xTaskResumeAll>
 8004ba6:	e76c      	b.n	8004a82 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ba8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004baa:	f000 fa19 	bl	8004fe0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bae:	f000 fd47 	bl	8005640 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3738      	adds	r7, #56	@ 0x38
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b090      	sub	sp, #64	@ 0x40
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10b      	bne.n	8004bf0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
 8004bee:	e7fd      	b.n	8004bec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <xQueueGenericSendFromISR+0x3e>
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <xQueueGenericSendFromISR+0x42>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <xQueueGenericSendFromISR+0x44>
 8004c02:	2300      	movs	r3, #0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10b      	bne.n	8004c20 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c1a:	bf00      	nop
 8004c1c:	bf00      	nop
 8004c1e:	e7fd      	b.n	8004c1c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d103      	bne.n	8004c2e <xQueueGenericSendFromISR+0x6e>
 8004c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <xQueueGenericSendFromISR+0x72>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <xQueueGenericSendFromISR+0x74>
 8004c32:	2300      	movs	r3, #0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10b      	bne.n	8004c50 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	623b      	str	r3, [r7, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	bf00      	nop
 8004c4e:	e7fd      	b.n	8004c4c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c50:	f001 ff1a 	bl	8006a88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c54:	f3ef 8211 	mrs	r2, BASEPRI
 8004c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	61fa      	str	r2, [r7, #28]
 8004c6a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c6e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d302      	bcc.n	8004c82 <xQueueGenericSendFromISR+0xc2>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d12f      	bne.n	8004ce2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c98:	f000 f912 	bl	8004ec0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d112      	bne.n	8004ccc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb0:	3324      	adds	r3, #36	@ 0x24
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fedc 	bl	8005a70 <xTaskRemoveFromEventList>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00e      	beq.n	8004cdc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00b      	beq.n	8004cdc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e007      	b.n	8004cdc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ccc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	b25a      	sxtb	r2, r3
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004ce0:	e001      	b.n	8004ce6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cf0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3740      	adds	r7, #64	@ 0x40
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08c      	sub	sp, #48	@ 0x30
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10b      	bne.n	8004d2e <xQueueReceive+0x32>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	623b      	str	r3, [r7, #32]
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	e7fd      	b.n	8004d2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d103      	bne.n	8004d3c <xQueueReceive+0x40>
 8004d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <xQueueReceive+0x44>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <xQueueReceive+0x46>
 8004d40:	2300      	movs	r3, #0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10b      	bne.n	8004d5e <xQueueReceive+0x62>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	61fb      	str	r3, [r7, #28]
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	e7fd      	b.n	8004d5a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d5e:	f001 f847 	bl	8005df0 <xTaskGetSchedulerState>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <xQueueReceive+0x72>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <xQueueReceive+0x76>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <xQueueReceive+0x78>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10b      	bne.n	8004d90 <xQueueReceive+0x94>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	61bb      	str	r3, [r7, #24]
}
 8004d8a:	bf00      	nop
 8004d8c:	bf00      	nop
 8004d8e:	e7fd      	b.n	8004d8c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d90:	f001 fd9a 	bl	80068c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01f      	beq.n	8004de0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004da4:	f000 f8f6 	bl	8004f94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	1e5a      	subs	r2, r3, #1
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00f      	beq.n	8004dd8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dba:	3310      	adds	r3, #16
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fe57 	bl	8005a70 <xTaskRemoveFromEventList>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dc8:	4b3c      	ldr	r3, [pc, #240]	@ (8004ebc <xQueueReceive+0x1c0>)
 8004dca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dd8:	f001 fda8 	bl	800692c <vPortExitCritical>
				return pdPASS;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e069      	b.n	8004eb4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004de6:	f001 fda1 	bl	800692c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e062      	b.n	8004eb4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004df4:	f107 0310 	add.w	r3, r7, #16
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fe9d 	bl	8005b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e02:	f001 fd93 	bl	800692c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e06:	f000 fc0d 	bl	8005624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e0a:	f001 fd5d 	bl	80068c8 <vPortEnterCritical>
 8004e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e14:	b25b      	sxtb	r3, r3
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1a:	d103      	bne.n	8004e24 <xQueueReceive+0x128>
 8004e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e2a:	b25b      	sxtb	r3, r3
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d103      	bne.n	8004e3a <xQueueReceive+0x13e>
 8004e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e3a:	f001 fd77 	bl	800692c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e3e:	1d3a      	adds	r2, r7, #4
 8004e40:	f107 0310 	add.w	r3, r7, #16
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fe8c 	bl	8005b64 <xTaskCheckForTimeOut>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d123      	bne.n	8004e9a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e54:	f000 f916 	bl	8005084 <prvIsQueueEmpty>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d017      	beq.n	8004e8e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e60:	3324      	adds	r3, #36	@ 0x24
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	4611      	mov	r1, r2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fdb0 	bl	80059cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e6e:	f000 f8b7 	bl	8004fe0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e72:	f000 fbe5 	bl	8005640 <xTaskResumeAll>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d189      	bne.n	8004d90 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004ebc <xQueueReceive+0x1c0>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	e780      	b.n	8004d90 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e90:	f000 f8a6 	bl	8004fe0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e94:	f000 fbd4 	bl	8005640 <xTaskResumeAll>
 8004e98:	e77a      	b.n	8004d90 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e9c:	f000 f8a0 	bl	8004fe0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ea0:	f000 fbce 	bl	8005640 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ea6:	f000 f8ed 	bl	8005084 <prvIsQueueEmpty>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f43f af6f 	beq.w	8004d90 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004eb2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3730      	adds	r7, #48	@ 0x30
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10d      	bne.n	8004efa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d14d      	bne.n	8004f82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 ff9e 	bl	8005e2c <xTaskPriorityDisinherit>
 8004ef0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	609a      	str	r2, [r3, #8]
 8004ef8:	e043      	b.n	8004f82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d119      	bne.n	8004f34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6858      	ldr	r0, [r3, #4]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f08:	461a      	mov	r2, r3
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	f002 f840 	bl	8006f90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f18:	441a      	add	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d32b      	bcc.n	8004f82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	e026      	b.n	8004f82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68d8      	ldr	r0, [r3, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	f002 f826 	bl	8006f90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4c:	425b      	negs	r3, r3
 8004f4e:	441a      	add	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d207      	bcs.n	8004f70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f68:	425b      	negs	r3, r3
 8004f6a:	441a      	add	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d105      	bne.n	8004f82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f8a:	697b      	ldr	r3, [r7, #20]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d018      	beq.n	8004fd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	441a      	add	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d303      	bcc.n	8004fc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68d9      	ldr	r1, [r3, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	6838      	ldr	r0, [r7, #0]
 8004fd4:	f001 ffdc 	bl	8006f90 <memcpy>
	}
}
 8004fd8:	bf00      	nop
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fe8:	f001 fc6e 	bl	80068c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ff2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ff4:	e011      	b.n	800501a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d012      	beq.n	8005024 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3324      	adds	r3, #36	@ 0x24
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fd34 	bl	8005a70 <xTaskRemoveFromEventList>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800500e:	f000 fe0d 	bl	8005c2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	3b01      	subs	r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800501a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800501e:	2b00      	cmp	r3, #0
 8005020:	dce9      	bgt.n	8004ff6 <prvUnlockQueue+0x16>
 8005022:	e000      	b.n	8005026 <prvUnlockQueue+0x46>
					break;
 8005024:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	22ff      	movs	r2, #255	@ 0xff
 800502a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800502e:	f001 fc7d 	bl	800692c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005032:	f001 fc49 	bl	80068c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800503c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800503e:	e011      	b.n	8005064 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d012      	beq.n	800506e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3310      	adds	r3, #16
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fd0f 	bl	8005a70 <xTaskRemoveFromEventList>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005058:	f000 fde8 	bl	8005c2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800505c:	7bbb      	ldrb	r3, [r7, #14]
 800505e:	3b01      	subs	r3, #1
 8005060:	b2db      	uxtb	r3, r3
 8005062:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005068:	2b00      	cmp	r3, #0
 800506a:	dce9      	bgt.n	8005040 <prvUnlockQueue+0x60>
 800506c:	e000      	b.n	8005070 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800506e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	22ff      	movs	r2, #255	@ 0xff
 8005074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005078:	f001 fc58 	bl	800692c <vPortExitCritical>
}
 800507c:	bf00      	nop
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800508c:	f001 fc1c 	bl	80068c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005094:	2b00      	cmp	r3, #0
 8005096:	d102      	bne.n	800509e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e001      	b.n	80050a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050a2:	f001 fc43 	bl	800692c <vPortExitCritical>

	return xReturn;
 80050a6:	68fb      	ldr	r3, [r7, #12]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050b8:	f001 fc06 	bl	80068c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d102      	bne.n	80050ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050c8:	2301      	movs	r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e001      	b.n	80050d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050d2:	f001 fc2b 	bl	800692c <vPortExitCritical>

	return xReturn;
 80050d6:	68fb      	ldr	r3, [r7, #12]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e014      	b.n	800511a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005130 <vQueueAddToRegistry+0x50>)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10b      	bne.n	8005114 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050fc:	490c      	ldr	r1, [pc, #48]	@ (8005130 <vQueueAddToRegistry+0x50>)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005106:	4a0a      	ldr	r2, [pc, #40]	@ (8005130 <vQueueAddToRegistry+0x50>)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4413      	add	r3, r2
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005112:	e006      	b.n	8005122 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3301      	adds	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b07      	cmp	r3, #7
 800511e:	d9e7      	bls.n	80050f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20000a00 	.word	0x20000a00

08005134 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005144:	f001 fbc0 	bl	80068c8 <vPortEnterCritical>
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800514e:	b25b      	sxtb	r3, r3
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d103      	bne.n	800515e <vQueueWaitForMessageRestricted+0x2a>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005164:	b25b      	sxtb	r3, r3
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	d103      	bne.n	8005174 <vQueueWaitForMessageRestricted+0x40>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005174:	f001 fbda 	bl	800692c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517c:	2b00      	cmp	r3, #0
 800517e:	d106      	bne.n	800518e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	3324      	adds	r3, #36	@ 0x24
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fc45 	bl	8005a18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800518e:	6978      	ldr	r0, [r7, #20]
 8005190:	f7ff ff26 	bl	8004fe0 <prvUnlockQueue>
	}
 8005194:	bf00      	nop
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08e      	sub	sp, #56	@ 0x38
 80051a0:	af04      	add	r7, sp, #16
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	623b      	str	r3, [r7, #32]
}
 80051c2:	bf00      	nop
 80051c4:	bf00      	nop
 80051c6:	e7fd      	b.n	80051c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10b      	bne.n	80051e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	61fb      	str	r3, [r7, #28]
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	e7fd      	b.n	80051e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051e6:	235c      	movs	r3, #92	@ 0x5c
 80051e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80051ee:	d00b      	beq.n	8005208 <xTaskCreateStatic+0x6c>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	61bb      	str	r3, [r7, #24]
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005208:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800520a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01e      	beq.n	800524e <xTaskCreateStatic+0xb2>
 8005210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005212:	2b00      	cmp	r3, #0
 8005214:	d01b      	beq.n	800524e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005218:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	2202      	movs	r2, #2
 8005224:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005228:	2300      	movs	r3, #0
 800522a:	9303      	str	r3, [sp, #12]
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	9302      	str	r3, [sp, #8]
 8005230:	f107 0314 	add.w	r3, r7, #20
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 f850 	bl	80052e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005246:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005248:	f000 f8de 	bl	8005408 <prvAddNewTaskToReadyList>
 800524c:	e001      	b.n	8005252 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005252:	697b      	ldr	r3, [r7, #20]
	}
 8005254:	4618      	mov	r0, r3
 8005256:	3728      	adds	r7, #40	@ 0x28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08c      	sub	sp, #48	@ 0x30
 8005260:	af04      	add	r7, sp, #16
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4618      	mov	r0, r3
 8005272:	f001 fc4b 	bl	8006b0c <pvPortMalloc>
 8005276:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00e      	beq.n	800529c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800527e:	205c      	movs	r0, #92	@ 0x5c
 8005280:	f001 fc44 	bl	8006b0c <pvPortMalloc>
 8005284:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	631a      	str	r2, [r3, #48]	@ 0x30
 8005292:	e005      	b.n	80052a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005294:	6978      	ldr	r0, [r7, #20]
 8005296:	f001 fd07 	bl	8006ca8 <vPortFree>
 800529a:	e001      	b.n	80052a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800529c:	2300      	movs	r3, #0
 800529e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d017      	beq.n	80052d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	2300      	movs	r3, #0
 80052b2:	9303      	str	r3, [sp, #12]
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	9302      	str	r3, [sp, #8]
 80052b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ba:	9301      	str	r3, [sp, #4]
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f80e 	bl	80052e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052ca:	69f8      	ldr	r0, [r7, #28]
 80052cc:	f000 f89c 	bl	8005408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052d0:	2301      	movs	r3, #1
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	e002      	b.n	80052dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052d6:	f04f 33ff 	mov.w	r3, #4294967295
 80052da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052dc:	69bb      	ldr	r3, [r7, #24]
	}
 80052de:	4618      	mov	r0, r3
 80052e0:	3720      	adds	r7, #32
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b088      	sub	sp, #32
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	607a      	str	r2, [r7, #4]
 80052f2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	461a      	mov	r2, r3
 80052fe:	21a5      	movs	r1, #165	@ 0xa5
 8005300:	f001 fe12 	bl	8006f28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800530e:	3b01      	subs	r3, #1
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f023 0307 	bic.w	r3, r3, #7
 800531c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	617b      	str	r3, [r7, #20]
}
 800533a:	bf00      	nop
 800533c:	bf00      	nop
 800533e:	e7fd      	b.n	800533c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d01f      	beq.n	8005386 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	e012      	b.n	8005372 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	7819      	ldrb	r1, [r3, #0]
 8005354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	3334      	adds	r3, #52	@ 0x34
 800535c:	460a      	mov	r2, r1
 800535e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d006      	beq.n	800537a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	3301      	adds	r3, #1
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	2b0f      	cmp	r3, #15
 8005376:	d9e9      	bls.n	800534c <prvInitialiseNewTask+0x66>
 8005378:	e000      	b.n	800537c <prvInitialiseNewTask+0x96>
			{
				break;
 800537a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800537c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005384:	e003      	b.n	800538e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800538e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005390:	2b37      	cmp	r3, #55	@ 0x37
 8005392:	d901      	bls.n	8005398 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005394:	2337      	movs	r3, #55	@ 0x37
 8005396:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800539c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053a2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80053a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a6:	2200      	movs	r2, #0
 80053a8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ac:	3304      	adds	r3, #4
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff f966 	bl	8004680 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b6:	3318      	adds	r3, #24
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff f961 	bl	8004680 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80053ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d6:	2200      	movs	r2, #0
 80053d8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	68f9      	ldr	r1, [r7, #12]
 80053e6:	69b8      	ldr	r0, [r7, #24]
 80053e8:	f001 f93e 	bl	8006668 <pxPortInitialiseStack>
 80053ec:	4602      	mov	r2, r0
 80053ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053fe:	bf00      	nop
 8005400:	3720      	adds	r7, #32
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005410:	f001 fa5a 	bl	80068c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005414:	4b2d      	ldr	r3, [pc, #180]	@ (80054cc <prvAddNewTaskToReadyList+0xc4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	4a2c      	ldr	r2, [pc, #176]	@ (80054cc <prvAddNewTaskToReadyList+0xc4>)
 800541c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800541e:	4b2c      	ldr	r3, [pc, #176]	@ (80054d0 <prvAddNewTaskToReadyList+0xc8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005426:	4a2a      	ldr	r2, [pc, #168]	@ (80054d0 <prvAddNewTaskToReadyList+0xc8>)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800542c:	4b27      	ldr	r3, [pc, #156]	@ (80054cc <prvAddNewTaskToReadyList+0xc4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d110      	bne.n	8005456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005434:	f000 fc1e 	bl	8005c74 <prvInitialiseTaskLists>
 8005438:	e00d      	b.n	8005456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800543a:	4b26      	ldr	r3, [pc, #152]	@ (80054d4 <prvAddNewTaskToReadyList+0xcc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005442:	4b23      	ldr	r3, [pc, #140]	@ (80054d0 <prvAddNewTaskToReadyList+0xc8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544c:	429a      	cmp	r2, r3
 800544e:	d802      	bhi.n	8005456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005450:	4a1f      	ldr	r2, [pc, #124]	@ (80054d0 <prvAddNewTaskToReadyList+0xc8>)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005456:	4b20      	ldr	r3, [pc, #128]	@ (80054d8 <prvAddNewTaskToReadyList+0xd0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3301      	adds	r3, #1
 800545c:	4a1e      	ldr	r2, [pc, #120]	@ (80054d8 <prvAddNewTaskToReadyList+0xd0>)
 800545e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005460:	4b1d      	ldr	r3, [pc, #116]	@ (80054d8 <prvAddNewTaskToReadyList+0xd0>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800546c:	4b1b      	ldr	r3, [pc, #108]	@ (80054dc <prvAddNewTaskToReadyList+0xd4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d903      	bls.n	800547c <prvAddNewTaskToReadyList+0x74>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	4a18      	ldr	r2, [pc, #96]	@ (80054dc <prvAddNewTaskToReadyList+0xd4>)
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4a15      	ldr	r2, [pc, #84]	@ (80054e0 <prvAddNewTaskToReadyList+0xd8>)
 800548a:	441a      	add	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	4619      	mov	r1, r3
 8005492:	4610      	mov	r0, r2
 8005494:	f7ff f901 	bl	800469a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005498:	f001 fa48 	bl	800692c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800549c:	4b0d      	ldr	r3, [pc, #52]	@ (80054d4 <prvAddNewTaskToReadyList+0xcc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00e      	beq.n	80054c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054a4:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <prvAddNewTaskToReadyList+0xc8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d207      	bcs.n	80054c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054b2:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <prvAddNewTaskToReadyList+0xdc>)
 80054b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000f14 	.word	0x20000f14
 80054d0:	20000a40 	.word	0x20000a40
 80054d4:	20000f20 	.word	0x20000f20
 80054d8:	20000f30 	.word	0x20000f30
 80054dc:	20000f1c 	.word	0x20000f1c
 80054e0:	20000a44 	.word	0x20000a44
 80054e4:	e000ed04 	.word	0xe000ed04

080054e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d018      	beq.n	800552c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054fa:	4b14      	ldr	r3, [pc, #80]	@ (800554c <vTaskDelay+0x64>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00b      	beq.n	800551a <vTaskDelay+0x32>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	60bb      	str	r3, [r7, #8]
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	e7fd      	b.n	8005516 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800551a:	f000 f883 	bl	8005624 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800551e:	2100      	movs	r1, #0
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fcf3 	bl	8005f0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005526:	f000 f88b 	bl	8005640 <xTaskResumeAll>
 800552a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d107      	bne.n	8005542 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005532:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <vTaskDelay+0x68>)
 8005534:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005542:	bf00      	nop
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20000f3c 	.word	0x20000f3c
 8005550:	e000ed04 	.word	0xe000ed04

08005554 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08a      	sub	sp, #40	@ 0x28
 8005558:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800555e:	2300      	movs	r3, #0
 8005560:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005562:	463a      	mov	r2, r7
 8005564:	1d39      	adds	r1, r7, #4
 8005566:	f107 0308 	add.w	r3, r7, #8
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff f834 	bl	80045d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	9202      	str	r2, [sp, #8]
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	2300      	movs	r3, #0
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	2300      	movs	r3, #0
 8005580:	460a      	mov	r2, r1
 8005582:	4922      	ldr	r1, [pc, #136]	@ (800560c <vTaskStartScheduler+0xb8>)
 8005584:	4822      	ldr	r0, [pc, #136]	@ (8005610 <vTaskStartScheduler+0xbc>)
 8005586:	f7ff fe09 	bl	800519c <xTaskCreateStatic>
 800558a:	4603      	mov	r3, r0
 800558c:	4a21      	ldr	r2, [pc, #132]	@ (8005614 <vTaskStartScheduler+0xc0>)
 800558e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005590:	4b20      	ldr	r3, [pc, #128]	@ (8005614 <vTaskStartScheduler+0xc0>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005598:	2301      	movs	r3, #1
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	e001      	b.n	80055a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800559e:	2300      	movs	r3, #0
 80055a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d102      	bne.n	80055ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055a8:	f000 fd04 	bl	8005fb4 <xTimerCreateTimerTask>
 80055ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d116      	bne.n	80055e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	613b      	str	r3, [r7, #16]
}
 80055c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055c8:	4b13      	ldr	r3, [pc, #76]	@ (8005618 <vTaskStartScheduler+0xc4>)
 80055ca:	f04f 32ff 	mov.w	r2, #4294967295
 80055ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055d0:	4b12      	ldr	r3, [pc, #72]	@ (800561c <vTaskStartScheduler+0xc8>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055d6:	4b12      	ldr	r3, [pc, #72]	@ (8005620 <vTaskStartScheduler+0xcc>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055dc:	f001 f8d0 	bl	8006780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055e0:	e00f      	b.n	8005602 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d10b      	bne.n	8005602 <vTaskStartScheduler+0xae>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60fb      	str	r3, [r7, #12]
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	e7fd      	b.n	80055fe <vTaskStartScheduler+0xaa>
}
 8005602:	bf00      	nop
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	080078ac 	.word	0x080078ac
 8005610:	08005c45 	.word	0x08005c45
 8005614:	20000f38 	.word	0x20000f38
 8005618:	20000f34 	.word	0x20000f34
 800561c:	20000f20 	.word	0x20000f20
 8005620:	20000f18 	.word	0x20000f18

08005624 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005628:	4b04      	ldr	r3, [pc, #16]	@ (800563c <vTaskSuspendAll+0x18>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3301      	adds	r3, #1
 800562e:	4a03      	ldr	r2, [pc, #12]	@ (800563c <vTaskSuspendAll+0x18>)
 8005630:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005632:	bf00      	nop
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	20000f3c 	.word	0x20000f3c

08005640 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800564a:	2300      	movs	r3, #0
 800564c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800564e:	4b42      	ldr	r3, [pc, #264]	@ (8005758 <xTaskResumeAll+0x118>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <xTaskResumeAll+0x2e>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	603b      	str	r3, [r7, #0]
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	e7fd      	b.n	800566a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800566e:	f001 f92b 	bl	80068c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005672:	4b39      	ldr	r3, [pc, #228]	@ (8005758 <xTaskResumeAll+0x118>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3b01      	subs	r3, #1
 8005678:	4a37      	ldr	r2, [pc, #220]	@ (8005758 <xTaskResumeAll+0x118>)
 800567a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800567c:	4b36      	ldr	r3, [pc, #216]	@ (8005758 <xTaskResumeAll+0x118>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d162      	bne.n	800574a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005684:	4b35      	ldr	r3, [pc, #212]	@ (800575c <xTaskResumeAll+0x11c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d05e      	beq.n	800574a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800568c:	e02f      	b.n	80056ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800568e:	4b34      	ldr	r3, [pc, #208]	@ (8005760 <xTaskResumeAll+0x120>)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3318      	adds	r3, #24
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff f85a 	bl	8004754 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff f855 	bl	8004754 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005764 <xTaskResumeAll+0x124>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d903      	bls.n	80056be <xTaskResumeAll+0x7e>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005764 <xTaskResumeAll+0x124>)
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4a27      	ldr	r2, [pc, #156]	@ (8005768 <xTaskResumeAll+0x128>)
 80056cc:	441a      	add	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f7fe ffe0 	bl	800469a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056de:	4b23      	ldr	r3, [pc, #140]	@ (800576c <xTaskResumeAll+0x12c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d302      	bcc.n	80056ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80056e8:	4b21      	ldr	r3, [pc, #132]	@ (8005770 <xTaskResumeAll+0x130>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005760 <xTaskResumeAll+0x120>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1cb      	bne.n	800568e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056fc:	f000 fb58 	bl	8005db0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005700:	4b1c      	ldr	r3, [pc, #112]	@ (8005774 <xTaskResumeAll+0x134>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d010      	beq.n	800572e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800570c:	f000 f846 	bl	800579c <xTaskIncrementTick>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005716:	4b16      	ldr	r3, [pc, #88]	@ (8005770 <xTaskResumeAll+0x130>)
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3b01      	subs	r3, #1
 8005720:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f1      	bne.n	800570c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005728:	4b12      	ldr	r3, [pc, #72]	@ (8005774 <xTaskResumeAll+0x134>)
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800572e:	4b10      	ldr	r3, [pc, #64]	@ (8005770 <xTaskResumeAll+0x130>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005736:	2301      	movs	r3, #1
 8005738:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800573a:	4b0f      	ldr	r3, [pc, #60]	@ (8005778 <xTaskResumeAll+0x138>)
 800573c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800574a:	f001 f8ef 	bl	800692c <vPortExitCritical>

	return xAlreadyYielded;
 800574e:	68bb      	ldr	r3, [r7, #8]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20000f3c 	.word	0x20000f3c
 800575c:	20000f14 	.word	0x20000f14
 8005760:	20000ed4 	.word	0x20000ed4
 8005764:	20000f1c 	.word	0x20000f1c
 8005768:	20000a44 	.word	0x20000a44
 800576c:	20000a40 	.word	0x20000a40
 8005770:	20000f28 	.word	0x20000f28
 8005774:	20000f24 	.word	0x20000f24
 8005778:	e000ed04 	.word	0xe000ed04

0800577c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005782:	4b05      	ldr	r3, [pc, #20]	@ (8005798 <xTaskGetTickCount+0x1c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005788:	687b      	ldr	r3, [r7, #4]
}
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	20000f18 	.word	0x20000f18

0800579c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057a6:	4b4f      	ldr	r3, [pc, #316]	@ (80058e4 <xTaskIncrementTick+0x148>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f040 8090 	bne.w	80058d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057b0:	4b4d      	ldr	r3, [pc, #308]	@ (80058e8 <xTaskIncrementTick+0x14c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057b8:	4a4b      	ldr	r2, [pc, #300]	@ (80058e8 <xTaskIncrementTick+0x14c>)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d121      	bne.n	8005808 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80057c4:	4b49      	ldr	r3, [pc, #292]	@ (80058ec <xTaskIncrementTick+0x150>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00b      	beq.n	80057e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	603b      	str	r3, [r7, #0]
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	e7fd      	b.n	80057e2 <xTaskIncrementTick+0x46>
 80057e6:	4b41      	ldr	r3, [pc, #260]	@ (80058ec <xTaskIncrementTick+0x150>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	4b40      	ldr	r3, [pc, #256]	@ (80058f0 <xTaskIncrementTick+0x154>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a3e      	ldr	r2, [pc, #248]	@ (80058ec <xTaskIncrementTick+0x150>)
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	4a3e      	ldr	r2, [pc, #248]	@ (80058f0 <xTaskIncrementTick+0x154>)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	4b3e      	ldr	r3, [pc, #248]	@ (80058f4 <xTaskIncrementTick+0x158>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3301      	adds	r3, #1
 8005800:	4a3c      	ldr	r2, [pc, #240]	@ (80058f4 <xTaskIncrementTick+0x158>)
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	f000 fad4 	bl	8005db0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005808:	4b3b      	ldr	r3, [pc, #236]	@ (80058f8 <xTaskIncrementTick+0x15c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	429a      	cmp	r2, r3
 8005810:	d349      	bcc.n	80058a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005812:	4b36      	ldr	r3, [pc, #216]	@ (80058ec <xTaskIncrementTick+0x150>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800581c:	4b36      	ldr	r3, [pc, #216]	@ (80058f8 <xTaskIncrementTick+0x15c>)
 800581e:	f04f 32ff 	mov.w	r2, #4294967295
 8005822:	601a      	str	r2, [r3, #0]
					break;
 8005824:	e03f      	b.n	80058a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005826:	4b31      	ldr	r3, [pc, #196]	@ (80058ec <xTaskIncrementTick+0x150>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	429a      	cmp	r2, r3
 800583c:	d203      	bcs.n	8005846 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800583e:	4a2e      	ldr	r2, [pc, #184]	@ (80058f8 <xTaskIncrementTick+0x15c>)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005844:	e02f      	b.n	80058a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	3304      	adds	r3, #4
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe ff82 	bl	8004754 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005854:	2b00      	cmp	r3, #0
 8005856:	d004      	beq.n	8005862 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	3318      	adds	r3, #24
 800585c:	4618      	mov	r0, r3
 800585e:	f7fe ff79 	bl	8004754 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005866:	4b25      	ldr	r3, [pc, #148]	@ (80058fc <xTaskIncrementTick+0x160>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d903      	bls.n	8005876 <xTaskIncrementTick+0xda>
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005872:	4a22      	ldr	r2, [pc, #136]	@ (80058fc <xTaskIncrementTick+0x160>)
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4a1f      	ldr	r2, [pc, #124]	@ (8005900 <xTaskIncrementTick+0x164>)
 8005884:	441a      	add	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	3304      	adds	r3, #4
 800588a:	4619      	mov	r1, r3
 800588c:	4610      	mov	r0, r2
 800588e:	f7fe ff04 	bl	800469a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005896:	4b1b      	ldr	r3, [pc, #108]	@ (8005904 <xTaskIncrementTick+0x168>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589c:	429a      	cmp	r2, r3
 800589e:	d3b8      	bcc.n	8005812 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058a4:	e7b5      	b.n	8005812 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058a6:	4b17      	ldr	r3, [pc, #92]	@ (8005904 <xTaskIncrementTick+0x168>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ac:	4914      	ldr	r1, [pc, #80]	@ (8005900 <xTaskIncrementTick+0x164>)
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d901      	bls.n	80058c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80058be:	2301      	movs	r3, #1
 80058c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058c2:	4b11      	ldr	r3, [pc, #68]	@ (8005908 <xTaskIncrementTick+0x16c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80058ca:	2301      	movs	r3, #1
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e004      	b.n	80058da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058d0:	4b0e      	ldr	r3, [pc, #56]	@ (800590c <xTaskIncrementTick+0x170>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	4a0d      	ldr	r2, [pc, #52]	@ (800590c <xTaskIncrementTick+0x170>)
 80058d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058da:	697b      	ldr	r3, [r7, #20]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000f3c 	.word	0x20000f3c
 80058e8:	20000f18 	.word	0x20000f18
 80058ec:	20000ecc 	.word	0x20000ecc
 80058f0:	20000ed0 	.word	0x20000ed0
 80058f4:	20000f2c 	.word	0x20000f2c
 80058f8:	20000f34 	.word	0x20000f34
 80058fc:	20000f1c 	.word	0x20000f1c
 8005900:	20000a44 	.word	0x20000a44
 8005904:	20000a40 	.word	0x20000a40
 8005908:	20000f28 	.word	0x20000f28
 800590c:	20000f24 	.word	0x20000f24

08005910 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005916:	4b28      	ldr	r3, [pc, #160]	@ (80059b8 <vTaskSwitchContext+0xa8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800591e:	4b27      	ldr	r3, [pc, #156]	@ (80059bc <vTaskSwitchContext+0xac>)
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005924:	e042      	b.n	80059ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005926:	4b25      	ldr	r3, [pc, #148]	@ (80059bc <vTaskSwitchContext+0xac>)
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592c:	4b24      	ldr	r3, [pc, #144]	@ (80059c0 <vTaskSwitchContext+0xb0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	e011      	b.n	8005958 <vTaskSwitchContext+0x48>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10b      	bne.n	8005952 <vTaskSwitchContext+0x42>
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	607b      	str	r3, [r7, #4]
}
 800594c:	bf00      	nop
 800594e:	bf00      	nop
 8005950:	e7fd      	b.n	800594e <vTaskSwitchContext+0x3e>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3b01      	subs	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	491a      	ldr	r1, [pc, #104]	@ (80059c4 <vTaskSwitchContext+0xb4>)
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0e3      	beq.n	8005934 <vTaskSwitchContext+0x24>
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4a13      	ldr	r2, [pc, #76]	@ (80059c4 <vTaskSwitchContext+0xb4>)
 8005978:	4413      	add	r3, r2
 800597a:	60bb      	str	r3, [r7, #8]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3308      	adds	r3, #8
 800598e:	429a      	cmp	r2, r3
 8005990:	d104      	bne.n	800599c <vTaskSwitchContext+0x8c>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	605a      	str	r2, [r3, #4]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	4a09      	ldr	r2, [pc, #36]	@ (80059c8 <vTaskSwitchContext+0xb8>)
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	4a06      	ldr	r2, [pc, #24]	@ (80059c0 <vTaskSwitchContext+0xb0>)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6013      	str	r3, [r2, #0]
}
 80059ac:	bf00      	nop
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	20000f3c 	.word	0x20000f3c
 80059bc:	20000f28 	.word	0x20000f28
 80059c0:	20000f1c 	.word	0x20000f1c
 80059c4:	20000a44 	.word	0x20000a44
 80059c8:	20000a40 	.word	0x20000a40

080059cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10b      	bne.n	80059f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	60fb      	str	r3, [r7, #12]
}
 80059ee:	bf00      	nop
 80059f0:	bf00      	nop
 80059f2:	e7fd      	b.n	80059f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059f4:	4b07      	ldr	r3, [pc, #28]	@ (8005a14 <vTaskPlaceOnEventList+0x48>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3318      	adds	r3, #24
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fe fe70 	bl	80046e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a02:	2101      	movs	r1, #1
 8005a04:	6838      	ldr	r0, [r7, #0]
 8005a06:	f000 fa81 	bl	8005f0c <prvAddCurrentTaskToDelayedList>
}
 8005a0a:	bf00      	nop
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000a40 	.word	0x20000a40

08005a18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10b      	bne.n	8005a42 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	617b      	str	r3, [r7, #20]
}
 8005a3c:	bf00      	nop
 8005a3e:	bf00      	nop
 8005a40:	e7fd      	b.n	8005a3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a42:	4b0a      	ldr	r3, [pc, #40]	@ (8005a6c <vTaskPlaceOnEventListRestricted+0x54>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3318      	adds	r3, #24
 8005a48:	4619      	mov	r1, r3
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7fe fe25 	bl	800469a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	68b8      	ldr	r0, [r7, #8]
 8005a60:	f000 fa54 	bl	8005f0c <prvAddCurrentTaskToDelayedList>
	}
 8005a64:	bf00      	nop
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20000a40 	.word	0x20000a40

08005a70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10b      	bne.n	8005a9e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	60fb      	str	r3, [r7, #12]
}
 8005a98:	bf00      	nop
 8005a9a:	bf00      	nop
 8005a9c:	e7fd      	b.n	8005a9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	3318      	adds	r3, #24
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fe fe56 	bl	8004754 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b20 <xTaskRemoveFromEventList+0xb0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d11d      	bne.n	8005aec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe fe4d 	bl	8004754 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005abe:	4b19      	ldr	r3, [pc, #100]	@ (8005b24 <xTaskRemoveFromEventList+0xb4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d903      	bls.n	8005ace <xTaskRemoveFromEventList+0x5e>
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aca:	4a16      	ldr	r2, [pc, #88]	@ (8005b24 <xTaskRemoveFromEventList+0xb4>)
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4a13      	ldr	r2, [pc, #76]	@ (8005b28 <xTaskRemoveFromEventList+0xb8>)
 8005adc:	441a      	add	r2, r3
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	f7fe fdd8 	bl	800469a <vListInsertEnd>
 8005aea:	e005      	b.n	8005af8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	3318      	adds	r3, #24
 8005af0:	4619      	mov	r1, r3
 8005af2:	480e      	ldr	r0, [pc, #56]	@ (8005b2c <xTaskRemoveFromEventList+0xbc>)
 8005af4:	f7fe fdd1 	bl	800469a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005afc:	4b0c      	ldr	r3, [pc, #48]	@ (8005b30 <xTaskRemoveFromEventList+0xc0>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d905      	bls.n	8005b12 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b06:	2301      	movs	r3, #1
 8005b08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b34 <xTaskRemoveFromEventList+0xc4>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	e001      	b.n	8005b16 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b16:	697b      	ldr	r3, [r7, #20]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	20000f3c 	.word	0x20000f3c
 8005b24:	20000f1c 	.word	0x20000f1c
 8005b28:	20000a44 	.word	0x20000a44
 8005b2c:	20000ed4 	.word	0x20000ed4
 8005b30:	20000a40 	.word	0x20000a40
 8005b34:	20000f28 	.word	0x20000f28

08005b38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b40:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <vTaskInternalSetTimeOutState+0x24>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b48:	4b05      	ldr	r3, [pc, #20]	@ (8005b60 <vTaskInternalSetTimeOutState+0x28>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	605a      	str	r2, [r3, #4]
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	20000f2c 	.word	0x20000f2c
 8005b60:	20000f18 	.word	0x20000f18

08005b64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10b      	bne.n	8005b8c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	613b      	str	r3, [r7, #16]
}
 8005b86:	bf00      	nop
 8005b88:	bf00      	nop
 8005b8a:	e7fd      	b.n	8005b88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10b      	bne.n	8005baa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	60fb      	str	r3, [r7, #12]
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop
 8005ba8:	e7fd      	b.n	8005ba6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005baa:	f000 fe8d 	bl	80068c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bae:	4b1d      	ldr	r3, [pc, #116]	@ (8005c24 <xTaskCheckForTimeOut+0xc0>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d102      	bne.n	8005bce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]
 8005bcc:	e023      	b.n	8005c16 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b15      	ldr	r3, [pc, #84]	@ (8005c28 <xTaskCheckForTimeOut+0xc4>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d007      	beq.n	8005bea <xTaskCheckForTimeOut+0x86>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d302      	bcc.n	8005bea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005be4:	2301      	movs	r3, #1
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	e015      	b.n	8005c16 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d20b      	bcs.n	8005c0c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	1ad2      	subs	r2, r2, r3
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff ff99 	bl	8005b38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	e004      	b.n	8005c16 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c12:	2301      	movs	r3, #1
 8005c14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c16:	f000 fe89 	bl	800692c <vPortExitCritical>

	return xReturn;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3720      	adds	r7, #32
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000f18 	.word	0x20000f18
 8005c28:	20000f2c 	.word	0x20000f2c

08005c2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c30:	4b03      	ldr	r3, [pc, #12]	@ (8005c40 <vTaskMissedYield+0x14>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
}
 8005c36:	bf00      	nop
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	20000f28 	.word	0x20000f28

08005c44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c4c:	f000 f852 	bl	8005cf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c50:	4b06      	ldr	r3, [pc, #24]	@ (8005c6c <prvIdleTask+0x28>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d9f9      	bls.n	8005c4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c58:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <prvIdleTask+0x2c>)
 8005c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c68:	e7f0      	b.n	8005c4c <prvIdleTask+0x8>
 8005c6a:	bf00      	nop
 8005c6c:	20000a44 	.word	0x20000a44
 8005c70:	e000ed04 	.word	0xe000ed04

08005c74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	607b      	str	r3, [r7, #4]
 8005c7e:	e00c      	b.n	8005c9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4a12      	ldr	r2, [pc, #72]	@ (8005cd4 <prvInitialiseTaskLists+0x60>)
 8005c8c:	4413      	add	r3, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe fcd6 	bl	8004640 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3301      	adds	r3, #1
 8005c98:	607b      	str	r3, [r7, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b37      	cmp	r3, #55	@ 0x37
 8005c9e:	d9ef      	bls.n	8005c80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ca0:	480d      	ldr	r0, [pc, #52]	@ (8005cd8 <prvInitialiseTaskLists+0x64>)
 8005ca2:	f7fe fccd 	bl	8004640 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ca6:	480d      	ldr	r0, [pc, #52]	@ (8005cdc <prvInitialiseTaskLists+0x68>)
 8005ca8:	f7fe fcca 	bl	8004640 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cac:	480c      	ldr	r0, [pc, #48]	@ (8005ce0 <prvInitialiseTaskLists+0x6c>)
 8005cae:	f7fe fcc7 	bl	8004640 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cb2:	480c      	ldr	r0, [pc, #48]	@ (8005ce4 <prvInitialiseTaskLists+0x70>)
 8005cb4:	f7fe fcc4 	bl	8004640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cb8:	480b      	ldr	r0, [pc, #44]	@ (8005ce8 <prvInitialiseTaskLists+0x74>)
 8005cba:	f7fe fcc1 	bl	8004640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8005cec <prvInitialiseTaskLists+0x78>)
 8005cc0:	4a05      	ldr	r2, [pc, #20]	@ (8005cd8 <prvInitialiseTaskLists+0x64>)
 8005cc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf0 <prvInitialiseTaskLists+0x7c>)
 8005cc6:	4a05      	ldr	r2, [pc, #20]	@ (8005cdc <prvInitialiseTaskLists+0x68>)
 8005cc8:	601a      	str	r2, [r3, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000a44 	.word	0x20000a44
 8005cd8:	20000ea4 	.word	0x20000ea4
 8005cdc:	20000eb8 	.word	0x20000eb8
 8005ce0:	20000ed4 	.word	0x20000ed4
 8005ce4:	20000ee8 	.word	0x20000ee8
 8005ce8:	20000f00 	.word	0x20000f00
 8005cec:	20000ecc 	.word	0x20000ecc
 8005cf0:	20000ed0 	.word	0x20000ed0

08005cf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cfa:	e019      	b.n	8005d30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cfc:	f000 fde4 	bl	80068c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d00:	4b10      	ldr	r3, [pc, #64]	@ (8005d44 <prvCheckTasksWaitingTermination+0x50>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fe fd21 	bl	8004754 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d12:	4b0d      	ldr	r3, [pc, #52]	@ (8005d48 <prvCheckTasksWaitingTermination+0x54>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	4a0b      	ldr	r2, [pc, #44]	@ (8005d48 <prvCheckTasksWaitingTermination+0x54>)
 8005d1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d4c <prvCheckTasksWaitingTermination+0x58>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	4a0a      	ldr	r2, [pc, #40]	@ (8005d4c <prvCheckTasksWaitingTermination+0x58>)
 8005d24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d26:	f000 fe01 	bl	800692c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f810 	bl	8005d50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d30:	4b06      	ldr	r3, [pc, #24]	@ (8005d4c <prvCheckTasksWaitingTermination+0x58>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e1      	bne.n	8005cfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20000ee8 	.word	0x20000ee8
 8005d48:	20000f14 	.word	0x20000f14
 8005d4c:	20000efc 	.word	0x20000efc

08005d50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d108      	bne.n	8005d74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 ff9e 	bl	8006ca8 <vPortFree>
				vPortFree( pxTCB );
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 ff9b 	bl	8006ca8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d72:	e019      	b.n	8005da8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d103      	bne.n	8005d86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 ff92 	bl	8006ca8 <vPortFree>
	}
 8005d84:	e010      	b.n	8005da8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d00b      	beq.n	8005da8 <prvDeleteTCB+0x58>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	60fb      	str	r3, [r7, #12]
}
 8005da2:	bf00      	nop
 8005da4:	bf00      	nop
 8005da6:	e7fd      	b.n	8005da4 <prvDeleteTCB+0x54>
	}
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005db6:	4b0c      	ldr	r3, [pc, #48]	@ (8005de8 <prvResetNextTaskUnblockTime+0x38>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d104      	bne.n	8005dca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005dec <prvResetNextTaskUnblockTime+0x3c>)
 8005dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005dc8:	e008      	b.n	8005ddc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dca:	4b07      	ldr	r3, [pc, #28]	@ (8005de8 <prvResetNextTaskUnblockTime+0x38>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	4a04      	ldr	r2, [pc, #16]	@ (8005dec <prvResetNextTaskUnblockTime+0x3c>)
 8005dda:	6013      	str	r3, [r2, #0]
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	20000ecc 	.word	0x20000ecc
 8005dec:	20000f34 	.word	0x20000f34

08005df0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005df6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e24 <xTaskGetSchedulerState+0x34>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d102      	bne.n	8005e04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	607b      	str	r3, [r7, #4]
 8005e02:	e008      	b.n	8005e16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e04:	4b08      	ldr	r3, [pc, #32]	@ (8005e28 <xTaskGetSchedulerState+0x38>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	607b      	str	r3, [r7, #4]
 8005e10:	e001      	b.n	8005e16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e12:	2300      	movs	r3, #0
 8005e14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e16:	687b      	ldr	r3, [r7, #4]
	}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	20000f20 	.word	0x20000f20
 8005e28:	20000f3c 	.word	0x20000f3c

08005e2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d058      	beq.n	8005ef4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e42:	4b2f      	ldr	r3, [pc, #188]	@ (8005f00 <xTaskPriorityDisinherit+0xd4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d00b      	beq.n	8005e64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60fb      	str	r3, [r7, #12]
}
 8005e5e:	bf00      	nop
 8005e60:	bf00      	nop
 8005e62:	e7fd      	b.n	8005e60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10b      	bne.n	8005e84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	60bb      	str	r3, [r7, #8]
}
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	e7fd      	b.n	8005e80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e88:	1e5a      	subs	r2, r3, #1
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d02c      	beq.n	8005ef4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d128      	bne.n	8005ef4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fc54 	bl	8004754 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8005f04 <xTaskPriorityDisinherit+0xd8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d903      	bls.n	8005ed4 <xTaskPriorityDisinherit+0xa8>
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8005f04 <xTaskPriorityDisinherit+0xd8>)
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4a09      	ldr	r2, [pc, #36]	@ (8005f08 <xTaskPriorityDisinherit+0xdc>)
 8005ee2:	441a      	add	r2, r3
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f7fe fbd5 	bl	800469a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ef4:	697b      	ldr	r3, [r7, #20]
	}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000a40 	.word	0x20000a40
 8005f04:	20000f1c 	.word	0x20000f1c
 8005f08:	20000a44 	.word	0x20000a44

08005f0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f16:	4b21      	ldr	r3, [pc, #132]	@ (8005f9c <prvAddCurrentTaskToDelayedList+0x90>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f1c:	4b20      	ldr	r3, [pc, #128]	@ (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3304      	adds	r3, #4
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fc16 	bl	8004754 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d10a      	bne.n	8005f46 <prvAddCurrentTaskToDelayedList+0x3a>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f36:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4819      	ldr	r0, [pc, #100]	@ (8005fa4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f40:	f7fe fbab 	bl	800469a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f44:	e026      	b.n	8005f94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f4e:	4b14      	ldr	r3, [pc, #80]	@ (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d209      	bcs.n	8005f72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f5e:	4b12      	ldr	r3, [pc, #72]	@ (8005fa8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f7fe fbb9 	bl	80046e2 <vListInsert>
}
 8005f70:	e010      	b.n	8005f94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f72:	4b0e      	ldr	r3, [pc, #56]	@ (8005fac <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	f7fe fbaf 	bl	80046e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f84:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d202      	bcs.n	8005f94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f8e:	4a08      	ldr	r2, [pc, #32]	@ (8005fb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6013      	str	r3, [r2, #0]
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20000f18 	.word	0x20000f18
 8005fa0:	20000a40 	.word	0x20000a40
 8005fa4:	20000f00 	.word	0x20000f00
 8005fa8:	20000ed0 	.word	0x20000ed0
 8005fac:	20000ecc 	.word	0x20000ecc
 8005fb0:	20000f34 	.word	0x20000f34

08005fb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08a      	sub	sp, #40	@ 0x28
 8005fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005fbe:	f000 fb13 	bl	80065e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8006038 <xTimerCreateTimerTask+0x84>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d021      	beq.n	800600e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005fd2:	1d3a      	adds	r2, r7, #4
 8005fd4:	f107 0108 	add.w	r1, r7, #8
 8005fd8:	f107 030c 	add.w	r3, r7, #12
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe fb15 	bl	800460c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	9202      	str	r2, [sp, #8]
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	2302      	movs	r3, #2
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	460a      	mov	r2, r1
 8005ff4:	4911      	ldr	r1, [pc, #68]	@ (800603c <xTimerCreateTimerTask+0x88>)
 8005ff6:	4812      	ldr	r0, [pc, #72]	@ (8006040 <xTimerCreateTimerTask+0x8c>)
 8005ff8:	f7ff f8d0 	bl	800519c <xTaskCreateStatic>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	4a11      	ldr	r2, [pc, #68]	@ (8006044 <xTimerCreateTimerTask+0x90>)
 8006000:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006002:	4b10      	ldr	r3, [pc, #64]	@ (8006044 <xTimerCreateTimerTask+0x90>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800600a:	2301      	movs	r3, #1
 800600c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	613b      	str	r3, [r7, #16]
}
 8006026:	bf00      	nop
 8006028:	bf00      	nop
 800602a:	e7fd      	b.n	8006028 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800602c:	697b      	ldr	r3, [r7, #20]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000f70 	.word	0x20000f70
 800603c:	080078b4 	.word	0x080078b4
 8006040:	08006181 	.word	0x08006181
 8006044:	20000f74 	.word	0x20000f74

08006048 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	@ 0x28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006056:	2300      	movs	r3, #0
 8006058:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10b      	bne.n	8006078 <xTimerGenericCommand+0x30>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	623b      	str	r3, [r7, #32]
}
 8006072:	bf00      	nop
 8006074:	bf00      	nop
 8006076:	e7fd      	b.n	8006074 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006078:	4b19      	ldr	r3, [pc, #100]	@ (80060e0 <xTimerGenericCommand+0x98>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d02a      	beq.n	80060d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b05      	cmp	r3, #5
 8006090:	dc18      	bgt.n	80060c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006092:	f7ff fead 	bl	8005df0 <xTaskGetSchedulerState>
 8006096:	4603      	mov	r3, r0
 8006098:	2b02      	cmp	r3, #2
 800609a:	d109      	bne.n	80060b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800609c:	4b10      	ldr	r3, [pc, #64]	@ (80060e0 <xTimerGenericCommand+0x98>)
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	f107 0110 	add.w	r1, r7, #16
 80060a4:	2300      	movs	r3, #0
 80060a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060a8:	f7fe fc88 	bl	80049bc <xQueueGenericSend>
 80060ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80060ae:	e012      	b.n	80060d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060b0:	4b0b      	ldr	r3, [pc, #44]	@ (80060e0 <xTimerGenericCommand+0x98>)
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	f107 0110 	add.w	r1, r7, #16
 80060b8:	2300      	movs	r3, #0
 80060ba:	2200      	movs	r2, #0
 80060bc:	f7fe fc7e 	bl	80049bc <xQueueGenericSend>
 80060c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80060c2:	e008      	b.n	80060d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060c4:	4b06      	ldr	r3, [pc, #24]	@ (80060e0 <xTimerGenericCommand+0x98>)
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	f107 0110 	add.w	r1, r7, #16
 80060cc:	2300      	movs	r3, #0
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	f7fe fd76 	bl	8004bc0 <xQueueGenericSendFromISR>
 80060d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3728      	adds	r7, #40	@ 0x28
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20000f70 	.word	0x20000f70

080060e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ee:	4b23      	ldr	r3, [pc, #140]	@ (800617c <prvProcessExpiredTimer+0x98>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fe fb29 	bl	8004754 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d023      	beq.n	8006158 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	18d1      	adds	r1, r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	6978      	ldr	r0, [r7, #20]
 800611e:	f000 f8d5 	bl	80062cc <prvInsertTimerInActiveList>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d020      	beq.n	800616a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006128:	2300      	movs	r3, #0
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	2300      	movs	r3, #0
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	2100      	movs	r1, #0
 8006132:	6978      	ldr	r0, [r7, #20]
 8006134:	f7ff ff88 	bl	8006048 <xTimerGenericCommand>
 8006138:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d114      	bne.n	800616a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	60fb      	str	r3, [r7, #12]
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	e7fd      	b.n	8006154 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800615e:	f023 0301 	bic.w	r3, r3, #1
 8006162:	b2da      	uxtb	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	6978      	ldr	r0, [r7, #20]
 8006170:	4798      	blx	r3
}
 8006172:	bf00      	nop
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20000f68 	.word	0x20000f68

08006180 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006188:	f107 0308 	add.w	r3, r7, #8
 800618c:	4618      	mov	r0, r3
 800618e:	f000 f859 	bl	8006244 <prvGetNextExpireTime>
 8006192:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	4619      	mov	r1, r3
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f805 	bl	80061a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800619e:	f000 f8d7 	bl	8006350 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061a2:	bf00      	nop
 80061a4:	e7f0      	b.n	8006188 <prvTimerTask+0x8>
	...

080061a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061b2:	f7ff fa37 	bl	8005624 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061b6:	f107 0308 	add.w	r3, r7, #8
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f866 	bl	800628c <prvSampleTimeNow>
 80061c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d130      	bne.n	800622a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10a      	bne.n	80061e4 <prvProcessTimerOrBlockTask+0x3c>
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d806      	bhi.n	80061e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80061d6:	f7ff fa33 	bl	8005640 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80061da:	68f9      	ldr	r1, [r7, #12]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff ff81 	bl	80060e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80061e2:	e024      	b.n	800622e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d008      	beq.n	80061fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80061ea:	4b13      	ldr	r3, [pc, #76]	@ (8006238 <prvProcessTimerOrBlockTask+0x90>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <prvProcessTimerOrBlockTask+0x50>
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <prvProcessTimerOrBlockTask+0x52>
 80061f8:	2300      	movs	r3, #0
 80061fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061fc:	4b0f      	ldr	r3, [pc, #60]	@ (800623c <prvProcessTimerOrBlockTask+0x94>)
 80061fe:	6818      	ldr	r0, [r3, #0]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	4619      	mov	r1, r3
 800620a:	f7fe ff93 	bl	8005134 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800620e:	f7ff fa17 	bl	8005640 <xTaskResumeAll>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10a      	bne.n	800622e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006218:	4b09      	ldr	r3, [pc, #36]	@ (8006240 <prvProcessTimerOrBlockTask+0x98>)
 800621a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	f3bf 8f6f 	isb	sy
}
 8006228:	e001      	b.n	800622e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800622a:	f7ff fa09 	bl	8005640 <xTaskResumeAll>
}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20000f6c 	.word	0x20000f6c
 800623c:	20000f70 	.word	0x20000f70
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800624c:	4b0e      	ldr	r3, [pc, #56]	@ (8006288 <prvGetNextExpireTime+0x44>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <prvGetNextExpireTime+0x16>
 8006256:	2201      	movs	r2, #1
 8006258:	e000      	b.n	800625c <prvGetNextExpireTime+0x18>
 800625a:	2200      	movs	r2, #0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d105      	bne.n	8006274 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006268:	4b07      	ldr	r3, [pc, #28]	@ (8006288 <prvGetNextExpireTime+0x44>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e001      	b.n	8006278 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006278:	68fb      	ldr	r3, [r7, #12]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	20000f68 	.word	0x20000f68

0800628c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006294:	f7ff fa72 	bl	800577c <xTaskGetTickCount>
 8006298:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800629a:	4b0b      	ldr	r3, [pc, #44]	@ (80062c8 <prvSampleTimeNow+0x3c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d205      	bcs.n	80062b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062a4:	f000 f93a 	bl	800651c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	e002      	b.n	80062b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062b6:	4a04      	ldr	r2, [pc, #16]	@ (80062c8 <prvSampleTimeNow+0x3c>)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062bc:	68fb      	ldr	r3, [r7, #12]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000f78 	.word	0x20000f78

080062cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80062da:	2300      	movs	r3, #0
 80062dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d812      	bhi.n	8006318 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	1ad2      	subs	r2, r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d302      	bcc.n	8006306 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006300:	2301      	movs	r3, #1
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e01b      	b.n	800633e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006306:	4b10      	ldr	r3, [pc, #64]	@ (8006348 <prvInsertTimerInActiveList+0x7c>)
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3304      	adds	r3, #4
 800630e:	4619      	mov	r1, r3
 8006310:	4610      	mov	r0, r2
 8006312:	f7fe f9e6 	bl	80046e2 <vListInsert>
 8006316:	e012      	b.n	800633e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	429a      	cmp	r2, r3
 800631e:	d206      	bcs.n	800632e <prvInsertTimerInActiveList+0x62>
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d302      	bcc.n	800632e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006328:	2301      	movs	r3, #1
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	e007      	b.n	800633e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800632e:	4b07      	ldr	r3, [pc, #28]	@ (800634c <prvInsertTimerInActiveList+0x80>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3304      	adds	r3, #4
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f7fe f9d2 	bl	80046e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800633e:	697b      	ldr	r3, [r7, #20]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	20000f6c 	.word	0x20000f6c
 800634c:	20000f68 	.word	0x20000f68

08006350 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08e      	sub	sp, #56	@ 0x38
 8006354:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006356:	e0ce      	b.n	80064f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	da19      	bge.n	8006392 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800635e:	1d3b      	adds	r3, r7, #4
 8006360:	3304      	adds	r3, #4
 8006362:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10b      	bne.n	8006382 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	61fb      	str	r3, [r7, #28]
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	e7fd      	b.n	800637e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006388:	6850      	ldr	r0, [r2, #4]
 800638a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800638c:	6892      	ldr	r2, [r2, #8]
 800638e:	4611      	mov	r1, r2
 8006390:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f2c0 80ae 	blt.w	80064f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800639e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d004      	beq.n	80063b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a8:	3304      	adds	r3, #4
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe f9d2 	bl	8004754 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063b0:	463b      	mov	r3, r7
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff ff6a 	bl	800628c <prvSampleTimeNow>
 80063b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b09      	cmp	r3, #9
 80063be:	f200 8097 	bhi.w	80064f0 <prvProcessReceivedCommands+0x1a0>
 80063c2:	a201      	add	r2, pc, #4	@ (adr r2, 80063c8 <prvProcessReceivedCommands+0x78>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063f1 	.word	0x080063f1
 80063cc:	080063f1 	.word	0x080063f1
 80063d0:	080063f1 	.word	0x080063f1
 80063d4:	08006467 	.word	0x08006467
 80063d8:	0800647b 	.word	0x0800647b
 80063dc:	080064c7 	.word	0x080064c7
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	080063f1 	.word	0x080063f1
 80063e8:	08006467 	.word	0x08006467
 80063ec:	0800647b 	.word	0x0800647b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	18d1      	adds	r1, r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800640e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006410:	f7ff ff5c 	bl	80062cc <prvInsertTimerInActiveList>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d06c      	beq.n	80064f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800641a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006420:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006424:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	2b00      	cmp	r3, #0
 800642e:	d061      	beq.n	80064f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	441a      	add	r2, r3
 8006438:	2300      	movs	r3, #0
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	2300      	movs	r3, #0
 800643e:	2100      	movs	r1, #0
 8006440:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006442:	f7ff fe01 	bl	8006048 <xTimerGenericCommand>
 8006446:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d152      	bne.n	80064f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	61bb      	str	r3, [r7, #24]
}
 8006460:	bf00      	nop
 8006462:	bf00      	nop
 8006464:	e7fd      	b.n	8006462 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	b2da      	uxtb	r2, r3
 8006472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006474:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006478:	e03d      	b.n	80064f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800647a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006480:	f043 0301 	orr.w	r3, r3, #1
 8006484:	b2da      	uxtb	r2, r3
 8006486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006488:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006490:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	617b      	str	r3, [r7, #20]
}
 80064ac:	bf00      	nop
 80064ae:	bf00      	nop
 80064b0:	e7fd      	b.n	80064ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b8:	18d1      	adds	r1, r2, r3
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064c0:	f7ff ff04 	bl	80062cc <prvInsertTimerInActiveList>
					break;
 80064c4:	e017      	b.n	80064f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d103      	bne.n	80064dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80064d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064d6:	f000 fbe7 	bl	8006ca8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80064da:	e00c      	b.n	80064f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80064ee:	e002      	b.n	80064f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80064f0:	bf00      	nop
 80064f2:	e000      	b.n	80064f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80064f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064f6:	4b08      	ldr	r3, [pc, #32]	@ (8006518 <prvProcessReceivedCommands+0x1c8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	1d39      	adds	r1, r7, #4
 80064fc:	2200      	movs	r2, #0
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe fbfc 	bl	8004cfc <xQueueReceive>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	f47f af26 	bne.w	8006358 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	3730      	adds	r7, #48	@ 0x30
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000f70 	.word	0x20000f70

0800651c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006522:	e049      	b.n	80065b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006524:	4b2e      	ldr	r3, [pc, #184]	@ (80065e0 <prvSwitchTimerLists+0xc4>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800652e:	4b2c      	ldr	r3, [pc, #176]	@ (80065e0 <prvSwitchTimerLists+0xc4>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3304      	adds	r3, #4
 800653c:	4618      	mov	r0, r3
 800653e:	f7fe f909 	bl	8004754 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d02f      	beq.n	80065b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4413      	add	r3, r2
 8006560:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	429a      	cmp	r2, r3
 8006568:	d90e      	bls.n	8006588 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006576:	4b1a      	ldr	r3, [pc, #104]	@ (80065e0 <prvSwitchTimerLists+0xc4>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7fe f8ae 	bl	80046e2 <vListInsert>
 8006586:	e017      	b.n	80065b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006588:	2300      	movs	r3, #0
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	2300      	movs	r3, #0
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	2100      	movs	r1, #0
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f7ff fd58 	bl	8006048 <xTimerGenericCommand>
 8006598:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10b      	bne.n	80065b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	603b      	str	r3, [r7, #0]
}
 80065b2:	bf00      	nop
 80065b4:	bf00      	nop
 80065b6:	e7fd      	b.n	80065b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065b8:	4b09      	ldr	r3, [pc, #36]	@ (80065e0 <prvSwitchTimerLists+0xc4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1b0      	bne.n	8006524 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065c2:	4b07      	ldr	r3, [pc, #28]	@ (80065e0 <prvSwitchTimerLists+0xc4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065c8:	4b06      	ldr	r3, [pc, #24]	@ (80065e4 <prvSwitchTimerLists+0xc8>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a04      	ldr	r2, [pc, #16]	@ (80065e0 <prvSwitchTimerLists+0xc4>)
 80065ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065d0:	4a04      	ldr	r2, [pc, #16]	@ (80065e4 <prvSwitchTimerLists+0xc8>)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	6013      	str	r3, [r2, #0]
}
 80065d6:	bf00      	nop
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000f68 	.word	0x20000f68
 80065e4:	20000f6c 	.word	0x20000f6c

080065e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065ee:	f000 f96b 	bl	80068c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80065f2:	4b15      	ldr	r3, [pc, #84]	@ (8006648 <prvCheckForValidListAndQueue+0x60>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d120      	bne.n	800663c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80065fa:	4814      	ldr	r0, [pc, #80]	@ (800664c <prvCheckForValidListAndQueue+0x64>)
 80065fc:	f7fe f820 	bl	8004640 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006600:	4813      	ldr	r0, [pc, #76]	@ (8006650 <prvCheckForValidListAndQueue+0x68>)
 8006602:	f7fe f81d 	bl	8004640 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006606:	4b13      	ldr	r3, [pc, #76]	@ (8006654 <prvCheckForValidListAndQueue+0x6c>)
 8006608:	4a10      	ldr	r2, [pc, #64]	@ (800664c <prvCheckForValidListAndQueue+0x64>)
 800660a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800660c:	4b12      	ldr	r3, [pc, #72]	@ (8006658 <prvCheckForValidListAndQueue+0x70>)
 800660e:	4a10      	ldr	r2, [pc, #64]	@ (8006650 <prvCheckForValidListAndQueue+0x68>)
 8006610:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006612:	2300      	movs	r3, #0
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	4b11      	ldr	r3, [pc, #68]	@ (800665c <prvCheckForValidListAndQueue+0x74>)
 8006618:	4a11      	ldr	r2, [pc, #68]	@ (8006660 <prvCheckForValidListAndQueue+0x78>)
 800661a:	2110      	movs	r1, #16
 800661c:	200a      	movs	r0, #10
 800661e:	f7fe f92d 	bl	800487c <xQueueGenericCreateStatic>
 8006622:	4603      	mov	r3, r0
 8006624:	4a08      	ldr	r2, [pc, #32]	@ (8006648 <prvCheckForValidListAndQueue+0x60>)
 8006626:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006628:	4b07      	ldr	r3, [pc, #28]	@ (8006648 <prvCheckForValidListAndQueue+0x60>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006630:	4b05      	ldr	r3, [pc, #20]	@ (8006648 <prvCheckForValidListAndQueue+0x60>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	490b      	ldr	r1, [pc, #44]	@ (8006664 <prvCheckForValidListAndQueue+0x7c>)
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fd52 	bl	80050e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800663c:	f000 f976 	bl	800692c <vPortExitCritical>
}
 8006640:	bf00      	nop
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20000f70 	.word	0x20000f70
 800664c:	20000f40 	.word	0x20000f40
 8006650:	20000f54 	.word	0x20000f54
 8006654:	20000f68 	.word	0x20000f68
 8006658:	20000f6c 	.word	0x20000f6c
 800665c:	2000101c 	.word	0x2000101c
 8006660:	20000f7c 	.word	0x20000f7c
 8006664:	080078bc 	.word	0x080078bc

08006668 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3b04      	subs	r3, #4
 8006678:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3b04      	subs	r3, #4
 8006686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f023 0201 	bic.w	r2, r3, #1
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3b04      	subs	r3, #4
 8006696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006698:	4a0c      	ldr	r2, [pc, #48]	@ (80066cc <pxPortInitialiseStack+0x64>)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3b14      	subs	r3, #20
 80066a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3b04      	subs	r3, #4
 80066ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f06f 0202 	mvn.w	r2, #2
 80066b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3b20      	subs	r3, #32
 80066bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066be:	68fb      	ldr	r3, [r7, #12]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	080066d1 	.word	0x080066d1

080066d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066da:	4b13      	ldr	r3, [pc, #76]	@ (8006728 <prvTaskExitError+0x58>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e2:	d00b      	beq.n	80066fc <prvTaskExitError+0x2c>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	60fb      	str	r3, [r7, #12]
}
 80066f6:	bf00      	nop
 80066f8:	bf00      	nop
 80066fa:	e7fd      	b.n	80066f8 <prvTaskExitError+0x28>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	60bb      	str	r3, [r7, #8]
}
 800670e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006710:	bf00      	nop
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0fc      	beq.n	8006712 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	2000002c 	.word	0x2000002c
 800672c:	00000000 	.word	0x00000000

08006730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006730:	4b07      	ldr	r3, [pc, #28]	@ (8006750 <pxCurrentTCBConst2>)
 8006732:	6819      	ldr	r1, [r3, #0]
 8006734:	6808      	ldr	r0, [r1, #0]
 8006736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673a:	f380 8809 	msr	PSP, r0
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f04f 0000 	mov.w	r0, #0
 8006746:	f380 8811 	msr	BASEPRI, r0
 800674a:	4770      	bx	lr
 800674c:	f3af 8000 	nop.w

08006750 <pxCurrentTCBConst2>:
 8006750:	20000a40 	.word	0x20000a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop

08006758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006758:	4808      	ldr	r0, [pc, #32]	@ (800677c <prvPortStartFirstTask+0x24>)
 800675a:	6800      	ldr	r0, [r0, #0]
 800675c:	6800      	ldr	r0, [r0, #0]
 800675e:	f380 8808 	msr	MSP, r0
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f380 8814 	msr	CONTROL, r0
 800676a:	b662      	cpsie	i
 800676c:	b661      	cpsie	f
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	df00      	svc	0
 8006778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800677a:	bf00      	nop
 800677c:	e000ed08 	.word	0xe000ed08

08006780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006786:	4b47      	ldr	r3, [pc, #284]	@ (80068a4 <xPortStartScheduler+0x124>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a47      	ldr	r2, [pc, #284]	@ (80068a8 <xPortStartScheduler+0x128>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d10b      	bne.n	80067a8 <xPortStartScheduler+0x28>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	613b      	str	r3, [r7, #16]
}
 80067a2:	bf00      	nop
 80067a4:	bf00      	nop
 80067a6:	e7fd      	b.n	80067a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067a8:	4b3e      	ldr	r3, [pc, #248]	@ (80068a4 <xPortStartScheduler+0x124>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a3f      	ldr	r2, [pc, #252]	@ (80068ac <xPortStartScheduler+0x12c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d10b      	bne.n	80067ca <xPortStartScheduler+0x4a>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	60fb      	str	r3, [r7, #12]
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	e7fd      	b.n	80067c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067ca:	4b39      	ldr	r3, [pc, #228]	@ (80068b0 <xPortStartScheduler+0x130>)
 80067cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	22ff      	movs	r2, #255	@ 0xff
 80067da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	4b31      	ldr	r3, [pc, #196]	@ (80068b4 <xPortStartScheduler+0x134>)
 80067f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067f2:	4b31      	ldr	r3, [pc, #196]	@ (80068b8 <xPortStartScheduler+0x138>)
 80067f4:	2207      	movs	r2, #7
 80067f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067f8:	e009      	b.n	800680e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80067fa:	4b2f      	ldr	r3, [pc, #188]	@ (80068b8 <xPortStartScheduler+0x138>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3b01      	subs	r3, #1
 8006800:	4a2d      	ldr	r2, [pc, #180]	@ (80068b8 <xPortStartScheduler+0x138>)
 8006802:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	b2db      	uxtb	r3, r3
 800680c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800680e:	78fb      	ldrb	r3, [r7, #3]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006816:	2b80      	cmp	r3, #128	@ 0x80
 8006818:	d0ef      	beq.n	80067fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800681a:	4b27      	ldr	r3, [pc, #156]	@ (80068b8 <xPortStartScheduler+0x138>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f1c3 0307 	rsb	r3, r3, #7
 8006822:	2b04      	cmp	r3, #4
 8006824:	d00b      	beq.n	800683e <xPortStartScheduler+0xbe>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	60bb      	str	r3, [r7, #8]
}
 8006838:	bf00      	nop
 800683a:	bf00      	nop
 800683c:	e7fd      	b.n	800683a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800683e:	4b1e      	ldr	r3, [pc, #120]	@ (80068b8 <xPortStartScheduler+0x138>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	4a1c      	ldr	r2, [pc, #112]	@ (80068b8 <xPortStartScheduler+0x138>)
 8006846:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006848:	4b1b      	ldr	r3, [pc, #108]	@ (80068b8 <xPortStartScheduler+0x138>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006850:	4a19      	ldr	r2, [pc, #100]	@ (80068b8 <xPortStartScheduler+0x138>)
 8006852:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	b2da      	uxtb	r2, r3
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800685c:	4b17      	ldr	r3, [pc, #92]	@ (80068bc <xPortStartScheduler+0x13c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a16      	ldr	r2, [pc, #88]	@ (80068bc <xPortStartScheduler+0x13c>)
 8006862:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006868:	4b14      	ldr	r3, [pc, #80]	@ (80068bc <xPortStartScheduler+0x13c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a13      	ldr	r2, [pc, #76]	@ (80068bc <xPortStartScheduler+0x13c>)
 800686e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006874:	f000 f8da 	bl	8006a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006878:	4b11      	ldr	r3, [pc, #68]	@ (80068c0 <xPortStartScheduler+0x140>)
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800687e:	f000 f8f9 	bl	8006a74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006882:	4b10      	ldr	r3, [pc, #64]	@ (80068c4 <xPortStartScheduler+0x144>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a0f      	ldr	r2, [pc, #60]	@ (80068c4 <xPortStartScheduler+0x144>)
 8006888:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800688c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800688e:	f7ff ff63 	bl	8006758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006892:	f7ff f83d 	bl	8005910 <vTaskSwitchContext>
	prvTaskExitError();
 8006896:	f7ff ff1b 	bl	80066d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	e000ed00 	.word	0xe000ed00
 80068a8:	410fc271 	.word	0x410fc271
 80068ac:	410fc270 	.word	0x410fc270
 80068b0:	e000e400 	.word	0xe000e400
 80068b4:	2000106c 	.word	0x2000106c
 80068b8:	20001070 	.word	0x20001070
 80068bc:	e000ed20 	.word	0xe000ed20
 80068c0:	2000002c 	.word	0x2000002c
 80068c4:	e000ef34 	.word	0xe000ef34

080068c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	607b      	str	r3, [r7, #4]
}
 80068e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068e2:	4b10      	ldr	r3, [pc, #64]	@ (8006924 <vPortEnterCritical+0x5c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3301      	adds	r3, #1
 80068e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006924 <vPortEnterCritical+0x5c>)
 80068ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006924 <vPortEnterCritical+0x5c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d110      	bne.n	8006916 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006928 <vPortEnterCritical+0x60>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00b      	beq.n	8006916 <vPortEnterCritical+0x4e>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	603b      	str	r3, [r7, #0]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <vPortEnterCritical+0x4a>
	}
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	2000002c 	.word	0x2000002c
 8006928:	e000ed04 	.word	0xe000ed04

0800692c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006932:	4b12      	ldr	r3, [pc, #72]	@ (800697c <vPortExitCritical+0x50>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10b      	bne.n	8006952 <vPortExitCritical+0x26>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	607b      	str	r3, [r7, #4]
}
 800694c:	bf00      	nop
 800694e:	bf00      	nop
 8006950:	e7fd      	b.n	800694e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006952:	4b0a      	ldr	r3, [pc, #40]	@ (800697c <vPortExitCritical+0x50>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3b01      	subs	r3, #1
 8006958:	4a08      	ldr	r2, [pc, #32]	@ (800697c <vPortExitCritical+0x50>)
 800695a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800695c:	4b07      	ldr	r3, [pc, #28]	@ (800697c <vPortExitCritical+0x50>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d105      	bne.n	8006970 <vPortExitCritical+0x44>
 8006964:	2300      	movs	r3, #0
 8006966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f383 8811 	msr	BASEPRI, r3
}
 800696e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	2000002c 	.word	0x2000002c

08006980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006980:	f3ef 8009 	mrs	r0, PSP
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	4b15      	ldr	r3, [pc, #84]	@ (80069e0 <pxCurrentTCBConst>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	f01e 0f10 	tst.w	lr, #16
 8006990:	bf08      	it	eq
 8006992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699a:	6010      	str	r0, [r2, #0]
 800699c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80069a4:	f380 8811 	msr	BASEPRI, r0
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f7fe ffae 	bl	8005910 <vTaskSwitchContext>
 80069b4:	f04f 0000 	mov.w	r0, #0
 80069b8:	f380 8811 	msr	BASEPRI, r0
 80069bc:	bc09      	pop	{r0, r3}
 80069be:	6819      	ldr	r1, [r3, #0]
 80069c0:	6808      	ldr	r0, [r1, #0]
 80069c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c6:	f01e 0f10 	tst.w	lr, #16
 80069ca:	bf08      	it	eq
 80069cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069d0:	f380 8809 	msr	PSP, r0
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	f3af 8000 	nop.w

080069e0 <pxCurrentTCBConst>:
 80069e0:	20000a40 	.word	0x20000a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop

080069e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	607b      	str	r3, [r7, #4]
}
 8006a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a02:	f7fe fecb 	bl	800579c <xTaskIncrementTick>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a0c:	4b06      	ldr	r3, [pc, #24]	@ (8006a28 <xPortSysTickHandler+0x40>)
 8006a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	2300      	movs	r3, #0
 8006a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	f383 8811 	msr	BASEPRI, r3
}
 8006a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	e000ed04 	.word	0xe000ed04

08006a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a30:	4b0b      	ldr	r3, [pc, #44]	@ (8006a60 <vPortSetupTimerInterrupt+0x34>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a36:	4b0b      	ldr	r3, [pc, #44]	@ (8006a64 <vPortSetupTimerInterrupt+0x38>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a68 <vPortSetupTimerInterrupt+0x3c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a0a      	ldr	r2, [pc, #40]	@ (8006a6c <vPortSetupTimerInterrupt+0x40>)
 8006a42:	fba2 2303 	umull	r2, r3, r2, r3
 8006a46:	099b      	lsrs	r3, r3, #6
 8006a48:	4a09      	ldr	r2, [pc, #36]	@ (8006a70 <vPortSetupTimerInterrupt+0x44>)
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a4e:	4b04      	ldr	r3, [pc, #16]	@ (8006a60 <vPortSetupTimerInterrupt+0x34>)
 8006a50:	2207      	movs	r2, #7
 8006a52:	601a      	str	r2, [r3, #0]
}
 8006a54:	bf00      	nop
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	e000e010 	.word	0xe000e010
 8006a64:	e000e018 	.word	0xe000e018
 8006a68:	20000020 	.word	0x20000020
 8006a6c:	10624dd3 	.word	0x10624dd3
 8006a70:	e000e014 	.word	0xe000e014

08006a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006a84 <vPortEnableVFP+0x10>
 8006a78:	6801      	ldr	r1, [r0, #0]
 8006a7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006a7e:	6001      	str	r1, [r0, #0]
 8006a80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a82:	bf00      	nop
 8006a84:	e000ed88 	.word	0xe000ed88

08006a88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a8e:	f3ef 8305 	mrs	r3, IPSR
 8006a92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b0f      	cmp	r3, #15
 8006a98:	d915      	bls.n	8006ac6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a9a:	4a18      	ldr	r2, [pc, #96]	@ (8006afc <vPortValidateInterruptPriority+0x74>)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006aa4:	4b16      	ldr	r3, [pc, #88]	@ (8006b00 <vPortValidateInterruptPriority+0x78>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	7afa      	ldrb	r2, [r7, #11]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d20b      	bcs.n	8006ac6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	607b      	str	r3, [r7, #4]
}
 8006ac0:	bf00      	nop
 8006ac2:	bf00      	nop
 8006ac4:	e7fd      	b.n	8006ac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b04 <vPortValidateInterruptPriority+0x7c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006ace:	4b0e      	ldr	r3, [pc, #56]	@ (8006b08 <vPortValidateInterruptPriority+0x80>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d90b      	bls.n	8006aee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	603b      	str	r3, [r7, #0]
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
 8006aec:	e7fd      	b.n	8006aea <vPortValidateInterruptPriority+0x62>
	}
 8006aee:	bf00      	nop
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	e000e3f0 	.word	0xe000e3f0
 8006b00:	2000106c 	.word	0x2000106c
 8006b04:	e000ed0c 	.word	0xe000ed0c
 8006b08:	20001070 	.word	0x20001070

08006b0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	@ 0x28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b18:	f7fe fd84 	bl	8005624 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b1c:	4b5c      	ldr	r3, [pc, #368]	@ (8006c90 <pvPortMalloc+0x184>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b24:	f000 f924 	bl	8006d70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b28:	4b5a      	ldr	r3, [pc, #360]	@ (8006c94 <pvPortMalloc+0x188>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f040 8095 	bne.w	8006c60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01e      	beq.n	8006b7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006b3c:	2208      	movs	r2, #8
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4413      	add	r3, r2
 8006b42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d015      	beq.n	8006b7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f023 0307 	bic.w	r3, r3, #7
 8006b54:	3308      	adds	r3, #8
 8006b56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00b      	beq.n	8006b7a <pvPortMalloc+0x6e>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	617b      	str	r3, [r7, #20]
}
 8006b74:	bf00      	nop
 8006b76:	bf00      	nop
 8006b78:	e7fd      	b.n	8006b76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d06f      	beq.n	8006c60 <pvPortMalloc+0x154>
 8006b80:	4b45      	ldr	r3, [pc, #276]	@ (8006c98 <pvPortMalloc+0x18c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d86a      	bhi.n	8006c60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b8a:	4b44      	ldr	r3, [pc, #272]	@ (8006c9c <pvPortMalloc+0x190>)
 8006b8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b8e:	4b43      	ldr	r3, [pc, #268]	@ (8006c9c <pvPortMalloc+0x190>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b94:	e004      	b.n	8006ba0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d903      	bls.n	8006bb2 <pvPortMalloc+0xa6>
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1f1      	bne.n	8006b96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bb2:	4b37      	ldr	r3, [pc, #220]	@ (8006c90 <pvPortMalloc+0x184>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d051      	beq.n	8006c60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	4413      	add	r3, r2
 8006bc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	1ad2      	subs	r2, r2, r3
 8006bd6:	2308      	movs	r3, #8
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d920      	bls.n	8006c20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4413      	add	r3, r2
 8006be4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00b      	beq.n	8006c08 <pvPortMalloc+0xfc>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	613b      	str	r3, [r7, #16]
}
 8006c02:	bf00      	nop
 8006c04:	bf00      	nop
 8006c06:	e7fd      	b.n	8006c04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	1ad2      	subs	r2, r2, r3
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c1a:	69b8      	ldr	r0, [r7, #24]
 8006c1c:	f000 f90a 	bl	8006e34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c20:	4b1d      	ldr	r3, [pc, #116]	@ (8006c98 <pvPortMalloc+0x18c>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8006c98 <pvPortMalloc+0x18c>)
 8006c2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006c98 <pvPortMalloc+0x18c>)
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	4b1b      	ldr	r3, [pc, #108]	@ (8006ca0 <pvPortMalloc+0x194>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d203      	bcs.n	8006c42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c3a:	4b17      	ldr	r3, [pc, #92]	@ (8006c98 <pvPortMalloc+0x18c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a18      	ldr	r2, [pc, #96]	@ (8006ca0 <pvPortMalloc+0x194>)
 8006c40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	4b13      	ldr	r3, [pc, #76]	@ (8006c94 <pvPortMalloc+0x188>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c56:	4b13      	ldr	r3, [pc, #76]	@ (8006ca4 <pvPortMalloc+0x198>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	4a11      	ldr	r2, [pc, #68]	@ (8006ca4 <pvPortMalloc+0x198>)
 8006c5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c60:	f7fe fcee 	bl	8005640 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00b      	beq.n	8006c86 <pvPortMalloc+0x17a>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	60fb      	str	r3, [r7, #12]
}
 8006c80:	bf00      	nop
 8006c82:	bf00      	nop
 8006c84:	e7fd      	b.n	8006c82 <pvPortMalloc+0x176>
	return pvReturn;
 8006c86:	69fb      	ldr	r3, [r7, #28]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3728      	adds	r7, #40	@ 0x28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20004c7c 	.word	0x20004c7c
 8006c94:	20004c90 	.word	0x20004c90
 8006c98:	20004c80 	.word	0x20004c80
 8006c9c:	20004c74 	.word	0x20004c74
 8006ca0:	20004c84 	.word	0x20004c84
 8006ca4:	20004c88 	.word	0x20004c88

08006ca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d04f      	beq.n	8006d5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cba:	2308      	movs	r3, #8
 8006cbc:	425b      	negs	r3, r3
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	4b25      	ldr	r3, [pc, #148]	@ (8006d64 <vPortFree+0xbc>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10b      	bne.n	8006cee <vPortFree+0x46>
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	60fb      	str	r3, [r7, #12]
}
 8006ce8:	bf00      	nop
 8006cea:	bf00      	nop
 8006cec:	e7fd      	b.n	8006cea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <vPortFree+0x66>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60bb      	str	r3, [r7, #8]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	4b14      	ldr	r3, [pc, #80]	@ (8006d64 <vPortFree+0xbc>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4013      	ands	r3, r2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01e      	beq.n	8006d5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d11a      	bne.n	8006d5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	4b0e      	ldr	r3, [pc, #56]	@ (8006d64 <vPortFree+0xbc>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	401a      	ands	r2, r3
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d34:	f7fe fc76 	bl	8005624 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d68 <vPortFree+0xc0>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4413      	add	r3, r2
 8006d42:	4a09      	ldr	r2, [pc, #36]	@ (8006d68 <vPortFree+0xc0>)
 8006d44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d46:	6938      	ldr	r0, [r7, #16]
 8006d48:	f000 f874 	bl	8006e34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d4c:	4b07      	ldr	r3, [pc, #28]	@ (8006d6c <vPortFree+0xc4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3301      	adds	r3, #1
 8006d52:	4a06      	ldr	r2, [pc, #24]	@ (8006d6c <vPortFree+0xc4>)
 8006d54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d56:	f7fe fc73 	bl	8005640 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d5a:	bf00      	nop
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20004c90 	.word	0x20004c90
 8006d68:	20004c80 	.word	0x20004c80
 8006d6c:	20004c8c 	.word	0x20004c8c

08006d70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006d7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d7c:	4b27      	ldr	r3, [pc, #156]	@ (8006e1c <prvHeapInit+0xac>)
 8006d7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00c      	beq.n	8006da4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3307      	adds	r3, #7
 8006d8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0307 	bic.w	r3, r3, #7
 8006d96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8006e1c <prvHeapInit+0xac>)
 8006da0:	4413      	add	r3, r2
 8006da2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006da8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e20 <prvHeapInit+0xb0>)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006dae:	4b1c      	ldr	r3, [pc, #112]	@ (8006e20 <prvHeapInit+0xb0>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	4413      	add	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	1a9b      	subs	r3, r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0307 	bic.w	r3, r3, #7
 8006dca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4a15      	ldr	r2, [pc, #84]	@ (8006e24 <prvHeapInit+0xb4>)
 8006dd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006dd2:	4b14      	ldr	r3, [pc, #80]	@ (8006e24 <prvHeapInit+0xb4>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dda:	4b12      	ldr	r3, [pc, #72]	@ (8006e24 <prvHeapInit+0xb4>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	1ad2      	subs	r2, r2, r3
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006df0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e24 <prvHeapInit+0xb4>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8006e28 <prvHeapInit+0xb8>)
 8006dfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	4a09      	ldr	r2, [pc, #36]	@ (8006e2c <prvHeapInit+0xbc>)
 8006e06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e08:	4b09      	ldr	r3, [pc, #36]	@ (8006e30 <prvHeapInit+0xc0>)
 8006e0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006e0e:	601a      	str	r2, [r3, #0]
}
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	20001074 	.word	0x20001074
 8006e20:	20004c74 	.word	0x20004c74
 8006e24:	20004c7c 	.word	0x20004c7c
 8006e28:	20004c84 	.word	0x20004c84
 8006e2c:	20004c80 	.word	0x20004c80
 8006e30:	20004c90 	.word	0x20004c90

08006e34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e3c:	4b28      	ldr	r3, [pc, #160]	@ (8006ee0 <prvInsertBlockIntoFreeList+0xac>)
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	e002      	b.n	8006e48 <prvInsertBlockIntoFreeList+0x14>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d8f7      	bhi.n	8006e42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d108      	bne.n	8006e76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	441a      	add	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	441a      	add	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d118      	bne.n	8006ebc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4b15      	ldr	r3, [pc, #84]	@ (8006ee4 <prvInsertBlockIntoFreeList+0xb0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d00d      	beq.n	8006eb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	441a      	add	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	e008      	b.n	8006ec4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee4 <prvInsertBlockIntoFreeList+0xb0>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	e003      	b.n	8006ec4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d002      	beq.n	8006ed2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ed2:	bf00      	nop
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	20004c74 	.word	0x20004c74
 8006ee4:	20004c7c 	.word	0x20004c7c

08006ee8 <siprintf>:
 8006ee8:	b40e      	push	{r1, r2, r3}
 8006eea:	b500      	push	{lr}
 8006eec:	b09c      	sub	sp, #112	@ 0x70
 8006eee:	ab1d      	add	r3, sp, #116	@ 0x74
 8006ef0:	9002      	str	r0, [sp, #8]
 8006ef2:	9006      	str	r0, [sp, #24]
 8006ef4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ef8:	4809      	ldr	r0, [pc, #36]	@ (8006f20 <siprintf+0x38>)
 8006efa:	9107      	str	r1, [sp, #28]
 8006efc:	9104      	str	r1, [sp, #16]
 8006efe:	4909      	ldr	r1, [pc, #36]	@ (8006f24 <siprintf+0x3c>)
 8006f00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f04:	9105      	str	r1, [sp, #20]
 8006f06:	6800      	ldr	r0, [r0, #0]
 8006f08:	9301      	str	r3, [sp, #4]
 8006f0a:	a902      	add	r1, sp, #8
 8006f0c:	f000 f9a2 	bl	8007254 <_svfiprintf_r>
 8006f10:	9b02      	ldr	r3, [sp, #8]
 8006f12:	2200      	movs	r2, #0
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	b01c      	add	sp, #112	@ 0x70
 8006f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f1c:	b003      	add	sp, #12
 8006f1e:	4770      	bx	lr
 8006f20:	20000030 	.word	0x20000030
 8006f24:	ffff0208 	.word	0xffff0208

08006f28 <memset>:
 8006f28:	4402      	add	r2, r0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d100      	bne.n	8006f32 <memset+0xa>
 8006f30:	4770      	bx	lr
 8006f32:	f803 1b01 	strb.w	r1, [r3], #1
 8006f36:	e7f9      	b.n	8006f2c <memset+0x4>

08006f38 <__errno>:
 8006f38:	4b01      	ldr	r3, [pc, #4]	@ (8006f40 <__errno+0x8>)
 8006f3a:	6818      	ldr	r0, [r3, #0]
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20000030 	.word	0x20000030

08006f44 <__libc_init_array>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	4d0d      	ldr	r5, [pc, #52]	@ (8006f7c <__libc_init_array+0x38>)
 8006f48:	4c0d      	ldr	r4, [pc, #52]	@ (8006f80 <__libc_init_array+0x3c>)
 8006f4a:	1b64      	subs	r4, r4, r5
 8006f4c:	10a4      	asrs	r4, r4, #2
 8006f4e:	2600      	movs	r6, #0
 8006f50:	42a6      	cmp	r6, r4
 8006f52:	d109      	bne.n	8006f68 <__libc_init_array+0x24>
 8006f54:	4d0b      	ldr	r5, [pc, #44]	@ (8006f84 <__libc_init_array+0x40>)
 8006f56:	4c0c      	ldr	r4, [pc, #48]	@ (8006f88 <__libc_init_array+0x44>)
 8006f58:	f000 fc66 	bl	8007828 <_init>
 8006f5c:	1b64      	subs	r4, r4, r5
 8006f5e:	10a4      	asrs	r4, r4, #2
 8006f60:	2600      	movs	r6, #0
 8006f62:	42a6      	cmp	r6, r4
 8006f64:	d105      	bne.n	8006f72 <__libc_init_array+0x2e>
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6c:	4798      	blx	r3
 8006f6e:	3601      	adds	r6, #1
 8006f70:	e7ee      	b.n	8006f50 <__libc_init_array+0xc>
 8006f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f76:	4798      	blx	r3
 8006f78:	3601      	adds	r6, #1
 8006f7a:	e7f2      	b.n	8006f62 <__libc_init_array+0x1e>
 8006f7c:	0800793c 	.word	0x0800793c
 8006f80:	0800793c 	.word	0x0800793c
 8006f84:	0800793c 	.word	0x0800793c
 8006f88:	08007940 	.word	0x08007940

08006f8c <__retarget_lock_acquire_recursive>:
 8006f8c:	4770      	bx	lr

08006f8e <__retarget_lock_release_recursive>:
 8006f8e:	4770      	bx	lr

08006f90 <memcpy>:
 8006f90:	440a      	add	r2, r1
 8006f92:	4291      	cmp	r1, r2
 8006f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f98:	d100      	bne.n	8006f9c <memcpy+0xc>
 8006f9a:	4770      	bx	lr
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fa6:	4291      	cmp	r1, r2
 8006fa8:	d1f9      	bne.n	8006f9e <memcpy+0xe>
 8006faa:	bd10      	pop	{r4, pc}

08006fac <_free_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4605      	mov	r5, r0
 8006fb0:	2900      	cmp	r1, #0
 8006fb2:	d041      	beq.n	8007038 <_free_r+0x8c>
 8006fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb8:	1f0c      	subs	r4, r1, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bfb8      	it	lt
 8006fbe:	18e4      	addlt	r4, r4, r3
 8006fc0:	f000 f8e0 	bl	8007184 <__malloc_lock>
 8006fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800703c <_free_r+0x90>)
 8006fc6:	6813      	ldr	r3, [r2, #0]
 8006fc8:	b933      	cbnz	r3, 8006fd8 <_free_r+0x2c>
 8006fca:	6063      	str	r3, [r4, #4]
 8006fcc:	6014      	str	r4, [r2, #0]
 8006fce:	4628      	mov	r0, r5
 8006fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fd4:	f000 b8dc 	b.w	8007190 <__malloc_unlock>
 8006fd8:	42a3      	cmp	r3, r4
 8006fda:	d908      	bls.n	8006fee <_free_r+0x42>
 8006fdc:	6820      	ldr	r0, [r4, #0]
 8006fde:	1821      	adds	r1, r4, r0
 8006fe0:	428b      	cmp	r3, r1
 8006fe2:	bf01      	itttt	eq
 8006fe4:	6819      	ldreq	r1, [r3, #0]
 8006fe6:	685b      	ldreq	r3, [r3, #4]
 8006fe8:	1809      	addeq	r1, r1, r0
 8006fea:	6021      	streq	r1, [r4, #0]
 8006fec:	e7ed      	b.n	8006fca <_free_r+0x1e>
 8006fee:	461a      	mov	r2, r3
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	b10b      	cbz	r3, 8006ff8 <_free_r+0x4c>
 8006ff4:	42a3      	cmp	r3, r4
 8006ff6:	d9fa      	bls.n	8006fee <_free_r+0x42>
 8006ff8:	6811      	ldr	r1, [r2, #0]
 8006ffa:	1850      	adds	r0, r2, r1
 8006ffc:	42a0      	cmp	r0, r4
 8006ffe:	d10b      	bne.n	8007018 <_free_r+0x6c>
 8007000:	6820      	ldr	r0, [r4, #0]
 8007002:	4401      	add	r1, r0
 8007004:	1850      	adds	r0, r2, r1
 8007006:	4283      	cmp	r3, r0
 8007008:	6011      	str	r1, [r2, #0]
 800700a:	d1e0      	bne.n	8006fce <_free_r+0x22>
 800700c:	6818      	ldr	r0, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	6053      	str	r3, [r2, #4]
 8007012:	4408      	add	r0, r1
 8007014:	6010      	str	r0, [r2, #0]
 8007016:	e7da      	b.n	8006fce <_free_r+0x22>
 8007018:	d902      	bls.n	8007020 <_free_r+0x74>
 800701a:	230c      	movs	r3, #12
 800701c:	602b      	str	r3, [r5, #0]
 800701e:	e7d6      	b.n	8006fce <_free_r+0x22>
 8007020:	6820      	ldr	r0, [r4, #0]
 8007022:	1821      	adds	r1, r4, r0
 8007024:	428b      	cmp	r3, r1
 8007026:	bf04      	itt	eq
 8007028:	6819      	ldreq	r1, [r3, #0]
 800702a:	685b      	ldreq	r3, [r3, #4]
 800702c:	6063      	str	r3, [r4, #4]
 800702e:	bf04      	itt	eq
 8007030:	1809      	addeq	r1, r1, r0
 8007032:	6021      	streq	r1, [r4, #0]
 8007034:	6054      	str	r4, [r2, #4]
 8007036:	e7ca      	b.n	8006fce <_free_r+0x22>
 8007038:	bd38      	pop	{r3, r4, r5, pc}
 800703a:	bf00      	nop
 800703c:	20004dd8 	.word	0x20004dd8

08007040 <sbrk_aligned>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	4e0f      	ldr	r6, [pc, #60]	@ (8007080 <sbrk_aligned+0x40>)
 8007044:	460c      	mov	r4, r1
 8007046:	6831      	ldr	r1, [r6, #0]
 8007048:	4605      	mov	r5, r0
 800704a:	b911      	cbnz	r1, 8007052 <sbrk_aligned+0x12>
 800704c:	f000 fba6 	bl	800779c <_sbrk_r>
 8007050:	6030      	str	r0, [r6, #0]
 8007052:	4621      	mov	r1, r4
 8007054:	4628      	mov	r0, r5
 8007056:	f000 fba1 	bl	800779c <_sbrk_r>
 800705a:	1c43      	adds	r3, r0, #1
 800705c:	d103      	bne.n	8007066 <sbrk_aligned+0x26>
 800705e:	f04f 34ff 	mov.w	r4, #4294967295
 8007062:	4620      	mov	r0, r4
 8007064:	bd70      	pop	{r4, r5, r6, pc}
 8007066:	1cc4      	adds	r4, r0, #3
 8007068:	f024 0403 	bic.w	r4, r4, #3
 800706c:	42a0      	cmp	r0, r4
 800706e:	d0f8      	beq.n	8007062 <sbrk_aligned+0x22>
 8007070:	1a21      	subs	r1, r4, r0
 8007072:	4628      	mov	r0, r5
 8007074:	f000 fb92 	bl	800779c <_sbrk_r>
 8007078:	3001      	adds	r0, #1
 800707a:	d1f2      	bne.n	8007062 <sbrk_aligned+0x22>
 800707c:	e7ef      	b.n	800705e <sbrk_aligned+0x1e>
 800707e:	bf00      	nop
 8007080:	20004dd4 	.word	0x20004dd4

08007084 <_malloc_r>:
 8007084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007088:	1ccd      	adds	r5, r1, #3
 800708a:	f025 0503 	bic.w	r5, r5, #3
 800708e:	3508      	adds	r5, #8
 8007090:	2d0c      	cmp	r5, #12
 8007092:	bf38      	it	cc
 8007094:	250c      	movcc	r5, #12
 8007096:	2d00      	cmp	r5, #0
 8007098:	4606      	mov	r6, r0
 800709a:	db01      	blt.n	80070a0 <_malloc_r+0x1c>
 800709c:	42a9      	cmp	r1, r5
 800709e:	d904      	bls.n	80070aa <_malloc_r+0x26>
 80070a0:	230c      	movs	r3, #12
 80070a2:	6033      	str	r3, [r6, #0]
 80070a4:	2000      	movs	r0, #0
 80070a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007180 <_malloc_r+0xfc>
 80070ae:	f000 f869 	bl	8007184 <__malloc_lock>
 80070b2:	f8d8 3000 	ldr.w	r3, [r8]
 80070b6:	461c      	mov	r4, r3
 80070b8:	bb44      	cbnz	r4, 800710c <_malloc_r+0x88>
 80070ba:	4629      	mov	r1, r5
 80070bc:	4630      	mov	r0, r6
 80070be:	f7ff ffbf 	bl	8007040 <sbrk_aligned>
 80070c2:	1c43      	adds	r3, r0, #1
 80070c4:	4604      	mov	r4, r0
 80070c6:	d158      	bne.n	800717a <_malloc_r+0xf6>
 80070c8:	f8d8 4000 	ldr.w	r4, [r8]
 80070cc:	4627      	mov	r7, r4
 80070ce:	2f00      	cmp	r7, #0
 80070d0:	d143      	bne.n	800715a <_malloc_r+0xd6>
 80070d2:	2c00      	cmp	r4, #0
 80070d4:	d04b      	beq.n	800716e <_malloc_r+0xea>
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	4639      	mov	r1, r7
 80070da:	4630      	mov	r0, r6
 80070dc:	eb04 0903 	add.w	r9, r4, r3
 80070e0:	f000 fb5c 	bl	800779c <_sbrk_r>
 80070e4:	4581      	cmp	r9, r0
 80070e6:	d142      	bne.n	800716e <_malloc_r+0xea>
 80070e8:	6821      	ldr	r1, [r4, #0]
 80070ea:	1a6d      	subs	r5, r5, r1
 80070ec:	4629      	mov	r1, r5
 80070ee:	4630      	mov	r0, r6
 80070f0:	f7ff ffa6 	bl	8007040 <sbrk_aligned>
 80070f4:	3001      	adds	r0, #1
 80070f6:	d03a      	beq.n	800716e <_malloc_r+0xea>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	442b      	add	r3, r5
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	bb62      	cbnz	r2, 8007160 <_malloc_r+0xdc>
 8007106:	f8c8 7000 	str.w	r7, [r8]
 800710a:	e00f      	b.n	800712c <_malloc_r+0xa8>
 800710c:	6822      	ldr	r2, [r4, #0]
 800710e:	1b52      	subs	r2, r2, r5
 8007110:	d420      	bmi.n	8007154 <_malloc_r+0xd0>
 8007112:	2a0b      	cmp	r2, #11
 8007114:	d917      	bls.n	8007146 <_malloc_r+0xc2>
 8007116:	1961      	adds	r1, r4, r5
 8007118:	42a3      	cmp	r3, r4
 800711a:	6025      	str	r5, [r4, #0]
 800711c:	bf18      	it	ne
 800711e:	6059      	strne	r1, [r3, #4]
 8007120:	6863      	ldr	r3, [r4, #4]
 8007122:	bf08      	it	eq
 8007124:	f8c8 1000 	streq.w	r1, [r8]
 8007128:	5162      	str	r2, [r4, r5]
 800712a:	604b      	str	r3, [r1, #4]
 800712c:	4630      	mov	r0, r6
 800712e:	f000 f82f 	bl	8007190 <__malloc_unlock>
 8007132:	f104 000b 	add.w	r0, r4, #11
 8007136:	1d23      	adds	r3, r4, #4
 8007138:	f020 0007 	bic.w	r0, r0, #7
 800713c:	1ac2      	subs	r2, r0, r3
 800713e:	bf1c      	itt	ne
 8007140:	1a1b      	subne	r3, r3, r0
 8007142:	50a3      	strne	r3, [r4, r2]
 8007144:	e7af      	b.n	80070a6 <_malloc_r+0x22>
 8007146:	6862      	ldr	r2, [r4, #4]
 8007148:	42a3      	cmp	r3, r4
 800714a:	bf0c      	ite	eq
 800714c:	f8c8 2000 	streq.w	r2, [r8]
 8007150:	605a      	strne	r2, [r3, #4]
 8007152:	e7eb      	b.n	800712c <_malloc_r+0xa8>
 8007154:	4623      	mov	r3, r4
 8007156:	6864      	ldr	r4, [r4, #4]
 8007158:	e7ae      	b.n	80070b8 <_malloc_r+0x34>
 800715a:	463c      	mov	r4, r7
 800715c:	687f      	ldr	r7, [r7, #4]
 800715e:	e7b6      	b.n	80070ce <_malloc_r+0x4a>
 8007160:	461a      	mov	r2, r3
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	42a3      	cmp	r3, r4
 8007166:	d1fb      	bne.n	8007160 <_malloc_r+0xdc>
 8007168:	2300      	movs	r3, #0
 800716a:	6053      	str	r3, [r2, #4]
 800716c:	e7de      	b.n	800712c <_malloc_r+0xa8>
 800716e:	230c      	movs	r3, #12
 8007170:	6033      	str	r3, [r6, #0]
 8007172:	4630      	mov	r0, r6
 8007174:	f000 f80c 	bl	8007190 <__malloc_unlock>
 8007178:	e794      	b.n	80070a4 <_malloc_r+0x20>
 800717a:	6005      	str	r5, [r0, #0]
 800717c:	e7d6      	b.n	800712c <_malloc_r+0xa8>
 800717e:	bf00      	nop
 8007180:	20004dd8 	.word	0x20004dd8

08007184 <__malloc_lock>:
 8007184:	4801      	ldr	r0, [pc, #4]	@ (800718c <__malloc_lock+0x8>)
 8007186:	f7ff bf01 	b.w	8006f8c <__retarget_lock_acquire_recursive>
 800718a:	bf00      	nop
 800718c:	20004dd0 	.word	0x20004dd0

08007190 <__malloc_unlock>:
 8007190:	4801      	ldr	r0, [pc, #4]	@ (8007198 <__malloc_unlock+0x8>)
 8007192:	f7ff befc 	b.w	8006f8e <__retarget_lock_release_recursive>
 8007196:	bf00      	nop
 8007198:	20004dd0 	.word	0x20004dd0

0800719c <__ssputs_r>:
 800719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	688e      	ldr	r6, [r1, #8]
 80071a2:	461f      	mov	r7, r3
 80071a4:	42be      	cmp	r6, r7
 80071a6:	680b      	ldr	r3, [r1, #0]
 80071a8:	4682      	mov	sl, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	4690      	mov	r8, r2
 80071ae:	d82d      	bhi.n	800720c <__ssputs_r+0x70>
 80071b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071b8:	d026      	beq.n	8007208 <__ssputs_r+0x6c>
 80071ba:	6965      	ldr	r5, [r4, #20]
 80071bc:	6909      	ldr	r1, [r1, #16]
 80071be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071c2:	eba3 0901 	sub.w	r9, r3, r1
 80071c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071ca:	1c7b      	adds	r3, r7, #1
 80071cc:	444b      	add	r3, r9
 80071ce:	106d      	asrs	r5, r5, #1
 80071d0:	429d      	cmp	r5, r3
 80071d2:	bf38      	it	cc
 80071d4:	461d      	movcc	r5, r3
 80071d6:	0553      	lsls	r3, r2, #21
 80071d8:	d527      	bpl.n	800722a <__ssputs_r+0x8e>
 80071da:	4629      	mov	r1, r5
 80071dc:	f7ff ff52 	bl	8007084 <_malloc_r>
 80071e0:	4606      	mov	r6, r0
 80071e2:	b360      	cbz	r0, 800723e <__ssputs_r+0xa2>
 80071e4:	6921      	ldr	r1, [r4, #16]
 80071e6:	464a      	mov	r2, r9
 80071e8:	f7ff fed2 	bl	8006f90 <memcpy>
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071f6:	81a3      	strh	r3, [r4, #12]
 80071f8:	6126      	str	r6, [r4, #16]
 80071fa:	6165      	str	r5, [r4, #20]
 80071fc:	444e      	add	r6, r9
 80071fe:	eba5 0509 	sub.w	r5, r5, r9
 8007202:	6026      	str	r6, [r4, #0]
 8007204:	60a5      	str	r5, [r4, #8]
 8007206:	463e      	mov	r6, r7
 8007208:	42be      	cmp	r6, r7
 800720a:	d900      	bls.n	800720e <__ssputs_r+0x72>
 800720c:	463e      	mov	r6, r7
 800720e:	6820      	ldr	r0, [r4, #0]
 8007210:	4632      	mov	r2, r6
 8007212:	4641      	mov	r1, r8
 8007214:	f000 faa8 	bl	8007768 <memmove>
 8007218:	68a3      	ldr	r3, [r4, #8]
 800721a:	1b9b      	subs	r3, r3, r6
 800721c:	60a3      	str	r3, [r4, #8]
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	4433      	add	r3, r6
 8007222:	6023      	str	r3, [r4, #0]
 8007224:	2000      	movs	r0, #0
 8007226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722a:	462a      	mov	r2, r5
 800722c:	f000 fac6 	bl	80077bc <_realloc_r>
 8007230:	4606      	mov	r6, r0
 8007232:	2800      	cmp	r0, #0
 8007234:	d1e0      	bne.n	80071f8 <__ssputs_r+0x5c>
 8007236:	6921      	ldr	r1, [r4, #16]
 8007238:	4650      	mov	r0, sl
 800723a:	f7ff feb7 	bl	8006fac <_free_r>
 800723e:	230c      	movs	r3, #12
 8007240:	f8ca 3000 	str.w	r3, [sl]
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	f04f 30ff 	mov.w	r0, #4294967295
 8007250:	e7e9      	b.n	8007226 <__ssputs_r+0x8a>
	...

08007254 <_svfiprintf_r>:
 8007254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007258:	4698      	mov	r8, r3
 800725a:	898b      	ldrh	r3, [r1, #12]
 800725c:	061b      	lsls	r3, r3, #24
 800725e:	b09d      	sub	sp, #116	@ 0x74
 8007260:	4607      	mov	r7, r0
 8007262:	460d      	mov	r5, r1
 8007264:	4614      	mov	r4, r2
 8007266:	d510      	bpl.n	800728a <_svfiprintf_r+0x36>
 8007268:	690b      	ldr	r3, [r1, #16]
 800726a:	b973      	cbnz	r3, 800728a <_svfiprintf_r+0x36>
 800726c:	2140      	movs	r1, #64	@ 0x40
 800726e:	f7ff ff09 	bl	8007084 <_malloc_r>
 8007272:	6028      	str	r0, [r5, #0]
 8007274:	6128      	str	r0, [r5, #16]
 8007276:	b930      	cbnz	r0, 8007286 <_svfiprintf_r+0x32>
 8007278:	230c      	movs	r3, #12
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	f04f 30ff 	mov.w	r0, #4294967295
 8007280:	b01d      	add	sp, #116	@ 0x74
 8007282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007286:	2340      	movs	r3, #64	@ 0x40
 8007288:	616b      	str	r3, [r5, #20]
 800728a:	2300      	movs	r3, #0
 800728c:	9309      	str	r3, [sp, #36]	@ 0x24
 800728e:	2320      	movs	r3, #32
 8007290:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007294:	f8cd 800c 	str.w	r8, [sp, #12]
 8007298:	2330      	movs	r3, #48	@ 0x30
 800729a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007438 <_svfiprintf_r+0x1e4>
 800729e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072a2:	f04f 0901 	mov.w	r9, #1
 80072a6:	4623      	mov	r3, r4
 80072a8:	469a      	mov	sl, r3
 80072aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072ae:	b10a      	cbz	r2, 80072b4 <_svfiprintf_r+0x60>
 80072b0:	2a25      	cmp	r2, #37	@ 0x25
 80072b2:	d1f9      	bne.n	80072a8 <_svfiprintf_r+0x54>
 80072b4:	ebba 0b04 	subs.w	fp, sl, r4
 80072b8:	d00b      	beq.n	80072d2 <_svfiprintf_r+0x7e>
 80072ba:	465b      	mov	r3, fp
 80072bc:	4622      	mov	r2, r4
 80072be:	4629      	mov	r1, r5
 80072c0:	4638      	mov	r0, r7
 80072c2:	f7ff ff6b 	bl	800719c <__ssputs_r>
 80072c6:	3001      	adds	r0, #1
 80072c8:	f000 80a7 	beq.w	800741a <_svfiprintf_r+0x1c6>
 80072cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072ce:	445a      	add	r2, fp
 80072d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80072d2:	f89a 3000 	ldrb.w	r3, [sl]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 809f 	beq.w	800741a <_svfiprintf_r+0x1c6>
 80072dc:	2300      	movs	r3, #0
 80072de:	f04f 32ff 	mov.w	r2, #4294967295
 80072e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072e6:	f10a 0a01 	add.w	sl, sl, #1
 80072ea:	9304      	str	r3, [sp, #16]
 80072ec:	9307      	str	r3, [sp, #28]
 80072ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80072f4:	4654      	mov	r4, sl
 80072f6:	2205      	movs	r2, #5
 80072f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072fc:	484e      	ldr	r0, [pc, #312]	@ (8007438 <_svfiprintf_r+0x1e4>)
 80072fe:	f7f8 ff77 	bl	80001f0 <memchr>
 8007302:	9a04      	ldr	r2, [sp, #16]
 8007304:	b9d8      	cbnz	r0, 800733e <_svfiprintf_r+0xea>
 8007306:	06d0      	lsls	r0, r2, #27
 8007308:	bf44      	itt	mi
 800730a:	2320      	movmi	r3, #32
 800730c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007310:	0711      	lsls	r1, r2, #28
 8007312:	bf44      	itt	mi
 8007314:	232b      	movmi	r3, #43	@ 0x2b
 8007316:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800731a:	f89a 3000 	ldrb.w	r3, [sl]
 800731e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007320:	d015      	beq.n	800734e <_svfiprintf_r+0xfa>
 8007322:	9a07      	ldr	r2, [sp, #28]
 8007324:	4654      	mov	r4, sl
 8007326:	2000      	movs	r0, #0
 8007328:	f04f 0c0a 	mov.w	ip, #10
 800732c:	4621      	mov	r1, r4
 800732e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007332:	3b30      	subs	r3, #48	@ 0x30
 8007334:	2b09      	cmp	r3, #9
 8007336:	d94b      	bls.n	80073d0 <_svfiprintf_r+0x17c>
 8007338:	b1b0      	cbz	r0, 8007368 <_svfiprintf_r+0x114>
 800733a:	9207      	str	r2, [sp, #28]
 800733c:	e014      	b.n	8007368 <_svfiprintf_r+0x114>
 800733e:	eba0 0308 	sub.w	r3, r0, r8
 8007342:	fa09 f303 	lsl.w	r3, r9, r3
 8007346:	4313      	orrs	r3, r2
 8007348:	9304      	str	r3, [sp, #16]
 800734a:	46a2      	mov	sl, r4
 800734c:	e7d2      	b.n	80072f4 <_svfiprintf_r+0xa0>
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	1d19      	adds	r1, r3, #4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	9103      	str	r1, [sp, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	bfbb      	ittet	lt
 800735a:	425b      	neglt	r3, r3
 800735c:	f042 0202 	orrlt.w	r2, r2, #2
 8007360:	9307      	strge	r3, [sp, #28]
 8007362:	9307      	strlt	r3, [sp, #28]
 8007364:	bfb8      	it	lt
 8007366:	9204      	strlt	r2, [sp, #16]
 8007368:	7823      	ldrb	r3, [r4, #0]
 800736a:	2b2e      	cmp	r3, #46	@ 0x2e
 800736c:	d10a      	bne.n	8007384 <_svfiprintf_r+0x130>
 800736e:	7863      	ldrb	r3, [r4, #1]
 8007370:	2b2a      	cmp	r3, #42	@ 0x2a
 8007372:	d132      	bne.n	80073da <_svfiprintf_r+0x186>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	1d1a      	adds	r2, r3, #4
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	9203      	str	r2, [sp, #12]
 800737c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007380:	3402      	adds	r4, #2
 8007382:	9305      	str	r3, [sp, #20]
 8007384:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007448 <_svfiprintf_r+0x1f4>
 8007388:	7821      	ldrb	r1, [r4, #0]
 800738a:	2203      	movs	r2, #3
 800738c:	4650      	mov	r0, sl
 800738e:	f7f8 ff2f 	bl	80001f0 <memchr>
 8007392:	b138      	cbz	r0, 80073a4 <_svfiprintf_r+0x150>
 8007394:	9b04      	ldr	r3, [sp, #16]
 8007396:	eba0 000a 	sub.w	r0, r0, sl
 800739a:	2240      	movs	r2, #64	@ 0x40
 800739c:	4082      	lsls	r2, r0
 800739e:	4313      	orrs	r3, r2
 80073a0:	3401      	adds	r4, #1
 80073a2:	9304      	str	r3, [sp, #16]
 80073a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a8:	4824      	ldr	r0, [pc, #144]	@ (800743c <_svfiprintf_r+0x1e8>)
 80073aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073ae:	2206      	movs	r2, #6
 80073b0:	f7f8 ff1e 	bl	80001f0 <memchr>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d036      	beq.n	8007426 <_svfiprintf_r+0x1d2>
 80073b8:	4b21      	ldr	r3, [pc, #132]	@ (8007440 <_svfiprintf_r+0x1ec>)
 80073ba:	bb1b      	cbnz	r3, 8007404 <_svfiprintf_r+0x1b0>
 80073bc:	9b03      	ldr	r3, [sp, #12]
 80073be:	3307      	adds	r3, #7
 80073c0:	f023 0307 	bic.w	r3, r3, #7
 80073c4:	3308      	adds	r3, #8
 80073c6:	9303      	str	r3, [sp, #12]
 80073c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ca:	4433      	add	r3, r6
 80073cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ce:	e76a      	b.n	80072a6 <_svfiprintf_r+0x52>
 80073d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80073d4:	460c      	mov	r4, r1
 80073d6:	2001      	movs	r0, #1
 80073d8:	e7a8      	b.n	800732c <_svfiprintf_r+0xd8>
 80073da:	2300      	movs	r3, #0
 80073dc:	3401      	adds	r4, #1
 80073de:	9305      	str	r3, [sp, #20]
 80073e0:	4619      	mov	r1, r3
 80073e2:	f04f 0c0a 	mov.w	ip, #10
 80073e6:	4620      	mov	r0, r4
 80073e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ec:	3a30      	subs	r2, #48	@ 0x30
 80073ee:	2a09      	cmp	r2, #9
 80073f0:	d903      	bls.n	80073fa <_svfiprintf_r+0x1a6>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0c6      	beq.n	8007384 <_svfiprintf_r+0x130>
 80073f6:	9105      	str	r1, [sp, #20]
 80073f8:	e7c4      	b.n	8007384 <_svfiprintf_r+0x130>
 80073fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80073fe:	4604      	mov	r4, r0
 8007400:	2301      	movs	r3, #1
 8007402:	e7f0      	b.n	80073e6 <_svfiprintf_r+0x192>
 8007404:	ab03      	add	r3, sp, #12
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	462a      	mov	r2, r5
 800740a:	4b0e      	ldr	r3, [pc, #56]	@ (8007444 <_svfiprintf_r+0x1f0>)
 800740c:	a904      	add	r1, sp, #16
 800740e:	4638      	mov	r0, r7
 8007410:	f3af 8000 	nop.w
 8007414:	1c42      	adds	r2, r0, #1
 8007416:	4606      	mov	r6, r0
 8007418:	d1d6      	bne.n	80073c8 <_svfiprintf_r+0x174>
 800741a:	89ab      	ldrh	r3, [r5, #12]
 800741c:	065b      	lsls	r3, r3, #25
 800741e:	f53f af2d 	bmi.w	800727c <_svfiprintf_r+0x28>
 8007422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007424:	e72c      	b.n	8007280 <_svfiprintf_r+0x2c>
 8007426:	ab03      	add	r3, sp, #12
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	462a      	mov	r2, r5
 800742c:	4b05      	ldr	r3, [pc, #20]	@ (8007444 <_svfiprintf_r+0x1f0>)
 800742e:	a904      	add	r1, sp, #16
 8007430:	4638      	mov	r0, r7
 8007432:	f000 f879 	bl	8007528 <_printf_i>
 8007436:	e7ed      	b.n	8007414 <_svfiprintf_r+0x1c0>
 8007438:	08007900 	.word	0x08007900
 800743c:	0800790a 	.word	0x0800790a
 8007440:	00000000 	.word	0x00000000
 8007444:	0800719d 	.word	0x0800719d
 8007448:	08007906 	.word	0x08007906

0800744c <_printf_common>:
 800744c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007450:	4616      	mov	r6, r2
 8007452:	4698      	mov	r8, r3
 8007454:	688a      	ldr	r2, [r1, #8]
 8007456:	690b      	ldr	r3, [r1, #16]
 8007458:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800745c:	4293      	cmp	r3, r2
 800745e:	bfb8      	it	lt
 8007460:	4613      	movlt	r3, r2
 8007462:	6033      	str	r3, [r6, #0]
 8007464:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007468:	4607      	mov	r7, r0
 800746a:	460c      	mov	r4, r1
 800746c:	b10a      	cbz	r2, 8007472 <_printf_common+0x26>
 800746e:	3301      	adds	r3, #1
 8007470:	6033      	str	r3, [r6, #0]
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	0699      	lsls	r1, r3, #26
 8007476:	bf42      	ittt	mi
 8007478:	6833      	ldrmi	r3, [r6, #0]
 800747a:	3302      	addmi	r3, #2
 800747c:	6033      	strmi	r3, [r6, #0]
 800747e:	6825      	ldr	r5, [r4, #0]
 8007480:	f015 0506 	ands.w	r5, r5, #6
 8007484:	d106      	bne.n	8007494 <_printf_common+0x48>
 8007486:	f104 0a19 	add.w	sl, r4, #25
 800748a:	68e3      	ldr	r3, [r4, #12]
 800748c:	6832      	ldr	r2, [r6, #0]
 800748e:	1a9b      	subs	r3, r3, r2
 8007490:	42ab      	cmp	r3, r5
 8007492:	dc26      	bgt.n	80074e2 <_printf_common+0x96>
 8007494:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007498:	6822      	ldr	r2, [r4, #0]
 800749a:	3b00      	subs	r3, #0
 800749c:	bf18      	it	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	0692      	lsls	r2, r2, #26
 80074a2:	d42b      	bmi.n	80074fc <_printf_common+0xb0>
 80074a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074a8:	4641      	mov	r1, r8
 80074aa:	4638      	mov	r0, r7
 80074ac:	47c8      	blx	r9
 80074ae:	3001      	adds	r0, #1
 80074b0:	d01e      	beq.n	80074f0 <_printf_common+0xa4>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	6922      	ldr	r2, [r4, #16]
 80074b6:	f003 0306 	and.w	r3, r3, #6
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	bf02      	ittt	eq
 80074be:	68e5      	ldreq	r5, [r4, #12]
 80074c0:	6833      	ldreq	r3, [r6, #0]
 80074c2:	1aed      	subeq	r5, r5, r3
 80074c4:	68a3      	ldr	r3, [r4, #8]
 80074c6:	bf0c      	ite	eq
 80074c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074cc:	2500      	movne	r5, #0
 80074ce:	4293      	cmp	r3, r2
 80074d0:	bfc4      	itt	gt
 80074d2:	1a9b      	subgt	r3, r3, r2
 80074d4:	18ed      	addgt	r5, r5, r3
 80074d6:	2600      	movs	r6, #0
 80074d8:	341a      	adds	r4, #26
 80074da:	42b5      	cmp	r5, r6
 80074dc:	d11a      	bne.n	8007514 <_printf_common+0xc8>
 80074de:	2000      	movs	r0, #0
 80074e0:	e008      	b.n	80074f4 <_printf_common+0xa8>
 80074e2:	2301      	movs	r3, #1
 80074e4:	4652      	mov	r2, sl
 80074e6:	4641      	mov	r1, r8
 80074e8:	4638      	mov	r0, r7
 80074ea:	47c8      	blx	r9
 80074ec:	3001      	adds	r0, #1
 80074ee:	d103      	bne.n	80074f8 <_printf_common+0xac>
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295
 80074f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f8:	3501      	adds	r5, #1
 80074fa:	e7c6      	b.n	800748a <_printf_common+0x3e>
 80074fc:	18e1      	adds	r1, r4, r3
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	2030      	movs	r0, #48	@ 0x30
 8007502:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007506:	4422      	add	r2, r4
 8007508:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800750c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007510:	3302      	adds	r3, #2
 8007512:	e7c7      	b.n	80074a4 <_printf_common+0x58>
 8007514:	2301      	movs	r3, #1
 8007516:	4622      	mov	r2, r4
 8007518:	4641      	mov	r1, r8
 800751a:	4638      	mov	r0, r7
 800751c:	47c8      	blx	r9
 800751e:	3001      	adds	r0, #1
 8007520:	d0e6      	beq.n	80074f0 <_printf_common+0xa4>
 8007522:	3601      	adds	r6, #1
 8007524:	e7d9      	b.n	80074da <_printf_common+0x8e>
	...

08007528 <_printf_i>:
 8007528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	7e0f      	ldrb	r7, [r1, #24]
 800752e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007530:	2f78      	cmp	r7, #120	@ 0x78
 8007532:	4691      	mov	r9, r2
 8007534:	4680      	mov	r8, r0
 8007536:	460c      	mov	r4, r1
 8007538:	469a      	mov	sl, r3
 800753a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800753e:	d807      	bhi.n	8007550 <_printf_i+0x28>
 8007540:	2f62      	cmp	r7, #98	@ 0x62
 8007542:	d80a      	bhi.n	800755a <_printf_i+0x32>
 8007544:	2f00      	cmp	r7, #0
 8007546:	f000 80d2 	beq.w	80076ee <_printf_i+0x1c6>
 800754a:	2f58      	cmp	r7, #88	@ 0x58
 800754c:	f000 80b9 	beq.w	80076c2 <_printf_i+0x19a>
 8007550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007554:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007558:	e03a      	b.n	80075d0 <_printf_i+0xa8>
 800755a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800755e:	2b15      	cmp	r3, #21
 8007560:	d8f6      	bhi.n	8007550 <_printf_i+0x28>
 8007562:	a101      	add	r1, pc, #4	@ (adr r1, 8007568 <_printf_i+0x40>)
 8007564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007568:	080075c1 	.word	0x080075c1
 800756c:	080075d5 	.word	0x080075d5
 8007570:	08007551 	.word	0x08007551
 8007574:	08007551 	.word	0x08007551
 8007578:	08007551 	.word	0x08007551
 800757c:	08007551 	.word	0x08007551
 8007580:	080075d5 	.word	0x080075d5
 8007584:	08007551 	.word	0x08007551
 8007588:	08007551 	.word	0x08007551
 800758c:	08007551 	.word	0x08007551
 8007590:	08007551 	.word	0x08007551
 8007594:	080076d5 	.word	0x080076d5
 8007598:	080075ff 	.word	0x080075ff
 800759c:	0800768f 	.word	0x0800768f
 80075a0:	08007551 	.word	0x08007551
 80075a4:	08007551 	.word	0x08007551
 80075a8:	080076f7 	.word	0x080076f7
 80075ac:	08007551 	.word	0x08007551
 80075b0:	080075ff 	.word	0x080075ff
 80075b4:	08007551 	.word	0x08007551
 80075b8:	08007551 	.word	0x08007551
 80075bc:	08007697 	.word	0x08007697
 80075c0:	6833      	ldr	r3, [r6, #0]
 80075c2:	1d1a      	adds	r2, r3, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6032      	str	r2, [r6, #0]
 80075c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075d0:	2301      	movs	r3, #1
 80075d2:	e09d      	b.n	8007710 <_printf_i+0x1e8>
 80075d4:	6833      	ldr	r3, [r6, #0]
 80075d6:	6820      	ldr	r0, [r4, #0]
 80075d8:	1d19      	adds	r1, r3, #4
 80075da:	6031      	str	r1, [r6, #0]
 80075dc:	0606      	lsls	r6, r0, #24
 80075de:	d501      	bpl.n	80075e4 <_printf_i+0xbc>
 80075e0:	681d      	ldr	r5, [r3, #0]
 80075e2:	e003      	b.n	80075ec <_printf_i+0xc4>
 80075e4:	0645      	lsls	r5, r0, #25
 80075e6:	d5fb      	bpl.n	80075e0 <_printf_i+0xb8>
 80075e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	da03      	bge.n	80075f8 <_printf_i+0xd0>
 80075f0:	232d      	movs	r3, #45	@ 0x2d
 80075f2:	426d      	negs	r5, r5
 80075f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075f8:	4859      	ldr	r0, [pc, #356]	@ (8007760 <_printf_i+0x238>)
 80075fa:	230a      	movs	r3, #10
 80075fc:	e011      	b.n	8007622 <_printf_i+0xfa>
 80075fe:	6821      	ldr	r1, [r4, #0]
 8007600:	6833      	ldr	r3, [r6, #0]
 8007602:	0608      	lsls	r0, r1, #24
 8007604:	f853 5b04 	ldr.w	r5, [r3], #4
 8007608:	d402      	bmi.n	8007610 <_printf_i+0xe8>
 800760a:	0649      	lsls	r1, r1, #25
 800760c:	bf48      	it	mi
 800760e:	b2ad      	uxthmi	r5, r5
 8007610:	2f6f      	cmp	r7, #111	@ 0x6f
 8007612:	4853      	ldr	r0, [pc, #332]	@ (8007760 <_printf_i+0x238>)
 8007614:	6033      	str	r3, [r6, #0]
 8007616:	bf14      	ite	ne
 8007618:	230a      	movne	r3, #10
 800761a:	2308      	moveq	r3, #8
 800761c:	2100      	movs	r1, #0
 800761e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007622:	6866      	ldr	r6, [r4, #4]
 8007624:	60a6      	str	r6, [r4, #8]
 8007626:	2e00      	cmp	r6, #0
 8007628:	bfa2      	ittt	ge
 800762a:	6821      	ldrge	r1, [r4, #0]
 800762c:	f021 0104 	bicge.w	r1, r1, #4
 8007630:	6021      	strge	r1, [r4, #0]
 8007632:	b90d      	cbnz	r5, 8007638 <_printf_i+0x110>
 8007634:	2e00      	cmp	r6, #0
 8007636:	d04b      	beq.n	80076d0 <_printf_i+0x1a8>
 8007638:	4616      	mov	r6, r2
 800763a:	fbb5 f1f3 	udiv	r1, r5, r3
 800763e:	fb03 5711 	mls	r7, r3, r1, r5
 8007642:	5dc7      	ldrb	r7, [r0, r7]
 8007644:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007648:	462f      	mov	r7, r5
 800764a:	42bb      	cmp	r3, r7
 800764c:	460d      	mov	r5, r1
 800764e:	d9f4      	bls.n	800763a <_printf_i+0x112>
 8007650:	2b08      	cmp	r3, #8
 8007652:	d10b      	bne.n	800766c <_printf_i+0x144>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	07df      	lsls	r7, r3, #31
 8007658:	d508      	bpl.n	800766c <_printf_i+0x144>
 800765a:	6923      	ldr	r3, [r4, #16]
 800765c:	6861      	ldr	r1, [r4, #4]
 800765e:	4299      	cmp	r1, r3
 8007660:	bfde      	ittt	le
 8007662:	2330      	movle	r3, #48	@ 0x30
 8007664:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007668:	f106 36ff 	addle.w	r6, r6, #4294967295
 800766c:	1b92      	subs	r2, r2, r6
 800766e:	6122      	str	r2, [r4, #16]
 8007670:	f8cd a000 	str.w	sl, [sp]
 8007674:	464b      	mov	r3, r9
 8007676:	aa03      	add	r2, sp, #12
 8007678:	4621      	mov	r1, r4
 800767a:	4640      	mov	r0, r8
 800767c:	f7ff fee6 	bl	800744c <_printf_common>
 8007680:	3001      	adds	r0, #1
 8007682:	d14a      	bne.n	800771a <_printf_i+0x1f2>
 8007684:	f04f 30ff 	mov.w	r0, #4294967295
 8007688:	b004      	add	sp, #16
 800768a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	f043 0320 	orr.w	r3, r3, #32
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	4833      	ldr	r0, [pc, #204]	@ (8007764 <_printf_i+0x23c>)
 8007698:	2778      	movs	r7, #120	@ 0x78
 800769a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	6831      	ldr	r1, [r6, #0]
 80076a2:	061f      	lsls	r7, r3, #24
 80076a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80076a8:	d402      	bmi.n	80076b0 <_printf_i+0x188>
 80076aa:	065f      	lsls	r7, r3, #25
 80076ac:	bf48      	it	mi
 80076ae:	b2ad      	uxthmi	r5, r5
 80076b0:	6031      	str	r1, [r6, #0]
 80076b2:	07d9      	lsls	r1, r3, #31
 80076b4:	bf44      	itt	mi
 80076b6:	f043 0320 	orrmi.w	r3, r3, #32
 80076ba:	6023      	strmi	r3, [r4, #0]
 80076bc:	b11d      	cbz	r5, 80076c6 <_printf_i+0x19e>
 80076be:	2310      	movs	r3, #16
 80076c0:	e7ac      	b.n	800761c <_printf_i+0xf4>
 80076c2:	4827      	ldr	r0, [pc, #156]	@ (8007760 <_printf_i+0x238>)
 80076c4:	e7e9      	b.n	800769a <_printf_i+0x172>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	f023 0320 	bic.w	r3, r3, #32
 80076cc:	6023      	str	r3, [r4, #0]
 80076ce:	e7f6      	b.n	80076be <_printf_i+0x196>
 80076d0:	4616      	mov	r6, r2
 80076d2:	e7bd      	b.n	8007650 <_printf_i+0x128>
 80076d4:	6833      	ldr	r3, [r6, #0]
 80076d6:	6825      	ldr	r5, [r4, #0]
 80076d8:	6961      	ldr	r1, [r4, #20]
 80076da:	1d18      	adds	r0, r3, #4
 80076dc:	6030      	str	r0, [r6, #0]
 80076de:	062e      	lsls	r6, r5, #24
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	d501      	bpl.n	80076e8 <_printf_i+0x1c0>
 80076e4:	6019      	str	r1, [r3, #0]
 80076e6:	e002      	b.n	80076ee <_printf_i+0x1c6>
 80076e8:	0668      	lsls	r0, r5, #25
 80076ea:	d5fb      	bpl.n	80076e4 <_printf_i+0x1bc>
 80076ec:	8019      	strh	r1, [r3, #0]
 80076ee:	2300      	movs	r3, #0
 80076f0:	6123      	str	r3, [r4, #16]
 80076f2:	4616      	mov	r6, r2
 80076f4:	e7bc      	b.n	8007670 <_printf_i+0x148>
 80076f6:	6833      	ldr	r3, [r6, #0]
 80076f8:	1d1a      	adds	r2, r3, #4
 80076fa:	6032      	str	r2, [r6, #0]
 80076fc:	681e      	ldr	r6, [r3, #0]
 80076fe:	6862      	ldr	r2, [r4, #4]
 8007700:	2100      	movs	r1, #0
 8007702:	4630      	mov	r0, r6
 8007704:	f7f8 fd74 	bl	80001f0 <memchr>
 8007708:	b108      	cbz	r0, 800770e <_printf_i+0x1e6>
 800770a:	1b80      	subs	r0, r0, r6
 800770c:	6060      	str	r0, [r4, #4]
 800770e:	6863      	ldr	r3, [r4, #4]
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	2300      	movs	r3, #0
 8007714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007718:	e7aa      	b.n	8007670 <_printf_i+0x148>
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	4632      	mov	r2, r6
 800771e:	4649      	mov	r1, r9
 8007720:	4640      	mov	r0, r8
 8007722:	47d0      	blx	sl
 8007724:	3001      	adds	r0, #1
 8007726:	d0ad      	beq.n	8007684 <_printf_i+0x15c>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	079b      	lsls	r3, r3, #30
 800772c:	d413      	bmi.n	8007756 <_printf_i+0x22e>
 800772e:	68e0      	ldr	r0, [r4, #12]
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	4298      	cmp	r0, r3
 8007734:	bfb8      	it	lt
 8007736:	4618      	movlt	r0, r3
 8007738:	e7a6      	b.n	8007688 <_printf_i+0x160>
 800773a:	2301      	movs	r3, #1
 800773c:	4632      	mov	r2, r6
 800773e:	4649      	mov	r1, r9
 8007740:	4640      	mov	r0, r8
 8007742:	47d0      	blx	sl
 8007744:	3001      	adds	r0, #1
 8007746:	d09d      	beq.n	8007684 <_printf_i+0x15c>
 8007748:	3501      	adds	r5, #1
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	9903      	ldr	r1, [sp, #12]
 800774e:	1a5b      	subs	r3, r3, r1
 8007750:	42ab      	cmp	r3, r5
 8007752:	dcf2      	bgt.n	800773a <_printf_i+0x212>
 8007754:	e7eb      	b.n	800772e <_printf_i+0x206>
 8007756:	2500      	movs	r5, #0
 8007758:	f104 0619 	add.w	r6, r4, #25
 800775c:	e7f5      	b.n	800774a <_printf_i+0x222>
 800775e:	bf00      	nop
 8007760:	08007911 	.word	0x08007911
 8007764:	08007922 	.word	0x08007922

08007768 <memmove>:
 8007768:	4288      	cmp	r0, r1
 800776a:	b510      	push	{r4, lr}
 800776c:	eb01 0402 	add.w	r4, r1, r2
 8007770:	d902      	bls.n	8007778 <memmove+0x10>
 8007772:	4284      	cmp	r4, r0
 8007774:	4623      	mov	r3, r4
 8007776:	d807      	bhi.n	8007788 <memmove+0x20>
 8007778:	1e43      	subs	r3, r0, #1
 800777a:	42a1      	cmp	r1, r4
 800777c:	d008      	beq.n	8007790 <memmove+0x28>
 800777e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007786:	e7f8      	b.n	800777a <memmove+0x12>
 8007788:	4402      	add	r2, r0
 800778a:	4601      	mov	r1, r0
 800778c:	428a      	cmp	r2, r1
 800778e:	d100      	bne.n	8007792 <memmove+0x2a>
 8007790:	bd10      	pop	{r4, pc}
 8007792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800779a:	e7f7      	b.n	800778c <memmove+0x24>

0800779c <_sbrk_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	4d06      	ldr	r5, [pc, #24]	@ (80077b8 <_sbrk_r+0x1c>)
 80077a0:	2300      	movs	r3, #0
 80077a2:	4604      	mov	r4, r0
 80077a4:	4608      	mov	r0, r1
 80077a6:	602b      	str	r3, [r5, #0]
 80077a8:	f7fa f982 	bl	8001ab0 <_sbrk>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d102      	bne.n	80077b6 <_sbrk_r+0x1a>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	b103      	cbz	r3, 80077b6 <_sbrk_r+0x1a>
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	20004dcc 	.word	0x20004dcc

080077bc <_realloc_r>:
 80077bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c0:	4680      	mov	r8, r0
 80077c2:	4615      	mov	r5, r2
 80077c4:	460c      	mov	r4, r1
 80077c6:	b921      	cbnz	r1, 80077d2 <_realloc_r+0x16>
 80077c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077cc:	4611      	mov	r1, r2
 80077ce:	f7ff bc59 	b.w	8007084 <_malloc_r>
 80077d2:	b92a      	cbnz	r2, 80077e0 <_realloc_r+0x24>
 80077d4:	f7ff fbea 	bl	8006fac <_free_r>
 80077d8:	2400      	movs	r4, #0
 80077da:	4620      	mov	r0, r4
 80077dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e0:	f000 f81a 	bl	8007818 <_malloc_usable_size_r>
 80077e4:	4285      	cmp	r5, r0
 80077e6:	4606      	mov	r6, r0
 80077e8:	d802      	bhi.n	80077f0 <_realloc_r+0x34>
 80077ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80077ee:	d8f4      	bhi.n	80077da <_realloc_r+0x1e>
 80077f0:	4629      	mov	r1, r5
 80077f2:	4640      	mov	r0, r8
 80077f4:	f7ff fc46 	bl	8007084 <_malloc_r>
 80077f8:	4607      	mov	r7, r0
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d0ec      	beq.n	80077d8 <_realloc_r+0x1c>
 80077fe:	42b5      	cmp	r5, r6
 8007800:	462a      	mov	r2, r5
 8007802:	4621      	mov	r1, r4
 8007804:	bf28      	it	cs
 8007806:	4632      	movcs	r2, r6
 8007808:	f7ff fbc2 	bl	8006f90 <memcpy>
 800780c:	4621      	mov	r1, r4
 800780e:	4640      	mov	r0, r8
 8007810:	f7ff fbcc 	bl	8006fac <_free_r>
 8007814:	463c      	mov	r4, r7
 8007816:	e7e0      	b.n	80077da <_realloc_r+0x1e>

08007818 <_malloc_usable_size_r>:
 8007818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800781c:	1f18      	subs	r0, r3, #4
 800781e:	2b00      	cmp	r3, #0
 8007820:	bfbc      	itt	lt
 8007822:	580b      	ldrlt	r3, [r1, r0]
 8007824:	18c0      	addlt	r0, r0, r3
 8007826:	4770      	bx	lr

08007828 <_init>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	bf00      	nop
 800782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782e:	bc08      	pop	{r3}
 8007830:	469e      	mov	lr, r3
 8007832:	4770      	bx	lr

08007834 <_fini>:
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	bf00      	nop
 8007838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783a:	bc08      	pop	{r3}
 800783c:	469e      	mov	lr, r3
 800783e:	4770      	bx	lr
