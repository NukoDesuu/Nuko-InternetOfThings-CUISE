
Midterm_MedicineBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08007a50  08007a50  00008a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b50  08007b50  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b50  08007b50  00008b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b58  08007b58  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b58  08007b58  00008b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b5c  08007b5c  00008b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007b60  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d64  2000006c  08007bcc  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004dd0  08007bcc  00009dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c91  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325f  00000000  00000000  0001fd2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00022f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb9  00000000  00000000  000243c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003118  00000000  00000000  00025379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c1f  00000000  00000000  00028491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000989c2  00000000  00000000  0003f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7a72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b60  00000000  00000000  000d7ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000dd618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a38 	.word	0x08007a38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08007a38 	.word	0x08007a38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	0000      	movs	r0, r0
	...

08000d60 <measureDistance>:
osThreadId_t measureDistanceHandle;
osThreadId_t detectLineHandle;
osThreadId_t buzzerMelodyHandle;
osThreadId_t blinkLEDHandle;

static void measureDistance() {
 8000d60:	b598      	push	{r3, r4, r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	// This function keeps running all the time
	while (1) {
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d6a:	483b      	ldr	r0, [pc, #236]	@ (8000e58 <measureDistance+0xf8>)
 8000d6c:	f001 fae0 	bl	8002330 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d70:	4b3a      	ldr	r3, [pc, #232]	@ (8000e5c <measureDistance+0xfc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2200      	movs	r2, #0
 8000d76:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000d78:	bf00      	nop
 8000d7a:	4b38      	ldr	r3, [pc, #224]	@ (8000e5c <measureDistance+0xfc>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d80:	2b09      	cmp	r3, #9
 8000d82:	d9fa      	bls.n	8000d7a <measureDistance+0x1a>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8a:	4833      	ldr	r0, [pc, #204]	@ (8000e58 <measureDistance+0xf8>)
 8000d8c:	f001 fad0 	bl	8002330 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000d90:	f001 f820 	bl	8001dd4 <HAL_GetTick>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4a32      	ldr	r2, [pc, #200]	@ (8000e60 <measureDistance+0x100>)
 8000d98:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000d9a:	bf00      	nop
 8000d9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da0:	482d      	ldr	r0, [pc, #180]	@ (8000e58 <measureDistance+0xf8>)
 8000da2:	f001 faad 	bl	8002300 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d108      	bne.n	8000dbe <measureDistance+0x5e>
 8000dac:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <measureDistance+0x100>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f103 040a 	add.w	r4, r3, #10
 8000db4:	f001 f80e 	bl	8001dd4 <HAL_GetTick>
 8000db8:	4603      	mov	r3, r0
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	d8ee      	bhi.n	8000d9c <measureDistance+0x3c>
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000dbe:	4b27      	ldr	r3, [pc, #156]	@ (8000e5c <measureDistance+0xfc>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc4:	4a27      	ldr	r2, [pc, #156]	@ (8000e64 <measureDistance+0x104>)
 8000dc6:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000dc8:	f001 f804 	bl	8001dd4 <HAL_GetTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4a24      	ldr	r2, [pc, #144]	@ (8000e60 <measureDistance+0x100>)
 8000dd0:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000dd2:	bf00      	nop
 8000dd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dd8:	481f      	ldr	r0, [pc, #124]	@ (8000e58 <measureDistance+0xf8>)
 8000dda:	f001 fa91 	bl	8002300 <HAL_GPIO_ReadPin>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d008      	beq.n	8000df6 <measureDistance+0x96>
 8000de4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <measureDistance+0x100>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000dec:	f000 fff2 	bl	8001dd4 <HAL_GetTick>
 8000df0:	4603      	mov	r3, r0
 8000df2:	429c      	cmp	r4, r3
 8000df4:	d8ee      	bhi.n	8000dd4 <measureDistance+0x74>
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <measureDistance+0xfc>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8000e68 <measureDistance+0x108>)
 8000dfe:	6013      	str	r3, [r2, #0]

	Distance = (Value2-Value1)* 0.034/2;
 8000e00:	4b19      	ldr	r3, [pc, #100]	@ (8000e68 <measureDistance+0x108>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <measureDistance+0x104>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb82 	bl	8000514 <__aeabi_ui2d>
 8000e10:	a30f      	add	r3, pc, #60	@ (adr r3, 8000e50 <measureDistance+0xf0>)
 8000e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e16:	f7ff fbf7 	bl	8000608 <__aeabi_dmul>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e2a:	f7ff fd17 	bl	800085c <__aeabi_ddiv>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fdf9 	bl	8000a2c <__aeabi_d2uiz>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <measureDistance+0x10c>)
 8000e40:	801a      	strh	r2, [r3, #0]
	osDelay(10);
 8000e42:	200a      	movs	r0, #10
 8000e44:	f003 fcb0 	bl	80047a8 <osDelay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000e48:	e78c      	b.n	8000d64 <measureDistance+0x4>
 8000e4a:	bf00      	nop
 8000e4c:	f3af 8000 	nop.w
 8000e50:	b020c49c 	.word	0xb020c49c
 8000e54:	3fa16872 	.word	0x3fa16872
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	20000088 	.word	0x20000088
 8000e60:	200001b0 	.word	0x200001b0
 8000e64:	200001b4 	.word	0x200001b4
 8000e68:	200001b8 	.word	0x200001b8
 8000e6c:	200001bc 	.word	0x200001bc

08000e70 <detectLine>:
	}
}

static void detectLine() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	// This function keeps running all the time
	while (1) {
		l1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8000e74:	2140      	movs	r1, #64	@ 0x40
 8000e76:	4817      	ldr	r0, [pc, #92]	@ (8000ed4 <detectLine+0x64>)
 8000e78:	f001 fa42 	bl	8002300 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <detectLine+0x68>)
 8000e82:	601a      	str	r2, [r3, #0]
		l2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8000e84:	2180      	movs	r1, #128	@ 0x80
 8000e86:	4813      	ldr	r0, [pc, #76]	@ (8000ed4 <detectLine+0x64>)
 8000e88:	f001 fa3a 	bl	8002300 <HAL_GPIO_ReadPin>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <detectLine+0x6c>)
 8000e92:	601a      	str	r2, [r3, #0]
		l3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8000e94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e98:	480e      	ldr	r0, [pc, #56]	@ (8000ed4 <detectLine+0x64>)
 8000e9a:	f001 fa31 	bl	8002300 <HAL_GPIO_ReadPin>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <detectLine+0x70>)
 8000ea4:	601a      	str	r2, [r3, #0]
		l4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8000ea6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eaa:	480a      	ldr	r0, [pc, #40]	@ (8000ed4 <detectLine+0x64>)
 8000eac:	f001 fa28 	bl	8002300 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <detectLine+0x74>)
 8000eb6:	601a      	str	r2, [r3, #0]
		l5 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8000eb8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ebc:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <detectLine+0x64>)
 8000ebe:	f001 fa1f 	bl	8002300 <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <detectLine+0x78>)
 8000ec8:	601a      	str	r2, [r3, #0]
		osDelay(5);
 8000eca:	2005      	movs	r0, #5
 8000ecc:	f003 fc6c 	bl	80047a8 <osDelay>
		l1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8000ed0:	bf00      	nop
 8000ed2:	e7cf      	b.n	8000e74 <detectLine+0x4>
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	200001c0 	.word	0x200001c0
 8000edc:	200001c4 	.word	0x200001c4
 8000ee0:	200001c8 	.word	0x200001c8
 8000ee4:	200001cc 	.word	0x200001cc
 8000ee8:	200001d0 	.word	0x200001d0

08000eec <Tone>:
	}
}

static void Tone(uint32_t Frequency, uint32_t Duration, int Volume) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
	TIM2->ARR = (1000000UL / Frequency) - 1; //Setting the PWM Frequency
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f34 <Tone+0x48>)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f04:	3b01      	subs	r3, #1
 8000f06:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM2->CCR1 = (TIM2->ARR / 2 * Volume / 100); //Setting duty cycle to 50% (volume depending on frequency)
 8000f08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0e:	085b      	lsrs	r3, r3, #1
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f1a:	4907      	ldr	r1, [pc, #28]	@ (8000f38 <Tone+0x4c>)
 8000f1c:	fba1 1303 	umull	r1, r3, r1, r3
 8000f20:	095b      	lsrs	r3, r3, #5
 8000f22:	6353      	str	r3, [r2, #52]	@ 0x34
	HAL_Delay(Duration);
 8000f24:	68b8      	ldr	r0, [r7, #8]
 8000f26:	f000 ff61 	bl	8001dec <HAL_Delay>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	000f4240 	.word	0x000f4240
 8000f38:	51eb851f 	.word	0x51eb851f

08000f3c <noTone>:

static void noTone() {
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	TIM2->CCR1 = 0; //Mute by setting duty cycle 0%
 8000f40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <buzzerMelody>:

static void buzzerMelody() {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	if (status == 1) {
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <buzzerMelody+0x58>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d121      	bne.n	8000fa4 <buzzerMelody+0x50>
		while (status == 1) {
 8000f60:	e01b      	b.n	8000f9a <buzzerMelody+0x46>
			Tone(ExampleMelody[NoteIndex++], 250, 50);
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <buzzerMelody+0x5c>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	b2d1      	uxtb	r1, r2
 8000f6a:	4a11      	ldr	r2, [pc, #68]	@ (8000fb0 <buzzerMelody+0x5c>)
 8000f6c:	7011      	strb	r1, [r2, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <buzzerMelody+0x60>)
 8000f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f76:	2232      	movs	r2, #50	@ 0x32
 8000f78:	21fa      	movs	r1, #250	@ 0xfa
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ffb6 	bl	8000eec <Tone>
			if (NoteIndex == 3) {
 8000f80:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <buzzerMelody+0x5c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d108      	bne.n	8000f9a <buzzerMelody+0x46>
			  NoteIndex = 0;
 8000f88:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <buzzerMelody+0x5c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
			  noTone();
 8000f8e:	f7ff ffd5 	bl	8000f3c <noTone>
			  osDelay(2000);
 8000f92:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f96:	f003 fc07 	bl	80047a8 <osDelay>
		while (status == 1) {
 8000f9a:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <buzzerMelody+0x58>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d0df      	beq.n	8000f62 <buzzerMelody+0xe>
		}
	}
	else {
		noTone();
	}
}
 8000fa2:	e001      	b.n	8000fa8 <buzzerMelody+0x54>
		noTone();
 8000fa4:	f7ff ffca 	bl	8000f3c <noTone>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200001ac 	.word	0x200001ac
 8000fb0:	200001d4 	.word	0x200001d4
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <blinkLED>:

static void blinkLED() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc2:	480e      	ldr	r0, [pc, #56]	@ (8000ffc <blinkLED+0x44>)
 8000fc4:	f001 f9b4 	bl	8002330 <HAL_GPIO_WritePin>
	if (status == 1) {
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <blinkLED+0x48>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d113      	bne.n	8000ff8 <blinkLED+0x40>
		while (status == 1) {
 8000fd0:	e008      	b.n	8000fe4 <blinkLED+0x2c>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000fd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd6:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <blinkLED+0x44>)
 8000fd8:	f001 f9c3 	bl	8002362 <HAL_GPIO_TogglePin>
			osDelay(1000);
 8000fdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe0:	f003 fbe2 	bl	80047a8 <osDelay>
		while (status == 1) {
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <blinkLED+0x48>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d0f2      	beq.n	8000fd2 <blinkLED+0x1a>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ff2:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <blinkLED+0x44>)
 8000ff4:	f001 f99c 	bl	8002330 <HAL_GPIO_WritePin>
	}
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40020400 	.word	0x40020400
 8001000:	200001ac 	.word	0x200001ac

08001004 <driveCar>:
static void detectLine();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void driveCar(float powerL, float powerR, int direction) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	ed87 0a03 	vstr	s0, [r7, #12]
 800100e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001012:	6078      	str	r0, [r7, #4]
	//Change the DIRECTION of the car
	switch (direction) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <driveCar+0x1e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d014      	beq.n	800104a <driveCar+0x46>
 8001020:	e027      	b.n	8001072 <driveCar+0x6e>
	case 0: //Reverse direction
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); //LEFT pair REVERSE off
 8001022:	2200      	movs	r2, #0
 8001024:	2101      	movs	r1, #1
 8001026:	4825      	ldr	r0, [pc, #148]	@ (80010bc <driveCar+0xb8>)
 8001028:	f001 f982 	bl	8002330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); //LEFT pair FORWARD on
 800102c:	2201      	movs	r2, #1
 800102e:	2102      	movs	r1, #2
 8001030:	4822      	ldr	r0, [pc, #136]	@ (80010bc <driveCar+0xb8>)
 8001032:	f001 f97d 	bl	8002330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); //RIGHT pair reverse off
 8001036:	2201      	movs	r2, #1
 8001038:	2104      	movs	r1, #4
 800103a:	4820      	ldr	r0, [pc, #128]	@ (80010bc <driveCar+0xb8>)
 800103c:	f001 f978 	bl	8002330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); //RIGHT pair forward on
 8001040:	2200      	movs	r2, #0
 8001042:	2108      	movs	r1, #8
 8001044:	481d      	ldr	r0, [pc, #116]	@ (80010bc <driveCar+0xb8>)
 8001046:	f001 f973 	bl	8002330 <HAL_GPIO_WritePin>
	case 1: //Forward direction
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); //LEFT pair REVERSE off
 800104a:	2201      	movs	r2, #1
 800104c:	2101      	movs	r1, #1
 800104e:	481b      	ldr	r0, [pc, #108]	@ (80010bc <driveCar+0xb8>)
 8001050:	f001 f96e 	bl	8002330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); //LEFT pair FORWARD on
 8001054:	2200      	movs	r2, #0
 8001056:	2102      	movs	r1, #2
 8001058:	4818      	ldr	r0, [pc, #96]	@ (80010bc <driveCar+0xb8>)
 800105a:	f001 f969 	bl	8002330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); //RIGHT pair reverse off
 800105e:	2200      	movs	r2, #0
 8001060:	2104      	movs	r1, #4
 8001062:	4816      	ldr	r0, [pc, #88]	@ (80010bc <driveCar+0xb8>)
 8001064:	f001 f964 	bl	8002330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); //RIGHT pair forward on
 8001068:	2201      	movs	r2, #1
 800106a:	2108      	movs	r1, #8
 800106c:	4813      	ldr	r0, [pc, #76]	@ (80010bc <driveCar+0xb8>)
 800106e:	f001 f95f 	bl	8002330 <HAL_GPIO_WritePin>
	}
	//Change the POWER OUTPUT of the car
	TIM3->CCR1 = 4095 * (powerL/100); //Duty time output per 100% power for LEFT pair
 8001072:	ed97 7a03 	vldr	s14, [r7, #12]
 8001076:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80010c0 <driveCar+0xbc>
 800107a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800107e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80010c4 <driveCar+0xc0>
 8001082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <driveCar+0xc4>)
 8001088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800108c:	ee17 2a90 	vmov	r2, s15
 8001090:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 4095 * (powerR/100); //Duty time output per 100% power for RIGHT pair
 8001092:	ed97 7a02 	vldr	s14, [r7, #8]
 8001096:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80010c0 <driveCar+0xbc>
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80010c4 <driveCar+0xc0>
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <driveCar+0xc4>)
 80010a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ac:	ee17 2a90 	vmov	r2, s15
 80010b0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020800 	.word	0x40020800
 80010c0:	42c80000 	.word	0x42c80000
 80010c4:	457ff000 	.word	0x457ff000
 80010c8:	40000400 	.word	0x40000400

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0a4      	sub	sp, #144	@ 0x90
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d2:	f000 fe49 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d6:	f000 f8b9 	bl	800124c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010da:	f000 fa91 	bl	8001600 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010de:	f000 fa65 	bl	80015ac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010e2:	f000 f91b 	bl	800131c <MX_TIM1_Init>
  MX_TIM3_Init();
 80010e6:	f000 f9df 	bl	80014a8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80010ea:	f000 f967 	bl	80013bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Initialization for BUZZER
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //For BUZZER
 80010ee:	2100      	movs	r1, #0
 80010f0:	4842      	ldr	r0, [pc, #264]	@ (80011fc <main+0x130>)
 80010f2:	f001 ff81 	bl	8002ff8 <HAL_TIM_PWM_Start>
  // Initialization for WHEEL MOTORS
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //For LEFT PWM
 80010f6:	2100      	movs	r1, #0
 80010f8:	4841      	ldr	r0, [pc, #260]	@ (8001200 <main+0x134>)
 80010fa:	f001 ff7d 	bl	8002ff8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //For RIGHT PWM
 80010fe:	2104      	movs	r1, #4
 8001100:	483f      	ldr	r0, [pc, #252]	@ (8001200 <main+0x134>)
 8001102:	f001 ff79 	bl	8002ff8 <HAL_TIM_PWM_Start>
  driveCar(80, 80, 1);
 8001106:	2001      	movs	r0, #1
 8001108:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8001204 <main+0x138>
 800110c:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8001204 <main+0x138>
 8001110:	f7ff ff78 	bl	8001004 <driveCar>
  // Initialization for ULTRASONIC SENSOR
  HAL_TIM_Base_Start(&htim1);
 8001114:	483c      	ldr	r0, [pc, #240]	@ (8001208 <main+0x13c>)
 8001116:	f001 fe59 	bl	8002dcc <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); //pulls TRIG pin to LOW
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001120:	483a      	ldr	r0, [pc, #232]	@ (800120c <main+0x140>)
 8001122:	f001 f905 	bl	8002330 <HAL_GPIO_WritePin>
  // Variables
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001126:	f003 fa63 	bl	80045f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800112a:	4a39      	ldr	r2, [pc, #228]	@ (8001210 <main+0x144>)
 800112c:	2100      	movs	r1, #0
 800112e:	4839      	ldr	r0, [pc, #228]	@ (8001214 <main+0x148>)
 8001130:	f003 faa8 	bl	8004684 <osThreadNew>
 8001134:	4603      	mov	r3, r0
 8001136:	4a38      	ldr	r2, [pc, #224]	@ (8001218 <main+0x14c>)
 8001138:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  const osThreadAttr_t measureDistance_attributes = {
 800113a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800113e:	2224      	movs	r2, #36	@ 0x24
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f005 fff8 	bl	8007138 <memset>
 8001148:	4b34      	ldr	r3, [pc, #208]	@ (800121c <main+0x150>)
 800114a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001152:	2318      	movs	r3, #24
 8001154:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		  .name = "measureDistance",
		  .priority = (osPriority_t) osPriorityNormal,
		  .stack_size = 128
  };

  const osThreadAttr_t detectLine_attributes = {
 8001158:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800115c:	2224      	movs	r2, #36	@ 0x24
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f005 ffe9 	bl	8007138 <memset>
 8001166:	4b2e      	ldr	r3, [pc, #184]	@ (8001220 <main+0x154>)
 8001168:	64bb      	str	r3, [r7, #72]	@ 0x48
 800116a:	2380      	movs	r3, #128	@ 0x80
 800116c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800116e:	2318      	movs	r3, #24
 8001170:	663b      	str	r3, [r7, #96]	@ 0x60
		  .name = "detectLine",
		  .priority = (osPriority_t) osPriorityNormal,
		  .stack_size = 128
  };

  const osThreadAttr_t buzzerMelody_attributes = {
 8001172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001176:	2224      	movs	r2, #36	@ 0x24
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f005 ffdc 	bl	8007138 <memset>
 8001180:	4b28      	ldr	r3, [pc, #160]	@ (8001224 <main+0x158>)
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001188:	2318      	movs	r3, #24
 800118a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		  .name = "buzzerMelody",
		  .priority = (osPriority_t) osPriorityNormal,
		  .stack_size = 128
  };

  const osThreadAttr_t blinkLED_attributes = {
 800118c:	463b      	mov	r3, r7
 800118e:	2224      	movs	r2, #36	@ 0x24
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f005 ffd0 	bl	8007138 <memset>
 8001198:	4b23      	ldr	r3, [pc, #140]	@ (8001228 <main+0x15c>)
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	2380      	movs	r3, #128	@ 0x80
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	2318      	movs	r3, #24
 80011a2:	61bb      	str	r3, [r7, #24]
		  .name = "blinkLED",
		  .priority = (osPriority_t) osPriorityNormal,
		  .stack_size = 128
  };

  measureDistanceHandle = osThreadNew(measureDistance, NULL, &measureDistance_attributes);
 80011a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011a8:	461a      	mov	r2, r3
 80011aa:	2100      	movs	r1, #0
 80011ac:	481f      	ldr	r0, [pc, #124]	@ (800122c <main+0x160>)
 80011ae:	f003 fa69 	bl	8004684 <osThreadNew>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001230 <main+0x164>)
 80011b6:	6013      	str	r3, [r2, #0]
  detectLineHandle = osThreadNew(detectLine, NULL, &detectLine_attributes);
 80011b8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011bc:	461a      	mov	r2, r3
 80011be:	2100      	movs	r1, #0
 80011c0:	481c      	ldr	r0, [pc, #112]	@ (8001234 <main+0x168>)
 80011c2:	f003 fa5f 	bl	8004684 <osThreadNew>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001238 <main+0x16c>)
 80011ca:	6013      	str	r3, [r2, #0]
  buzzerMelodyHandle = osThreadNew(buzzerMelody, NULL, &buzzerMelody_attributes);
 80011cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d0:	461a      	mov	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	4819      	ldr	r0, [pc, #100]	@ (800123c <main+0x170>)
 80011d6:	f003 fa55 	bl	8004684 <osThreadNew>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a18      	ldr	r2, [pc, #96]	@ (8001240 <main+0x174>)
 80011de:	6013      	str	r3, [r2, #0]
  blinkLEDHandle = osThreadNew(blinkLED, NULL, &blinkLED_attributes);
 80011e0:	463b      	mov	r3, r7
 80011e2:	461a      	mov	r2, r3
 80011e4:	2100      	movs	r1, #0
 80011e6:	4817      	ldr	r0, [pc, #92]	@ (8001244 <main+0x178>)
 80011e8:	f003 fa4c 	bl	8004684 <osThreadNew>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4a16      	ldr	r2, [pc, #88]	@ (8001248 <main+0x17c>)
 80011f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011f2:	f003 fa21 	bl	8004638 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f6:	bf00      	nop
 80011f8:	e7fd      	b.n	80011f6 <main+0x12a>
 80011fa:	bf00      	nop
 80011fc:	200000d0 	.word	0x200000d0
 8001200:	20000118 	.word	0x20000118
 8001204:	42a00000 	.word	0x42a00000
 8001208:	20000088 	.word	0x20000088
 800120c:	40020000 	.word	0x40020000
 8001210:	08007ae0 	.word	0x08007ae0
 8001214:	08001785 	.word	0x08001785
 8001218:	200001a8 	.word	0x200001a8
 800121c:	08007a5c 	.word	0x08007a5c
 8001220:	08007a6c 	.word	0x08007a6c
 8001224:	08007a78 	.word	0x08007a78
 8001228:	08007a88 	.word	0x08007a88
 800122c:	08000d61 	.word	0x08000d61
 8001230:	200001d8 	.word	0x200001d8
 8001234:	08000e71 	.word	0x08000e71
 8001238:	200001dc 	.word	0x200001dc
 800123c:	08000f55 	.word	0x08000f55
 8001240:	200001e0 	.word	0x200001e0
 8001244:	08000fb9 	.word	0x08000fb9
 8001248:	200001e4 	.word	0x200001e4

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b094      	sub	sp, #80	@ 0x50
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	2230      	movs	r2, #48	@ 0x30
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f005 ff6c 	bl	8007138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	4b27      	ldr	r3, [pc, #156]	@ (8001314 <SystemClock_Config+0xc8>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001278:	4a26      	ldr	r2, [pc, #152]	@ (8001314 <SystemClock_Config+0xc8>)
 800127a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800127e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001280:	4b24      	ldr	r3, [pc, #144]	@ (8001314 <SystemClock_Config+0xc8>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <SystemClock_Config+0xcc>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a20      	ldr	r2, [pc, #128]	@ (8001318 <SystemClock_Config+0xcc>)
 8001296:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <SystemClock_Config+0xcc>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a8:	2301      	movs	r3, #1
 80012aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b2:	2302      	movs	r3, #2
 80012b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012bc:	2304      	movs	r3, #4
 80012be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012c0:	2348      	movs	r3, #72	@ 0x48
 80012c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012c8:	2304      	movs	r3, #4
 80012ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 f861 	bl	8002398 <HAL_RCC_OscConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012dc:	f000 fb0c 	bl	80018f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e0:	230f      	movs	r3, #15
 80012e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e4:	2302      	movs	r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	2102      	movs	r1, #2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 fac3 	bl	8002888 <HAL_RCC_ClockConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001308:	f000 faf6 	bl	80018f8 <Error_Handler>
  }
}
 800130c:	bf00      	nop
 800130e:	3750      	adds	r7, #80	@ 0x50
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40007000 	.word	0x40007000

0800131c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001338:	4b1e      	ldr	r3, [pc, #120]	@ (80013b4 <MX_TIM1_Init+0x98>)
 800133a:	4a1f      	ldr	r2, [pc, #124]	@ (80013b8 <MX_TIM1_Init+0x9c>)
 800133c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800133e:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <MX_TIM1_Init+0x98>)
 8001340:	2247      	movs	r2, #71	@ 0x47
 8001342:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <MX_TIM1_Init+0x98>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800134a:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <MX_TIM1_Init+0x98>)
 800134c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001350:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001352:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <MX_TIM1_Init+0x98>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001358:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <MX_TIM1_Init+0x98>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <MX_TIM1_Init+0x98>)
 8001360:	2280      	movs	r2, #128	@ 0x80
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001364:	4813      	ldr	r0, [pc, #76]	@ (80013b4 <MX_TIM1_Init+0x98>)
 8001366:	f001 fce1 	bl	8002d2c <HAL_TIM_Base_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001370:	f000 fac2 	bl	80018f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001378:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <MX_TIM1_Init+0x98>)
 8001382:	f002 f89b 	bl	80034bc <HAL_TIM_ConfigClockSource>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800138c:	f000 fab4 	bl	80018f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_TIM1_Init+0x98>)
 800139e:	f002 fc55 	bl	8003c4c <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013a8:	f000 faa6 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000088 	.word	0x20000088
 80013b8:	40010000 	.word	0x40010000

080013bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08e      	sub	sp, #56	@ 0x38
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ec:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <MX_TIM2_Init+0xe8>)
 80013ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80013f4:	4b2b      	ldr	r3, [pc, #172]	@ (80014a4 <MX_TIM2_Init+0xe8>)
 80013f6:	2247      	movs	r2, #71	@ 0x47
 80013f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b2a      	ldr	r3, [pc, #168]	@ (80014a4 <MX_TIM2_Init+0xe8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001400:	4b28      	ldr	r3, [pc, #160]	@ (80014a4 <MX_TIM2_Init+0xe8>)
 8001402:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001406:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <MX_TIM2_Init+0xe8>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800140e:	4b25      	ldr	r3, [pc, #148]	@ (80014a4 <MX_TIM2_Init+0xe8>)
 8001410:	2280      	movs	r2, #128	@ 0x80
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001414:	4823      	ldr	r0, [pc, #140]	@ (80014a4 <MX_TIM2_Init+0xe8>)
 8001416:	f001 fc89 	bl	8002d2c <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001420:	f000 fa6a 	bl	80018f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800142a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800142e:	4619      	mov	r1, r3
 8001430:	481c      	ldr	r0, [pc, #112]	@ (80014a4 <MX_TIM2_Init+0xe8>)
 8001432:	f002 f843 	bl	80034bc <HAL_TIM_ConfigClockSource>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800143c:	f000 fa5c 	bl	80018f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001440:	4818      	ldr	r0, [pc, #96]	@ (80014a4 <MX_TIM2_Init+0xe8>)
 8001442:	f001 fd7f 	bl	8002f44 <HAL_TIM_PWM_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800144c:	f000 fa54 	bl	80018f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	4619      	mov	r1, r3
 800145e:	4811      	ldr	r0, [pc, #68]	@ (80014a4 <MX_TIM2_Init+0xe8>)
 8001460:	f002 fbf4 	bl	8003c4c <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800146a:	f000 fa45 	bl	80018f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146e:	2360      	movs	r3, #96	@ 0x60
 8001470:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4807      	ldr	r0, [pc, #28]	@ (80014a4 <MX_TIM2_Init+0xe8>)
 8001486:	f001 ff57 	bl	8003338 <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001490:	f000 fa32 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001494:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <MX_TIM2_Init+0xe8>)
 8001496:	f000 faad 	bl	80019f4 <HAL_TIM_MspPostInit>

}
 800149a:	bf00      	nop
 800149c:	3738      	adds	r7, #56	@ 0x38
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200000d0 	.word	0x200000d0

080014a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	@ 0x38
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	f107 0320 	add.w	r3, r7, #32
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014d8:	4b32      	ldr	r3, [pc, #200]	@ (80015a4 <MX_TIM3_Init+0xfc>)
 80014da:	4a33      	ldr	r2, [pc, #204]	@ (80015a8 <MX_TIM3_Init+0x100>)
 80014dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80014de:	4b31      	ldr	r3, [pc, #196]	@ (80015a4 <MX_TIM3_Init+0xfc>)
 80014e0:	2247      	movs	r2, #71	@ 0x47
 80014e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <MX_TIM3_Init+0xfc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 80014ea:	4b2e      	ldr	r3, [pc, #184]	@ (80015a4 <MX_TIM3_Init+0xfc>)
 80014ec:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80014f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b2c      	ldr	r3, [pc, #176]	@ (80015a4 <MX_TIM3_Init+0xfc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f8:	4b2a      	ldr	r3, [pc, #168]	@ (80015a4 <MX_TIM3_Init+0xfc>)
 80014fa:	2280      	movs	r2, #128	@ 0x80
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014fe:	4829      	ldr	r0, [pc, #164]	@ (80015a4 <MX_TIM3_Init+0xfc>)
 8001500:	f001 fc14 	bl	8002d2c <HAL_TIM_Base_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800150a:	f000 f9f5 	bl	80018f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001514:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001518:	4619      	mov	r1, r3
 800151a:	4822      	ldr	r0, [pc, #136]	@ (80015a4 <MX_TIM3_Init+0xfc>)
 800151c:	f001 ffce 	bl	80034bc <HAL_TIM_ConfigClockSource>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001526:	f000 f9e7 	bl	80018f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800152a:	481e      	ldr	r0, [pc, #120]	@ (80015a4 <MX_TIM3_Init+0xfc>)
 800152c:	f001 fd0a 	bl	8002f44 <HAL_TIM_PWM_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001536:	f000 f9df 	bl	80018f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	4619      	mov	r1, r3
 8001548:	4816      	ldr	r0, [pc, #88]	@ (80015a4 <MX_TIM3_Init+0xfc>)
 800154a:	f002 fb7f 	bl	8003c4c <HAL_TIMEx_MasterConfigSynchronization>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001554:	f000 f9d0 	bl	80018f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001558:	2360      	movs	r3, #96	@ 0x60
 800155a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	480d      	ldr	r0, [pc, #52]	@ (80015a4 <MX_TIM3_Init+0xfc>)
 8001570:	f001 fee2 	bl	8003338 <HAL_TIM_PWM_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800157a:	f000 f9bd 	bl	80018f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2204      	movs	r2, #4
 8001582:	4619      	mov	r1, r3
 8001584:	4807      	ldr	r0, [pc, #28]	@ (80015a4 <MX_TIM3_Init+0xfc>)
 8001586:	f001 fed7 	bl	8003338 <HAL_TIM_PWM_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001590:	f000 f9b2 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001594:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <MX_TIM3_Init+0xfc>)
 8001596:	f000 fa2d 	bl	80019f4 <HAL_TIM_MspPostInit>

}
 800159a:	bf00      	nop
 800159c:	3738      	adds	r7, #56	@ 0x38
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000118 	.word	0x20000118
 80015a8:	40000400 	.word	0x40000400

080015ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	@ (80015fc <MX_USART2_UART_Init+0x50>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015b6:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <MX_USART2_UART_Init+0x4c>)
 80015e4:	f002 fbb4 	bl	8003d50 <HAL_UART_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ee:	f000 f983 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000160 	.word	0x20000160
 80015fc:	40004400 	.word	0x40004400

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b56      	ldr	r3, [pc, #344]	@ (8001774 <MX_GPIO_Init+0x174>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a55      	ldr	r2, [pc, #340]	@ (8001774 <MX_GPIO_Init+0x174>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <MX_GPIO_Init+0x174>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b4f      	ldr	r3, [pc, #316]	@ (8001774 <MX_GPIO_Init+0x174>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a4e      	ldr	r2, [pc, #312]	@ (8001774 <MX_GPIO_Init+0x174>)
 800163c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b4c      	ldr	r3, [pc, #304]	@ (8001774 <MX_GPIO_Init+0x174>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b48      	ldr	r3, [pc, #288]	@ (8001774 <MX_GPIO_Init+0x174>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a47      	ldr	r2, [pc, #284]	@ (8001774 <MX_GPIO_Init+0x174>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b45      	ldr	r3, [pc, #276]	@ (8001774 <MX_GPIO_Init+0x174>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b41      	ldr	r3, [pc, #260]	@ (8001774 <MX_GPIO_Init+0x174>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a40      	ldr	r2, [pc, #256]	@ (8001774 <MX_GPIO_Init+0x174>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b3e      	ldr	r3, [pc, #248]	@ (8001774 <MX_GPIO_Init+0x174>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LefttPair_DirectionR_Pin|LeftPair_DirectionF_Pin|RightPair_DirectionR_Pin|RightPair_DirectionF_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	210f      	movs	r1, #15
 800168a:	483b      	ldr	r0, [pc, #236]	@ (8001778 <MX_GPIO_Init+0x178>)
 800168c:	f000 fe50 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Ultrasonic_Trig_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8001696:	4839      	ldr	r0, [pc, #228]	@ (800177c <MX_GPIO_Init+0x17c>)
 8001698:	f000 fe4a 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Module_GPIO_Port, LED_Module_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016a2:	4837      	ldr	r0, [pc, #220]	@ (8001780 <MX_GPIO_Init+0x180>)
 80016a4:	f000 fe44 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	482e      	ldr	r0, [pc, #184]	@ (8001778 <MX_GPIO_Init+0x178>)
 80016c0:	f000 fc9a 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LefttPair_DirectionR_Pin LeftPair_DirectionF_Pin RightPair_DirectionR_Pin RightPair_DirectionF_Pin */
  GPIO_InitStruct.Pin = LefttPair_DirectionR_Pin|LeftPair_DirectionF_Pin|RightPair_DirectionR_Pin|RightPair_DirectionF_Pin;
 80016c4:	230f      	movs	r3, #15
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	4827      	ldr	r0, [pc, #156]	@ (8001778 <MX_GPIO_Init+0x178>)
 80016dc:	f000 fc8c 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Ultrasonic_Trig_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Ultrasonic_Trig_Pin;
 80016e0:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4820      	ldr	r0, [pc, #128]	@ (800177c <MX_GPIO_Init+0x17c>)
 80016fa:	f000 fc7d 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Module_Pin */
  GPIO_InitStruct.Pin = LED_Module_Pin;
 80016fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Module_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	481a      	ldr	r0, [pc, #104]	@ (8001780 <MX_GPIO_Init+0x180>)
 8001718:	f000 fc6e 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_Button_Pin */
  GPIO_InitStruct.Pin = Green_Button_Pin;
 800171c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Green_Button_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4813      	ldr	r0, [pc, #76]	@ (8001780 <MX_GPIO_Init+0x180>)
 8001732:	f000 fc61 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LineTracking_OUT1_Pin LineTracking_OUT2_Pin LineTracking_OUT3_Pin LineTracking_OUT4_Pin
                           LineTracking_OUT5_Pin */
  GPIO_InitStruct.Pin = LineTracking_OUT1_Pin|LineTracking_OUT2_Pin|LineTracking_OUT3_Pin|LineTracking_OUT4_Pin
 8001736:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800173a:	617b      	str	r3, [r7, #20]
                          |LineTracking_OUT5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	480b      	ldr	r0, [pc, #44]	@ (8001778 <MX_GPIO_Init+0x178>)
 800174c:	f000 fc54 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ultrasonic_Echo_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_Echo_Pin;
 8001750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Ultrasonic_Echo_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	@ (800177c <MX_GPIO_Init+0x17c>)
 8001766:	f000 fc47 	bl	8001ff8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	@ 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40020800 	.word	0x40020800
 800177c:	40020000 	.word	0x40020000
 8001780:	40020400 	.word	0x40020400

08001784 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001784:	b5b0      	push	{r4, r5, r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af04      	add	r7, sp, #16
 800178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	driveCar(100, 100, 1);
 800178c:	2001      	movs	r0, #1
 800178e:	eddf 0a45 	vldr	s1, [pc, #276]	@ 80018a4 <StartDefaultTask+0x120>
 8001792:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 80018a4 <StartDefaultTask+0x120>
 8001796:	f7ff fc35 	bl	8001004 <driveCar>
  /* Infinite loop */
  for(;;)
  {
	  driveCar(100, 100, 1);
 800179a:	2001      	movs	r0, #1
 800179c:	eddf 0a41 	vldr	s1, [pc, #260]	@ 80018a4 <StartDefaultTask+0x120>
 80017a0:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 80018a4 <StartDefaultTask+0x120>
 80017a4:	f7ff fc2e 	bl	8001004 <driveCar>
	  sprintf(msg, "Distance: %d cm, Line detection: %d %d %d %d %d\r\n", Distance, l1, l2, l3, l4, l5);
 80017a8:	4b3f      	ldr	r3, [pc, #252]	@ (80018a8 <StartDefaultTask+0x124>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	461d      	mov	r5, r3
 80017ae:	4b3f      	ldr	r3, [pc, #252]	@ (80018ac <StartDefaultTask+0x128>)
 80017b0:	681c      	ldr	r4, [r3, #0]
 80017b2:	4b3f      	ldr	r3, [pc, #252]	@ (80018b0 <StartDefaultTask+0x12c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a3f      	ldr	r2, [pc, #252]	@ (80018b4 <StartDefaultTask+0x130>)
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	493f      	ldr	r1, [pc, #252]	@ (80018b8 <StartDefaultTask+0x134>)
 80017bc:	6809      	ldr	r1, [r1, #0]
 80017be:	483f      	ldr	r0, [pc, #252]	@ (80018bc <StartDefaultTask+0x138>)
 80017c0:	6800      	ldr	r0, [r0, #0]
 80017c2:	9003      	str	r0, [sp, #12]
 80017c4:	9102      	str	r1, [sp, #8]
 80017c6:	9201      	str	r2, [sp, #4]
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	4623      	mov	r3, r4
 80017cc:	462a      	mov	r2, r5
 80017ce:	493c      	ldr	r1, [pc, #240]	@ (80018c0 <StartDefaultTask+0x13c>)
 80017d0:	483c      	ldr	r0, [pc, #240]	@ (80018c4 <StartDefaultTask+0x140>)
 80017d2:	f005 fc91 	bl	80070f8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 80017d6:	483b      	ldr	r0, [pc, #236]	@ (80018c4 <StartDefaultTask+0x140>)
 80017d8:	f7fe fd02 	bl	80001e0 <strlen>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e4:	4937      	ldr	r1, [pc, #220]	@ (80018c4 <StartDefaultTask+0x140>)
 80017e6:	4838      	ldr	r0, [pc, #224]	@ (80018c8 <StartDefaultTask+0x144>)
 80017e8:	f002 fb02 	bl	8003df0 <HAL_UART_Transmit>
	  if (l2 == 0) {
 80017ec:	4b30      	ldr	r3, [pc, #192]	@ (80018b0 <StartDefaultTask+0x12c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d106      	bne.n	8001802 <StartDefaultTask+0x7e>
		  driveCar(100, 0, 1);
 80017f4:	2001      	movs	r0, #1
 80017f6:	eddf 0a35 	vldr	s1, [pc, #212]	@ 80018cc <StartDefaultTask+0x148>
 80017fa:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80018a4 <StartDefaultTask+0x120>
 80017fe:	f7ff fc01 	bl	8001004 <driveCar>
	  }
	  if (l4 == 0) {
 8001802:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <StartDefaultTask+0x134>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <StartDefaultTask+0x94>
		  driveCar(0, 100, 1);
 800180a:	2001      	movs	r0, #1
 800180c:	eddf 0a25 	vldr	s1, [pc, #148]	@ 80018a4 <StartDefaultTask+0x120>
 8001810:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80018cc <StartDefaultTask+0x148>
 8001814:	f7ff fbf6 	bl	8001004 <driveCar>
	  }
	  if ((l1 == 0 && l2 == 0 && l3 == 0 && l4 == 0 && l5 == 0) || Distance < 20) {
 8001818:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <StartDefaultTask+0x128>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10f      	bne.n	8001840 <StartDefaultTask+0xbc>
 8001820:	4b23      	ldr	r3, [pc, #140]	@ (80018b0 <StartDefaultTask+0x12c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10b      	bne.n	8001840 <StartDefaultTask+0xbc>
 8001828:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <StartDefaultTask+0x130>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d107      	bne.n	8001840 <StartDefaultTask+0xbc>
 8001830:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <StartDefaultTask+0x134>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d103      	bne.n	8001840 <StartDefaultTask+0xbc>
 8001838:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <StartDefaultTask+0x138>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <StartDefaultTask+0xc4>
 8001840:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <StartDefaultTask+0x124>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	2b13      	cmp	r3, #19
 8001846:	d829      	bhi.n	800189c <StartDefaultTask+0x118>
		  status = 1;
 8001848:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <StartDefaultTask+0x14c>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]
		  while ((l1 == 0 && l2 == 0 && l3 == 0 && l4 == 0 && l5 == 0 ) || Distance < 20) {
 800184e:	e006      	b.n	800185e <StartDefaultTask+0xda>
			  driveCar(0, 0, 1);
 8001850:	2001      	movs	r0, #1
 8001852:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 80018cc <StartDefaultTask+0x148>
 8001856:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80018cc <StartDefaultTask+0x148>
 800185a:	f7ff fbd3 	bl	8001004 <driveCar>
		  while ((l1 == 0 && l2 == 0 && l3 == 0 && l4 == 0 && l5 == 0 ) || Distance < 20) {
 800185e:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <StartDefaultTask+0x128>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <StartDefaultTask+0x102>
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <StartDefaultTask+0x12c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10b      	bne.n	8001886 <StartDefaultTask+0x102>
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <StartDefaultTask+0x130>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d107      	bne.n	8001886 <StartDefaultTask+0x102>
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <StartDefaultTask+0x134>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d103      	bne.n	8001886 <StartDefaultTask+0x102>
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <StartDefaultTask+0x138>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0e4      	beq.n	8001850 <StartDefaultTask+0xcc>
 8001886:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <StartDefaultTask+0x124>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	2b13      	cmp	r3, #19
 800188c:	d9e0      	bls.n	8001850 <StartDefaultTask+0xcc>
		  }
		  status = 0;
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <StartDefaultTask+0x14c>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
		  osDelay(1000);
 8001894:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001898:	f002 ff86 	bl	80047a8 <osDelay>
	  }
	  osDelay(50);
 800189c:	2032      	movs	r0, #50	@ 0x32
 800189e:	f002 ff83 	bl	80047a8 <osDelay>
  {
 80018a2:	e77a      	b.n	800179a <StartDefaultTask+0x16>
 80018a4:	42c80000 	.word	0x42c80000
 80018a8:	200001bc 	.word	0x200001bc
 80018ac:	200001c0 	.word	0x200001c0
 80018b0:	200001c4 	.word	0x200001c4
 80018b4:	200001c8 	.word	0x200001c8
 80018b8:	200001cc 	.word	0x200001cc
 80018bc:	200001d0 	.word	0x200001d0
 80018c0:	08007a94 	.word	0x08007a94
 80018c4:	200001e8 	.word	0x200001e8
 80018c8:	20000160 	.word	0x20000160
 80018cc:	00000000 	.word	0x00000000
 80018d0:	200001ac 	.word	0x200001ac

080018d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d101      	bne.n	80018ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018e6:	f000 fa61 	bl	8001dac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40000800 	.word	0x40000800

080018f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fc:	b672      	cpsid	i
}
 80018fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <Error_Handler+0x8>

08001904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_MspInit+0x54>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	4a11      	ldr	r2, [pc, #68]	@ (8001958 <HAL_MspInit+0x54>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001918:	6453      	str	r3, [r2, #68]	@ 0x44
 800191a:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <HAL_MspInit+0x54>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <HAL_MspInit+0x54>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <HAL_MspInit+0x54>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <HAL_MspInit+0x54>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	210f      	movs	r1, #15
 8001946:	f06f 0001 	mvn.w	r0, #1
 800194a:	f000 fb2b 	bl	8001fa4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800

0800195c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1f      	ldr	r2, [pc, #124]	@ (80019e8 <HAL_TIM_Base_MspInit+0x8c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10e      	bne.n	800198c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <HAL_TIM_Base_MspInit+0x90>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	4a1d      	ldr	r2, [pc, #116]	@ (80019ec <HAL_TIM_Base_MspInit+0x90>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6453      	str	r3, [r2, #68]	@ 0x44
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_TIM_Base_MspInit+0x90>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800198a:	e026      	b.n	80019da <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001994:	d10e      	bne.n	80019b4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <HAL_TIM_Base_MspInit+0x90>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	4a13      	ldr	r2, [pc, #76]	@ (80019ec <HAL_TIM_Base_MspInit+0x90>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <HAL_TIM_Base_MspInit+0x90>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
}
 80019b2:	e012      	b.n	80019da <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <HAL_TIM_Base_MspInit+0x94>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10d      	bne.n	80019da <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_TIM_Base_MspInit+0x90>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	4a09      	ldr	r2, [pc, #36]	@ (80019ec <HAL_TIM_Base_MspInit+0x90>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ce:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <HAL_TIM_Base_MspInit+0x90>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
}
 80019da:	bf00      	nop
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40010000 	.word	0x40010000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40000400 	.word	0x40000400

080019f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a14:	d11e      	bne.n	8001a54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <HAL_TIM_MspPostInit+0xb0>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a21      	ldr	r2, [pc, #132]	@ (8001aa4 <HAL_TIM_MspPostInit+0xb0>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a26:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <HAL_TIM_MspPostInit+0xb0>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_PWM_Pin;
 8001a32:	2301      	movs	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a42:	2301      	movs	r3, #1
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Buzzer_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4816      	ldr	r0, [pc, #88]	@ (8001aa8 <HAL_TIM_MspPostInit+0xb4>)
 8001a4e:	f000 fad3 	bl	8001ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a52:	e022      	b.n	8001a9a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a14      	ldr	r2, [pc, #80]	@ (8001aac <HAL_TIM_MspPostInit+0xb8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d11d      	bne.n	8001a9a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <HAL_TIM_MspPostInit+0xb0>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa4 <HAL_TIM_MspPostInit+0xb0>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <HAL_TIM_MspPostInit+0xb0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftPair_PWM_Pin|RightPair_PWM_Pin;
 8001a7a:	23c0      	movs	r3, #192	@ 0xc0
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4804      	ldr	r0, [pc, #16]	@ (8001aa8 <HAL_TIM_MspPostInit+0xb4>)
 8001a96:	f000 faaf 	bl	8001ff8 <HAL_GPIO_Init>
}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	@ 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40000400 	.word	0x40000400

08001ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	@ (8001b34 <HAL_UART_MspInit+0x84>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d12b      	bne.n	8001b2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_UART_MspInit+0x88>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	4a17      	ldr	r2, [pc, #92]	@ (8001b38 <HAL_UART_MspInit+0x88>)
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_UART_MspInit+0x88>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_UART_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a10      	ldr	r2, [pc, #64]	@ (8001b38 <HAL_UART_MspInit+0x88>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_UART_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b0a:	230c      	movs	r3, #12
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <HAL_UART_MspInit+0x8c>)
 8001b26:	f000 fa67 	bl	8001ff8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	@ 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40004400 	.word	0x40004400
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020000 	.word	0x40020000

08001b40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08e      	sub	sp, #56	@ 0x38
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4b33      	ldr	r3, [pc, #204]	@ (8001c24 <HAL_InitTick+0xe4>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	4a32      	ldr	r2, [pc, #200]	@ (8001c24 <HAL_InitTick+0xe4>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b60:	4b30      	ldr	r3, [pc, #192]	@ (8001c24 <HAL_InitTick+0xe4>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b6c:	f107 0210 	add.w	r2, r7, #16
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 f8a6 	bl	8002cc8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d103      	bne.n	8001b8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b86:	f001 f877 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 8001b8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b8c:	e004      	b.n	8001b98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b8e:	f001 f873 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 8001b92:	4603      	mov	r3, r0
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b9a:	4a23      	ldr	r2, [pc, #140]	@ (8001c28 <HAL_InitTick+0xe8>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	0c9b      	lsrs	r3, r3, #18
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <HAL_InitTick+0xec>)
 8001ba8:	4a21      	ldr	r2, [pc, #132]	@ (8001c30 <HAL_InitTick+0xf0>)
 8001baa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <HAL_InitTick+0xec>)
 8001bae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bb2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <HAL_InitTick+0xec>)
 8001bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <HAL_InitTick+0xec>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <HAL_InitTick+0xec>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc6:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <HAL_InitTick+0xec>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001bcc:	4817      	ldr	r0, [pc, #92]	@ (8001c2c <HAL_InitTick+0xec>)
 8001bce:	f001 f8ad 	bl	8002d2c <HAL_TIM_Base_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d11b      	bne.n	8001c18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001be0:	4812      	ldr	r0, [pc, #72]	@ (8001c2c <HAL_InitTick+0xec>)
 8001be2:	f001 f94d 	bl	8002e80 <HAL_TIM_Base_Start_IT>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001bec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d111      	bne.n	8001c18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bf4:	201e      	movs	r0, #30
 8001bf6:	f000 f9f1 	bl	8001fdc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d808      	bhi.n	8001c12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	201e      	movs	r0, #30
 8001c06:	f000 f9cd 	bl	8001fa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <HAL_InitTick+0xf4>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e002      	b.n	8001c18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3738      	adds	r7, #56	@ 0x38
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	431bde83 	.word	0x431bde83
 8001c2c:	200002e8 	.word	0x200002e8
 8001c30:	40000800 	.word	0x40000800
 8001c34:	20000010 	.word	0x20000010

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <NMI_Handler+0x4>

08001c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <MemManage_Handler+0x4>

08001c50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c74:	4802      	ldr	r0, [pc, #8]	@ (8001c80 <TIM4_IRQHandler+0x10>)
 8001c76:	f001 fa6f 	bl	8003158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200002e8 	.word	0x200002e8

08001c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ce0 <_sbrk+0x5c>)
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <_sbrk+0x60>)
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c98:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <_sbrk+0x64>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <_sbrk+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca6:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d207      	bcs.n	8001cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb4:	f005 fa48 	bl	8007148 <__errno>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	220c      	movs	r2, #12
 8001cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e009      	b.n	8001cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc4:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cca:	4b07      	ldr	r3, [pc, #28]	@ (8001ce8 <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a05      	ldr	r2, [pc, #20]	@ (8001ce8 <_sbrk+0x64>)
 8001cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20020000 	.word	0x20020000
 8001ce4:	00000400 	.word	0x00000400
 8001ce8:	20000330 	.word	0x20000330
 8001cec:	20004dd0 	.word	0x20004dd0

08001cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <SystemInit+0x20>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cfa:	4a05      	ldr	r2, [pc, #20]	@ (8001d10 <SystemInit+0x20>)
 8001cfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d18:	f7ff ffea 	bl	8001cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d1c:	480c      	ldr	r0, [pc, #48]	@ (8001d50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d1e:	490d      	ldr	r1, [pc, #52]	@ (8001d54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d20:	4a0d      	ldr	r2, [pc, #52]	@ (8001d58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d34:	4c0a      	ldr	r4, [pc, #40]	@ (8001d60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d42:	f005 fa07 	bl	8007154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d46:	f7ff f9c1 	bl	80010cc <main>
  bx  lr    
 8001d4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d54:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001d58:	08007b60 	.word	0x08007b60
  ldr r2, =_sbss
 8001d5c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001d60:	20004dd0 	.word	0x20004dd0

08001d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC_IRQHandler>
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0d      	ldr	r2, [pc, #52]	@ (8001da8 <HAL_Init+0x40>)
 8001d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d78:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <HAL_Init+0x40>)
 8001d7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a07      	ldr	r2, [pc, #28]	@ (8001da8 <HAL_Init+0x40>)
 8001d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 f8fc 	bl	8001f8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d96:	200f      	movs	r0, #15
 8001d98:	f7ff fed2 	bl	8001b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9c:	f7ff fdb2 	bl	8001904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023c00 	.word	0x40023c00

08001dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <HAL_IncTick+0x20>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_IncTick+0x24>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a04      	ldr	r2, [pc, #16]	@ (8001dd0 <HAL_IncTick+0x24>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000014 	.word	0x20000014
 8001dd0:	20000334 	.word	0x20000334

08001dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	@ (8001de8 <HAL_GetTick+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000334 	.word	0x20000334

08001dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff ffee 	bl	8001dd4 <HAL_GetTick>
 8001df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d005      	beq.n	8001e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <HAL_Delay+0x44>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e12:	bf00      	nop
 8001e14:	f7ff ffde 	bl	8001dd4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d8f7      	bhi.n	8001e14 <HAL_Delay+0x28>
  {
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000014 	.word	0x20000014

08001e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db0b      	blt.n	8001ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4907      	ldr	r1, [pc, #28]	@ (8001ed0 <__NVIC_EnableIRQ+0x38>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2001      	movs	r0, #1
 8001eba:	fa00 f202 	lsl.w	r2, r0, r2
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	@ (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	@ (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	@ 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
         );
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	@ 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff4c 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb6:	f7ff ff61 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8001fba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	6978      	ldr	r0, [r7, #20]
 8001fc2:	f7ff ffb1 	bl	8001f28 <NVIC_EncodePriority>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff80 	bl	8001ed4 <__NVIC_SetPriority>
}
 8001fd4:	bf00      	nop
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff54 	bl	8001e98 <__NVIC_EnableIRQ>
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	@ 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	e159      	b.n	80022c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	429a      	cmp	r2, r3
 800202e:	f040 8148 	bne.w	80022c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d005      	beq.n	800204a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002046:	2b02      	cmp	r3, #2
 8002048:	d130      	bne.n	80020ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 0201 	and.w	r2, r3, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d017      	beq.n	80020e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d123      	bne.n	800213c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	08da      	lsrs	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3208      	adds	r2, #8
 80020fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	220f      	movs	r2, #15
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	08da      	lsrs	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3208      	adds	r2, #8
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0203 	and.w	r2, r3, #3
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80a2 	beq.w	80022c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b57      	ldr	r3, [pc, #348]	@ (80022e0 <HAL_GPIO_Init+0x2e8>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	4a56      	ldr	r2, [pc, #344]	@ (80022e0 <HAL_GPIO_Init+0x2e8>)
 8002188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800218c:	6453      	str	r3, [r2, #68]	@ 0x44
 800218e:	4b54      	ldr	r3, [pc, #336]	@ (80022e0 <HAL_GPIO_Init+0x2e8>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800219a:	4a52      	ldr	r2, [pc, #328]	@ (80022e4 <HAL_GPIO_Init+0x2ec>)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a49      	ldr	r2, [pc, #292]	@ (80022e8 <HAL_GPIO_Init+0x2f0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d019      	beq.n	80021fa <HAL_GPIO_Init+0x202>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a48      	ldr	r2, [pc, #288]	@ (80022ec <HAL_GPIO_Init+0x2f4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <HAL_GPIO_Init+0x1fe>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a47      	ldr	r2, [pc, #284]	@ (80022f0 <HAL_GPIO_Init+0x2f8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00d      	beq.n	80021f2 <HAL_GPIO_Init+0x1fa>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a46      	ldr	r2, [pc, #280]	@ (80022f4 <HAL_GPIO_Init+0x2fc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <HAL_GPIO_Init+0x1f6>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a45      	ldr	r2, [pc, #276]	@ (80022f8 <HAL_GPIO_Init+0x300>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_GPIO_Init+0x1f2>
 80021e6:	2304      	movs	r3, #4
 80021e8:	e008      	b.n	80021fc <HAL_GPIO_Init+0x204>
 80021ea:	2307      	movs	r3, #7
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x204>
 80021ee:	2303      	movs	r3, #3
 80021f0:	e004      	b.n	80021fc <HAL_GPIO_Init+0x204>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e002      	b.n	80021fc <HAL_GPIO_Init+0x204>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_GPIO_Init+0x204>
 80021fa:	2300      	movs	r3, #0
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	f002 0203 	and.w	r2, r2, #3
 8002202:	0092      	lsls	r2, r2, #2
 8002204:	4093      	lsls	r3, r2
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800220c:	4935      	ldr	r1, [pc, #212]	@ (80022e4 <HAL_GPIO_Init+0x2ec>)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221a:	4b38      	ldr	r3, [pc, #224]	@ (80022fc <HAL_GPIO_Init+0x304>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800223e:	4a2f      	ldr	r2, [pc, #188]	@ (80022fc <HAL_GPIO_Init+0x304>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002244:	4b2d      	ldr	r3, [pc, #180]	@ (80022fc <HAL_GPIO_Init+0x304>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002268:	4a24      	ldr	r2, [pc, #144]	@ (80022fc <HAL_GPIO_Init+0x304>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800226e:	4b23      	ldr	r3, [pc, #140]	@ (80022fc <HAL_GPIO_Init+0x304>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002292:	4a1a      	ldr	r2, [pc, #104]	@ (80022fc <HAL_GPIO_Init+0x304>)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002298:	4b18      	ldr	r3, [pc, #96]	@ (80022fc <HAL_GPIO_Init+0x304>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022bc:	4a0f      	ldr	r2, [pc, #60]	@ (80022fc <HAL_GPIO_Init+0x304>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b0f      	cmp	r3, #15
 80022cc:	f67f aea2 	bls.w	8002014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3724      	adds	r7, #36	@ 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40013800 	.word	0x40013800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40020400 	.word	0x40020400
 80022f0:	40020800 	.word	0x40020800
 80022f4:	40020c00 	.word	0x40020c00
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40013c00 	.word	0x40013c00

08002300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	887b      	ldrh	r3, [r7, #2]
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e001      	b.n	8002322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
 800233c:	4613      	mov	r3, r2
 800233e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002340:	787b      	ldrb	r3, [r7, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800234c:	e003      	b.n	8002356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	041a      	lsls	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	619a      	str	r2, [r3, #24]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002374:	887a      	ldrh	r2, [r7, #2]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	041a      	lsls	r2, r3, #16
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	43d9      	mvns	r1, r3
 8002380:	887b      	ldrh	r3, [r7, #2]
 8002382:	400b      	ands	r3, r1
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	619a      	str	r2, [r3, #24]
}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e267      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d075      	beq.n	80024a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023b6:	4b88      	ldr	r3, [pc, #544]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d00c      	beq.n	80023dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c2:	4b85      	ldr	r3, [pc, #532]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d112      	bne.n	80023f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ce:	4b82      	ldr	r3, [pc, #520]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023da:	d10b      	bne.n	80023f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	4b7e      	ldr	r3, [pc, #504]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d05b      	beq.n	80024a0 <HAL_RCC_OscConfig+0x108>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d157      	bne.n	80024a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e242      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023fc:	d106      	bne.n	800240c <HAL_RCC_OscConfig+0x74>
 80023fe:	4b76      	ldr	r3, [pc, #472]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a75      	ldr	r2, [pc, #468]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e01d      	b.n	8002448 <HAL_RCC_OscConfig+0xb0>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0x98>
 8002416:	4b70      	ldr	r3, [pc, #448]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a6f      	ldr	r2, [pc, #444]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 800241c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b6d      	ldr	r3, [pc, #436]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6c      	ldr	r2, [pc, #432]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0xb0>
 8002430:	4b69      	ldr	r3, [pc, #420]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a68      	ldr	r2, [pc, #416]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b66      	ldr	r3, [pc, #408]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a65      	ldr	r2, [pc, #404]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7ff fcc0 	bl	8001dd4 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7ff fcbc 	bl	8001dd4 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e207      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b5b      	ldr	r3, [pc, #364]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0xc0>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff fcac 	bl	8001dd4 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7ff fca8 	bl	8001dd4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	@ 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e1f3      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	4b51      	ldr	r3, [pc, #324]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0xe8>
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d063      	beq.n	8002576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024ae:	4b4a      	ldr	r3, [pc, #296]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ba:	4b47      	ldr	r3, [pc, #284]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d11c      	bne.n	8002500 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c6:	4b44      	ldr	r3, [pc, #272]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d116      	bne.n	8002500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	4b41      	ldr	r3, [pc, #260]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_RCC_OscConfig+0x152>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e1c7      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	4b3b      	ldr	r3, [pc, #236]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4937      	ldr	r1, [pc, #220]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	e03a      	b.n	8002576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d020      	beq.n	800254a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002508:	4b34      	ldr	r3, [pc, #208]	@ (80025dc <HAL_RCC_OscConfig+0x244>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7ff fc61 	bl	8001dd4 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002516:	f7ff fc5d 	bl	8001dd4 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e1a8      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002528:	4b2b      	ldr	r3, [pc, #172]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b28      	ldr	r3, [pc, #160]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4925      	ldr	r1, [pc, #148]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]
 8002548:	e015      	b.n	8002576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254a:	4b24      	ldr	r3, [pc, #144]	@ (80025dc <HAL_RCC_OscConfig+0x244>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7ff fc40 	bl	8001dd4 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002558:	f7ff fc3c 	bl	8001dd4 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e187      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256a:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d036      	beq.n	80025f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d016      	beq.n	80025b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258a:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <HAL_RCC_OscConfig+0x248>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7ff fc20 	bl	8001dd4 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002598:	f7ff fc1c 	bl	8001dd4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e167      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025aa:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80025ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x200>
 80025b6:	e01b      	b.n	80025f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b8:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <HAL_RCC_OscConfig+0x248>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025be:	f7ff fc09 	bl	8001dd4 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c4:	e00e      	b.n	80025e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c6:	f7ff fc05 	bl	8001dd4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d907      	bls.n	80025e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e150      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
 80025d8:	40023800 	.word	0x40023800
 80025dc:	42470000 	.word	0x42470000
 80025e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	4b88      	ldr	r3, [pc, #544]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80025e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ea      	bne.n	80025c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 8097 	beq.w	800272c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002602:	4b81      	ldr	r3, [pc, #516]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10f      	bne.n	800262e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	4b7d      	ldr	r3, [pc, #500]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	4a7c      	ldr	r2, [pc, #496]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800261c:	6413      	str	r3, [r2, #64]	@ 0x40
 800261e:	4b7a      	ldr	r3, [pc, #488]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262a:	2301      	movs	r3, #1
 800262c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	4b77      	ldr	r3, [pc, #476]	@ (800280c <HAL_RCC_OscConfig+0x474>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d118      	bne.n	800266c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263a:	4b74      	ldr	r3, [pc, #464]	@ (800280c <HAL_RCC_OscConfig+0x474>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a73      	ldr	r2, [pc, #460]	@ (800280c <HAL_RCC_OscConfig+0x474>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002646:	f7ff fbc5 	bl	8001dd4 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264e:	f7ff fbc1 	bl	8001dd4 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e10c      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	4b6a      	ldr	r3, [pc, #424]	@ (800280c <HAL_RCC_OscConfig+0x474>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x2ea>
 8002674:	4b64      	ldr	r3, [pc, #400]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002678:	4a63      	ldr	r2, [pc, #396]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002680:	e01c      	b.n	80026bc <HAL_RCC_OscConfig+0x324>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b05      	cmp	r3, #5
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x30c>
 800268a:	4b5f      	ldr	r3, [pc, #380]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268e:	4a5e      	ldr	r2, [pc, #376]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6713      	str	r3, [r2, #112]	@ 0x70
 8002696:	4b5c      	ldr	r3, [pc, #368]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269a:	4a5b      	ldr	r2, [pc, #364]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0x324>
 80026a4:	4b58      	ldr	r3, [pc, #352]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a8:	4a57      	ldr	r2, [pc, #348]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b0:	4b55      	ldr	r3, [pc, #340]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b4:	4a54      	ldr	r2, [pc, #336]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80026b6:	f023 0304 	bic.w	r3, r3, #4
 80026ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d015      	beq.n	80026f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7ff fb86 	bl	8001dd4 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026cc:	f7ff fb82 	bl	8001dd4 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e0cb      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e2:	4b49      	ldr	r3, [pc, #292]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0ee      	beq.n	80026cc <HAL_RCC_OscConfig+0x334>
 80026ee:	e014      	b.n	800271a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f0:	f7ff fb70 	bl	8001dd4 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f6:	e00a      	b.n	800270e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f8:	f7ff fb6c 	bl	8001dd4 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e0b5      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270e:	4b3e      	ldr	r3, [pc, #248]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ee      	bne.n	80026f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800271a:	7dfb      	ldrb	r3, [r7, #23]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002720:	4b39      	ldr	r3, [pc, #228]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	4a38      	ldr	r2, [pc, #224]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800272a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80a1 	beq.w	8002878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002736:	4b34      	ldr	r3, [pc, #208]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b08      	cmp	r3, #8
 8002740:	d05c      	beq.n	80027fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d141      	bne.n	80027ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	4b31      	ldr	r3, [pc, #196]	@ (8002810 <HAL_RCC_OscConfig+0x478>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7ff fb40 	bl	8001dd4 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002758:	f7ff fb3c 	bl	8001dd4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e087      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276a:	4b27      	ldr	r3, [pc, #156]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	019b      	lsls	r3, r3, #6
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	085b      	lsrs	r3, r3, #1
 800278e:	3b01      	subs	r3, #1
 8002790:	041b      	lsls	r3, r3, #16
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	491b      	ldr	r1, [pc, #108]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <HAL_RCC_OscConfig+0x478>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7ff fb15 	bl	8001dd4 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ae:	f7ff fb11 	bl	8001dd4 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e05c      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c0:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x416>
 80027cc:	e054      	b.n	8002878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <HAL_RCC_OscConfig+0x478>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7ff fafe 	bl	8001dd4 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7ff fafa 	bl	8001dd4 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e045      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x444>
 80027fa:	e03d      	b.n	8002878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d107      	bne.n	8002814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e038      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
 8002808:	40023800 	.word	0x40023800
 800280c:	40007000 	.word	0x40007000
 8002810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002814:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_RCC_OscConfig+0x4ec>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d028      	beq.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d121      	bne.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d11a      	bne.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002844:	4013      	ands	r3, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800284a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800284c:	4293      	cmp	r3, r2
 800284e:	d111      	bne.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	3b01      	subs	r3, #1
 800285e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0cc      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b68      	ldr	r3, [pc, #416]	@ (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d90c      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b65      	ldr	r3, [pc, #404]	@ (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b63      	ldr	r3, [pc, #396]	@ (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0b8      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028dc:	4b59      	ldr	r3, [pc, #356]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a58      	ldr	r2, [pc, #352]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f4:	4b53      	ldr	r3, [pc, #332]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a52      	ldr	r2, [pc, #328]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002900:	4b50      	ldr	r3, [pc, #320]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	494d      	ldr	r1, [pc, #308]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d044      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b47      	ldr	r3, [pc, #284]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d119      	bne.n	8002966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e07f      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d003      	beq.n	8002946 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002942:	2b03      	cmp	r3, #3
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002946:	4b3f      	ldr	r3, [pc, #252]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d109      	bne.n	8002966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e06f      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002956:	4b3b      	ldr	r3, [pc, #236]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e067      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002966:	4b37      	ldr	r3, [pc, #220]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f023 0203 	bic.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4934      	ldr	r1, [pc, #208]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002978:	f7ff fa2c 	bl	8001dd4 <HAL_GetTick>
 800297c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	e00a      	b.n	8002996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002980:	f7ff fa28 	bl	8001dd4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e04f      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	4b2b      	ldr	r3, [pc, #172]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 020c 	and.w	r2, r3, #12
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d1eb      	bne.n	8002980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029a8:	4b25      	ldr	r3, [pc, #148]	@ (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d20c      	bcs.n	80029d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b22      	ldr	r3, [pc, #136]	@ (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e032      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029dc:	4b19      	ldr	r3, [pc, #100]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4916      	ldr	r1, [pc, #88]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029fa:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	490e      	ldr	r1, [pc, #56]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a0e:	f000 f821 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8002a12:	4602      	mov	r2, r0
 8002a14:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	490a      	ldr	r1, [pc, #40]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	5ccb      	ldrb	r3, [r1, r3]
 8002a22:	fa22 f303 	lsr.w	r3, r2, r3
 8002a26:	4a09      	ldr	r2, [pc, #36]	@ (8002a4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a2a:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff f886 	bl	8001b40 <HAL_InitTick>

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023c00 	.word	0x40023c00
 8002a44:	40023800 	.word	0x40023800
 8002a48:	08007b04 	.word	0x08007b04
 8002a4c:	2000000c 	.word	0x2000000c
 8002a50:	20000010 	.word	0x20000010

08002a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a58:	b094      	sub	sp, #80	@ 0x50
 8002a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a6c:	4b79      	ldr	r3, [pc, #484]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d00d      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x40>
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	f200 80e1 	bhi.w	8002c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x34>
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d003      	beq.n	8002a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a86:	e0db      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4b73      	ldr	r3, [pc, #460]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a8c:	e0db      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a8e:	4b73      	ldr	r3, [pc, #460]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a92:	e0d8      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a94:	4b6f      	ldr	r3, [pc, #444]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d063      	beq.n	8002b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	099b      	lsrs	r3, r3, #6
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ab4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002abe:	2300      	movs	r3, #0
 8002ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	462b      	mov	r3, r5
 8002aca:	f04f 0000 	mov.w	r0, #0
 8002ace:	f04f 0100 	mov.w	r1, #0
 8002ad2:	0159      	lsls	r1, r3, #5
 8002ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ad8:	0150      	lsls	r0, r2, #5
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4621      	mov	r1, r4
 8002ae0:	1a51      	subs	r1, r2, r1
 8002ae2:	6139      	str	r1, [r7, #16]
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002af8:	4659      	mov	r1, fp
 8002afa:	018b      	lsls	r3, r1, #6
 8002afc:	4651      	mov	r1, sl
 8002afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b02:	4651      	mov	r1, sl
 8002b04:	018a      	lsls	r2, r1, #6
 8002b06:	4651      	mov	r1, sl
 8002b08:	ebb2 0801 	subs.w	r8, r2, r1
 8002b0c:	4659      	mov	r1, fp
 8002b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b26:	4690      	mov	r8, r2
 8002b28:	4699      	mov	r9, r3
 8002b2a:	4623      	mov	r3, r4
 8002b2c:	eb18 0303 	adds.w	r3, r8, r3
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	462b      	mov	r3, r5
 8002b34:	eb49 0303 	adc.w	r3, r9, r3
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b46:	4629      	mov	r1, r5
 8002b48:	024b      	lsls	r3, r1, #9
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b50:	4621      	mov	r1, r4
 8002b52:	024a      	lsls	r2, r1, #9
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b64:	f7fd ff82 	bl	8000a6c <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b70:	e058      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b72:	4b38      	ldr	r3, [pc, #224]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	099b      	lsrs	r3, r3, #6
 8002b78:	2200      	movs	r2, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b82:	623b      	str	r3, [r7, #32]
 8002b84:	2300      	movs	r3, #0
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b8c:	4642      	mov	r2, r8
 8002b8e:	464b      	mov	r3, r9
 8002b90:	f04f 0000 	mov.w	r0, #0
 8002b94:	f04f 0100 	mov.w	r1, #0
 8002b98:	0159      	lsls	r1, r3, #5
 8002b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b9e:	0150      	lsls	r0, r2, #5
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002baa:	4649      	mov	r1, r9
 8002bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8002bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	00eb      	lsls	r3, r5, #3
 8002bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bda:	00e2      	lsls	r2, r4, #3
 8002bdc:	4614      	mov	r4, r2
 8002bde:	461d      	mov	r5, r3
 8002be0:	4643      	mov	r3, r8
 8002be2:	18e3      	adds	r3, r4, r3
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	464b      	mov	r3, r9
 8002be8:	eb45 0303 	adc.w	r3, r5, r3
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	028b      	lsls	r3, r1, #10
 8002bfe:	4621      	mov	r1, r4
 8002c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c04:	4621      	mov	r1, r4
 8002c06:	028a      	lsls	r2, r1, #10
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	61fa      	str	r2, [r7, #28]
 8002c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c18:	f7fd ff28 	bl	8000a6c <__aeabi_uldivmod>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4613      	mov	r3, r2
 8002c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c24:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c3e:	e002      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3750      	adds	r7, #80	@ 0x50
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800
 8002c58:	00f42400 	.word	0x00f42400
 8002c5c:	007a1200 	.word	0x007a1200

08002c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c64:	4b03      	ldr	r3, [pc, #12]	@ (8002c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	2000000c 	.word	0x2000000c

08002c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c7c:	f7ff fff0 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	0a9b      	lsrs	r3, r3, #10
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	4903      	ldr	r1, [pc, #12]	@ (8002c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c8e:	5ccb      	ldrb	r3, [r1, r3]
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	08007b14 	.word	0x08007b14

08002ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca4:	f7ff ffdc 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	0b5b      	lsrs	r3, r3, #13
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	4903      	ldr	r1, [pc, #12]	@ (8002cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cb6:	5ccb      	ldrb	r3, [r1, r3]
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	08007b14 	.word	0x08007b14

08002cc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cd8:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <HAL_RCC_GetClockConfig+0x5c>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0203 	and.w	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <HAL_RCC_GetClockConfig+0x5c>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <HAL_RCC_GetClockConfig+0x5c>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cfc:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <HAL_RCC_GetClockConfig+0x5c>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	08db      	lsrs	r3, r3, #3
 8002d02:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d0a:	4b07      	ldr	r3, [pc, #28]	@ (8002d28 <HAL_RCC_GetClockConfig+0x60>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0207 	and.w	r2, r3, #7
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	601a      	str	r2, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40023c00 	.word	0x40023c00

08002d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e041      	b.n	8002dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe fe02 	bl	800195c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3304      	adds	r3, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f000 fc96 	bl	800369c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d001      	beq.n	8002de4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e03c      	b.n	8002e5e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e6c <HAL_TIM_Base_Start+0xa0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d018      	beq.n	8002e28 <HAL_TIM_Base_Start+0x5c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dfe:	d013      	beq.n	8002e28 <HAL_TIM_Base_Start+0x5c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1a      	ldr	r2, [pc, #104]	@ (8002e70 <HAL_TIM_Base_Start+0xa4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <HAL_TIM_Base_Start+0x5c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a19      	ldr	r2, [pc, #100]	@ (8002e74 <HAL_TIM_Base_Start+0xa8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_TIM_Base_Start+0x5c>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a17      	ldr	r2, [pc, #92]	@ (8002e78 <HAL_TIM_Base_Start+0xac>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_TIM_Base_Start+0x5c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a16      	ldr	r2, [pc, #88]	@ (8002e7c <HAL_TIM_Base_Start+0xb0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d111      	bne.n	8002e4c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d010      	beq.n	8002e5c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4a:	e007      	b.n	8002e5c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40000800 	.word	0x40000800
 8002e78:	40000c00 	.word	0x40000c00
 8002e7c:	40014000 	.word	0x40014000

08002e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d001      	beq.n	8002e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e044      	b.n	8002f22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8002f30 <HAL_TIM_Base_Start_IT+0xb0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d018      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x6c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec2:	d013      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x6c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f34 <HAL_TIM_Base_Start_IT+0xb4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00e      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x6c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	@ (8002f38 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d009      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x6c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a17      	ldr	r2, [pc, #92]	@ (8002f3c <HAL_TIM_Base_Start_IT+0xbc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x6c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a16      	ldr	r2, [pc, #88]	@ (8002f40 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d111      	bne.n	8002f10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d010      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0201 	orr.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0e:	e007      	b.n	8002f20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800
 8002f3c:	40000c00 	.word	0x40000c00
 8002f40:	40014000 	.word	0x40014000

08002f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e041      	b.n	8002fda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f839 	bl	8002fe2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f000 fb8a 	bl	800369c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <HAL_TIM_PWM_Start+0x24>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	bf14      	ite	ne
 8003014:	2301      	movne	r3, #1
 8003016:	2300      	moveq	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e022      	b.n	8003062 <HAL_TIM_PWM_Start+0x6a>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b04      	cmp	r3, #4
 8003020:	d109      	bne.n	8003036 <HAL_TIM_PWM_Start+0x3e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	bf14      	ite	ne
 800302e:	2301      	movne	r3, #1
 8003030:	2300      	moveq	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	e015      	b.n	8003062 <HAL_TIM_PWM_Start+0x6a>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b08      	cmp	r3, #8
 800303a:	d109      	bne.n	8003050 <HAL_TIM_PWM_Start+0x58>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e008      	b.n	8003062 <HAL_TIM_PWM_Start+0x6a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e068      	b.n	800313c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <HAL_TIM_PWM_Start+0x82>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003078:	e013      	b.n	80030a2 <HAL_TIM_PWM_Start+0xaa>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d104      	bne.n	800308a <HAL_TIM_PWM_Start+0x92>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003088:	e00b      	b.n	80030a2 <HAL_TIM_PWM_Start+0xaa>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d104      	bne.n	800309a <HAL_TIM_PWM_Start+0xa2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003098:	e003      	b.n	80030a2 <HAL_TIM_PWM_Start+0xaa>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2201      	movs	r2, #1
 80030a8:	6839      	ldr	r1, [r7, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fda8 	bl	8003c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a23      	ldr	r2, [pc, #140]	@ (8003144 <HAL_TIM_PWM_Start+0x14c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d107      	bne.n	80030ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003144 <HAL_TIM_PWM_Start+0x14c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d018      	beq.n	8003106 <HAL_TIM_PWM_Start+0x10e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030dc:	d013      	beq.n	8003106 <HAL_TIM_PWM_Start+0x10e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a19      	ldr	r2, [pc, #100]	@ (8003148 <HAL_TIM_PWM_Start+0x150>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00e      	beq.n	8003106 <HAL_TIM_PWM_Start+0x10e>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a17      	ldr	r2, [pc, #92]	@ (800314c <HAL_TIM_PWM_Start+0x154>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d009      	beq.n	8003106 <HAL_TIM_PWM_Start+0x10e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a16      	ldr	r2, [pc, #88]	@ (8003150 <HAL_TIM_PWM_Start+0x158>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_TIM_PWM_Start+0x10e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a14      	ldr	r2, [pc, #80]	@ (8003154 <HAL_TIM_PWM_Start+0x15c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d111      	bne.n	800312a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b06      	cmp	r3, #6
 8003116:	d010      	beq.n	800313a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003128:	e007      	b.n	800313a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40010000 	.word	0x40010000
 8003148:	40000400 	.word	0x40000400
 800314c:	40000800 	.word	0x40000800
 8003150:	40000c00 	.word	0x40000c00
 8003154:	40014000 	.word	0x40014000

08003158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d020      	beq.n	80031bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01b      	beq.n	80031bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0202 	mvn.w	r2, #2
 800318c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fa5b 	bl	800365e <HAL_TIM_IC_CaptureCallback>
 80031a8:	e005      	b.n	80031b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa4d 	bl	800364a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fa5e 	bl	8003672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d020      	beq.n	8003208 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01b      	beq.n	8003208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0204 	mvn.w	r2, #4
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa35 	bl	800365e <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fa27 	bl	800364a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fa38 	bl	8003672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d020      	beq.n	8003254 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01b      	beq.n	8003254 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0208 	mvn.w	r2, #8
 8003224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2204      	movs	r2, #4
 800322a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa0f 	bl	800365e <HAL_TIM_IC_CaptureCallback>
 8003240:	e005      	b.n	800324e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fa01 	bl	800364a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fa12 	bl	8003672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b00      	cmp	r3, #0
 800325c:	d020      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01b      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0210 	mvn.w	r2, #16
 8003270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2208      	movs	r2, #8
 8003276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f9e9 	bl	800365e <HAL_TIM_IC_CaptureCallback>
 800328c:	e005      	b.n	800329a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f9db 	bl	800364a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f9ec 	bl	8003672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00c      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0201 	mvn.w	r2, #1
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe fb08 	bl	80018d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00c      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fd2a 	bl	8003d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00c      	beq.n	800330c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f9bd 	bl	8003686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00c      	beq.n	8003330 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0220 	mvn.w	r2, #32
 8003328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fcfc 	bl	8003d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003352:	2302      	movs	r3, #2
 8003354:	e0ae      	b.n	80034b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b0c      	cmp	r3, #12
 8003362:	f200 809f 	bhi.w	80034a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003366:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	080033a1 	.word	0x080033a1
 8003370:	080034a5 	.word	0x080034a5
 8003374:	080034a5 	.word	0x080034a5
 8003378:	080034a5 	.word	0x080034a5
 800337c:	080033e1 	.word	0x080033e1
 8003380:	080034a5 	.word	0x080034a5
 8003384:	080034a5 	.word	0x080034a5
 8003388:	080034a5 	.word	0x080034a5
 800338c:	08003423 	.word	0x08003423
 8003390:	080034a5 	.word	0x080034a5
 8003394:	080034a5 	.word	0x080034a5
 8003398:	080034a5 	.word	0x080034a5
 800339c:	08003463 	.word	0x08003463
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fa04 	bl	80037b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0208 	orr.w	r2, r2, #8
 80033ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0204 	bic.w	r2, r2, #4
 80033ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6999      	ldr	r1, [r3, #24]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	619a      	str	r2, [r3, #24]
      break;
 80033de:	e064      	b.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fa4a 	bl	8003880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800340a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6999      	ldr	r1, [r3, #24]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	021a      	lsls	r2, r3, #8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	619a      	str	r2, [r3, #24]
      break;
 8003420:	e043      	b.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fa95 	bl	8003958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0208 	orr.w	r2, r2, #8
 800343c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0204 	bic.w	r2, r2, #4
 800344c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69d9      	ldr	r1, [r3, #28]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	61da      	str	r2, [r3, #28]
      break;
 8003460:	e023      	b.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fadf 	bl	8003a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800347c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800348c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69d9      	ldr	r1, [r3, #28]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	021a      	lsls	r2, r3, #8
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	61da      	str	r2, [r3, #28]
      break;
 80034a2:	e002      	b.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	75fb      	strb	r3, [r7, #23]
      break;
 80034a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_TIM_ConfigClockSource+0x1c>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e0b4      	b.n	8003642 <HAL_TIM_ConfigClockSource+0x186>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003510:	d03e      	beq.n	8003590 <HAL_TIM_ConfigClockSource+0xd4>
 8003512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003516:	f200 8087 	bhi.w	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 800351a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800351e:	f000 8086 	beq.w	800362e <HAL_TIM_ConfigClockSource+0x172>
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003526:	d87f      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b70      	cmp	r3, #112	@ 0x70
 800352a:	d01a      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0xa6>
 800352c:	2b70      	cmp	r3, #112	@ 0x70
 800352e:	d87b      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b60      	cmp	r3, #96	@ 0x60
 8003532:	d050      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003534:	2b60      	cmp	r3, #96	@ 0x60
 8003536:	d877      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b50      	cmp	r3, #80	@ 0x50
 800353a:	d03c      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0xfa>
 800353c:	2b50      	cmp	r3, #80	@ 0x50
 800353e:	d873      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b40      	cmp	r3, #64	@ 0x40
 8003542:	d058      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003544:	2b40      	cmp	r3, #64	@ 0x40
 8003546:	d86f      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b30      	cmp	r3, #48	@ 0x30
 800354a:	d064      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x15a>
 800354c:	2b30      	cmp	r3, #48	@ 0x30
 800354e:	d86b      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b20      	cmp	r3, #32
 8003552:	d060      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x15a>
 8003554:	2b20      	cmp	r3, #32
 8003556:	d867      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d05c      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x15a>
 800355c:	2b10      	cmp	r3, #16
 800355e:	d05a      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x15a>
 8003560:	e062      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003572:	f000 fb25 	bl	8003bc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003584:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	609a      	str	r2, [r3, #8]
      break;
 800358e:	e04f      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035a0:	f000 fb0e 	bl	8003bc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035b2:	609a      	str	r2, [r3, #8]
      break;
 80035b4:	e03c      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c2:	461a      	mov	r2, r3
 80035c4:	f000 fa82 	bl	8003acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2150      	movs	r1, #80	@ 0x50
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fadb 	bl	8003b8a <TIM_ITRx_SetConfig>
      break;
 80035d4:	e02c      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035e2:	461a      	mov	r2, r3
 80035e4:	f000 faa1 	bl	8003b2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2160      	movs	r1, #96	@ 0x60
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 facb 	bl	8003b8a <TIM_ITRx_SetConfig>
      break;
 80035f4:	e01c      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003602:	461a      	mov	r2, r3
 8003604:	f000 fa62 	bl	8003acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2140      	movs	r1, #64	@ 0x40
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fabb 	bl	8003b8a <TIM_ITRx_SetConfig>
      break;
 8003614:	e00c      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f000 fab2 	bl	8003b8a <TIM_ITRx_SetConfig>
      break;
 8003626:	e003      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      break;
 800362c:	e000      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800362e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003798 <TIM_Base_SetConfig+0xfc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00f      	beq.n	80036d4 <TIM_Base_SetConfig+0x38>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ba:	d00b      	beq.n	80036d4 <TIM_Base_SetConfig+0x38>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a37      	ldr	r2, [pc, #220]	@ (800379c <TIM_Base_SetConfig+0x100>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <TIM_Base_SetConfig+0x38>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a36      	ldr	r2, [pc, #216]	@ (80037a0 <TIM_Base_SetConfig+0x104>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_Base_SetConfig+0x38>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a35      	ldr	r2, [pc, #212]	@ (80037a4 <TIM_Base_SetConfig+0x108>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d108      	bne.n	80036e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003798 <TIM_Base_SetConfig+0xfc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01b      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f4:	d017      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a28      	ldr	r2, [pc, #160]	@ (800379c <TIM_Base_SetConfig+0x100>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a27      	ldr	r2, [pc, #156]	@ (80037a0 <TIM_Base_SetConfig+0x104>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00f      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a26      	ldr	r2, [pc, #152]	@ (80037a4 <TIM_Base_SetConfig+0x108>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00b      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a25      	ldr	r2, [pc, #148]	@ (80037a8 <TIM_Base_SetConfig+0x10c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a24      	ldr	r2, [pc, #144]	@ (80037ac <TIM_Base_SetConfig+0x110>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a23      	ldr	r2, [pc, #140]	@ (80037b0 <TIM_Base_SetConfig+0x114>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d108      	bne.n	8003738 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800372c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0e      	ldr	r2, [pc, #56]	@ (8003798 <TIM_Base_SetConfig+0xfc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d103      	bne.n	800376c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	611a      	str	r2, [r3, #16]
  }
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40010000 	.word	0x40010000
 800379c:	40000400 	.word	0x40000400
 80037a0:	40000800 	.word	0x40000800
 80037a4:	40000c00 	.word	0x40000c00
 80037a8:	40014000 	.word	0x40014000
 80037ac:	40014400 	.word	0x40014400
 80037b0:	40014800 	.word	0x40014800

080037b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f023 0201 	bic.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0303 	bic.w	r3, r3, #3
 80037ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f023 0302 	bic.w	r3, r3, #2
 80037fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a1c      	ldr	r2, [pc, #112]	@ (800387c <TIM_OC1_SetConfig+0xc8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10c      	bne.n	800382a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 0308 	bic.w	r3, r3, #8
 8003816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f023 0304 	bic.w	r3, r3, #4
 8003828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a13      	ldr	r2, [pc, #76]	@ (800387c <TIM_OC1_SetConfig+0xc8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d111      	bne.n	8003856 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	621a      	str	r2, [r3, #32]
}
 8003870:	bf00      	nop
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40010000 	.word	0x40010000

08003880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f023 0210 	bic.w	r2, r3, #16
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f023 0320 	bic.w	r3, r3, #32
 80038ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a1e      	ldr	r2, [pc, #120]	@ (8003954 <TIM_OC2_SetConfig+0xd4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d10d      	bne.n	80038fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a15      	ldr	r2, [pc, #84]	@ (8003954 <TIM_OC2_SetConfig+0xd4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d113      	bne.n	800392c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800390a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003912:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40010000 	.word	0x40010000

08003958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a28 <TIM_OC3_SetConfig+0xd0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10d      	bne.n	80039d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a14      	ldr	r2, [pc, #80]	@ (8003a28 <TIM_OC3_SetConfig+0xd0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d113      	bne.n	8003a02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40010000 	.word	0x40010000

08003a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	031b      	lsls	r3, r3, #12
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a10      	ldr	r2, [pc, #64]	@ (8003ac8 <TIM_OC4_SetConfig+0x9c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d109      	bne.n	8003aa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40010000 	.word	0x40010000

08003acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f023 0201 	bic.w	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 030a 	bic.w	r3, r3, #10
 8003b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	621a      	str	r2, [r3, #32]
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b087      	sub	sp, #28
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f023 0210 	bic.w	r2, r3, #16
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	031b      	lsls	r3, r3, #12
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b085      	sub	sp, #20
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f043 0307 	orr.w	r3, r3, #7
 8003bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	021a      	lsls	r2, r3, #8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	609a      	str	r2, [r3, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	2201      	movs	r2, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	401a      	ands	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	fa01 f303 	lsl.w	r3, r1, r3
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
	...

08003c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e050      	b.n	8003d06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d018      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb0:	d013      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a18      	ldr	r2, [pc, #96]	@ (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00e      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a16      	ldr	r2, [pc, #88]	@ (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d009      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a15      	ldr	r2, [pc, #84]	@ (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a13      	ldr	r2, [pc, #76]	@ (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40010000 	.word	0x40010000
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800
 8003d20:	40000c00 	.word	0x40000c00
 8003d24:	40014000 	.word	0x40014000

08003d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e042      	b.n	8003de8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd fe9a 	bl	8001ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2224      	movs	r2, #36	@ 0x24
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f973 	bl	8004080 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003da8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003db8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08a      	sub	sp, #40	@ 0x28
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d175      	bne.n	8003efc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_UART_Transmit+0x2c>
 8003e16:	88fb      	ldrh	r3, [r7, #6]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e06e      	b.n	8003efe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2221      	movs	r2, #33	@ 0x21
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e2e:	f7fd ffd1 	bl	8001dd4 <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	88fa      	ldrh	r2, [r7, #6]
 8003e38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	88fa      	ldrh	r2, [r7, #6]
 8003e3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e48:	d108      	bne.n	8003e5c <HAL_UART_Transmit+0x6c>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d104      	bne.n	8003e5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	e003      	b.n	8003e64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e64:	e02e      	b.n	8003ec4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2180      	movs	r1, #128	@ 0x80
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f848 	bl	8003f06 <UART_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e03a      	b.n	8003efe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10b      	bne.n	8003ea6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	e007      	b.n	8003eb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1cb      	bne.n	8003e66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2140      	movs	r1, #64	@ 0x40
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f814 	bl	8003f06 <UART_WaitOnFlagUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e006      	b.n	8003efe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e000      	b.n	8003efe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003efc:	2302      	movs	r3, #2
  }
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b086      	sub	sp, #24
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	4613      	mov	r3, r2
 8003f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f16:	e03b      	b.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1e:	d037      	beq.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f20:	f7fd ff58 	bl	8001dd4 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	6a3a      	ldr	r2, [r7, #32]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d302      	bcc.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e03a      	b.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d023      	beq.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b80      	cmp	r3, #128	@ 0x80
 8003f4c:	d020      	beq.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b40      	cmp	r3, #64	@ 0x40
 8003f52:	d01d      	beq.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d116      	bne.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f81d 	bl	8003fb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2208      	movs	r2, #8
 8003f82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e00f      	b.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d0b4      	beq.n	8003f18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b095      	sub	sp, #84	@ 0x54
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fe0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fe6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e5      	bne.n	8003fc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3314      	adds	r3, #20
 8003ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	61fb      	str	r3, [r7, #28]
   return(result);
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3314      	adds	r3, #20
 8004012:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004014:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004016:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800401a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e5      	bne.n	8003ff4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	2b01      	cmp	r3, #1
 800402e:	d119      	bne.n	8004064 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	330c      	adds	r3, #12
 8004036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f023 0310 	bic.w	r3, r3, #16
 8004046:	647b      	str	r3, [r7, #68]	@ 0x44
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004050:	61ba      	str	r2, [r7, #24]
 8004052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6979      	ldr	r1, [r7, #20]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	613b      	str	r3, [r7, #16]
   return(result);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e5      	bne.n	8004030 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004072:	bf00      	nop
 8004074:	3754      	adds	r7, #84	@ 0x54
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004084:	b0c0      	sub	sp, #256	@ 0x100
 8004086:	af00      	add	r7, sp, #0
 8004088:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409c:	68d9      	ldr	r1, [r3, #12]
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	ea40 0301 	orr.w	r3, r0, r1
 80040a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	431a      	orrs	r2, r3
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040d8:	f021 010c 	bic.w	r1, r1, #12
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040e6:	430b      	orrs	r3, r1
 80040e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fa:	6999      	ldr	r1, [r3, #24]
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	ea40 0301 	orr.w	r3, r0, r1
 8004106:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4b8f      	ldr	r3, [pc, #572]	@ (800434c <UART_SetConfig+0x2cc>)
 8004110:	429a      	cmp	r2, r3
 8004112:	d005      	beq.n	8004120 <UART_SetConfig+0xa0>
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4b8d      	ldr	r3, [pc, #564]	@ (8004350 <UART_SetConfig+0x2d0>)
 800411c:	429a      	cmp	r2, r3
 800411e:	d104      	bne.n	800412a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004120:	f7fe fdbe 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 8004124:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004128:	e003      	b.n	8004132 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800412a:	f7fe fda5 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 800412e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800413c:	f040 810c 	bne.w	8004358 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004144:	2200      	movs	r2, #0
 8004146:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800414a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800414e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004152:	4622      	mov	r2, r4
 8004154:	462b      	mov	r3, r5
 8004156:	1891      	adds	r1, r2, r2
 8004158:	65b9      	str	r1, [r7, #88]	@ 0x58
 800415a:	415b      	adcs	r3, r3
 800415c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800415e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004162:	4621      	mov	r1, r4
 8004164:	eb12 0801 	adds.w	r8, r2, r1
 8004168:	4629      	mov	r1, r5
 800416a:	eb43 0901 	adc.w	r9, r3, r1
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800417a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800417e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004182:	4690      	mov	r8, r2
 8004184:	4699      	mov	r9, r3
 8004186:	4623      	mov	r3, r4
 8004188:	eb18 0303 	adds.w	r3, r8, r3
 800418c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004190:	462b      	mov	r3, r5
 8004192:	eb49 0303 	adc.w	r3, r9, r3
 8004196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041ae:	460b      	mov	r3, r1
 80041b0:	18db      	adds	r3, r3, r3
 80041b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80041b4:	4613      	mov	r3, r2
 80041b6:	eb42 0303 	adc.w	r3, r2, r3
 80041ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80041bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041c4:	f7fc fc52 	bl	8000a6c <__aeabi_uldivmod>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4b61      	ldr	r3, [pc, #388]	@ (8004354 <UART_SetConfig+0x2d4>)
 80041ce:	fba3 2302 	umull	r2, r3, r3, r2
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	011c      	lsls	r4, r3, #4
 80041d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041da:	2200      	movs	r2, #0
 80041dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041e8:	4642      	mov	r2, r8
 80041ea:	464b      	mov	r3, r9
 80041ec:	1891      	adds	r1, r2, r2
 80041ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041f0:	415b      	adcs	r3, r3
 80041f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041f8:	4641      	mov	r1, r8
 80041fa:	eb12 0a01 	adds.w	sl, r2, r1
 80041fe:	4649      	mov	r1, r9
 8004200:	eb43 0b01 	adc.w	fp, r3, r1
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004210:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004218:	4692      	mov	sl, r2
 800421a:	469b      	mov	fp, r3
 800421c:	4643      	mov	r3, r8
 800421e:	eb1a 0303 	adds.w	r3, sl, r3
 8004222:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004226:	464b      	mov	r3, r9
 8004228:	eb4b 0303 	adc.w	r3, fp, r3
 800422c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800423c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004240:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004244:	460b      	mov	r3, r1
 8004246:	18db      	adds	r3, r3, r3
 8004248:	643b      	str	r3, [r7, #64]	@ 0x40
 800424a:	4613      	mov	r3, r2
 800424c:	eb42 0303 	adc.w	r3, r2, r3
 8004250:	647b      	str	r3, [r7, #68]	@ 0x44
 8004252:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004256:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800425a:	f7fc fc07 	bl	8000a6c <__aeabi_uldivmod>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4611      	mov	r1, r2
 8004264:	4b3b      	ldr	r3, [pc, #236]	@ (8004354 <UART_SetConfig+0x2d4>)
 8004266:	fba3 2301 	umull	r2, r3, r3, r1
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	2264      	movs	r2, #100	@ 0x64
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	1acb      	subs	r3, r1, r3
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800427a:	4b36      	ldr	r3, [pc, #216]	@ (8004354 <UART_SetConfig+0x2d4>)
 800427c:	fba3 2302 	umull	r2, r3, r3, r2
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004288:	441c      	add	r4, r3
 800428a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004294:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004298:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800429c:	4642      	mov	r2, r8
 800429e:	464b      	mov	r3, r9
 80042a0:	1891      	adds	r1, r2, r2
 80042a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042a4:	415b      	adcs	r3, r3
 80042a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042ac:	4641      	mov	r1, r8
 80042ae:	1851      	adds	r1, r2, r1
 80042b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80042b2:	4649      	mov	r1, r9
 80042b4:	414b      	adcs	r3, r1
 80042b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042c4:	4659      	mov	r1, fp
 80042c6:	00cb      	lsls	r3, r1, #3
 80042c8:	4651      	mov	r1, sl
 80042ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ce:	4651      	mov	r1, sl
 80042d0:	00ca      	lsls	r2, r1, #3
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	4642      	mov	r2, r8
 80042da:	189b      	adds	r3, r3, r2
 80042dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042e0:	464b      	mov	r3, r9
 80042e2:	460a      	mov	r2, r1
 80042e4:	eb42 0303 	adc.w	r3, r2, r3
 80042e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004300:	460b      	mov	r3, r1
 8004302:	18db      	adds	r3, r3, r3
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004306:	4613      	mov	r3, r2
 8004308:	eb42 0303 	adc.w	r3, r2, r3
 800430c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800430e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004312:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004316:	f7fc fba9 	bl	8000a6c <__aeabi_uldivmod>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <UART_SetConfig+0x2d4>)
 8004320:	fba3 1302 	umull	r1, r3, r3, r2
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	2164      	movs	r1, #100	@ 0x64
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	3332      	adds	r3, #50	@ 0x32
 8004332:	4a08      	ldr	r2, [pc, #32]	@ (8004354 <UART_SetConfig+0x2d4>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	f003 0207 	and.w	r2, r3, #7
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4422      	add	r2, r4
 8004346:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004348:	e106      	b.n	8004558 <UART_SetConfig+0x4d8>
 800434a:	bf00      	nop
 800434c:	40011000 	.word	0x40011000
 8004350:	40011400 	.word	0x40011400
 8004354:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800435c:	2200      	movs	r2, #0
 800435e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004362:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004366:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800436a:	4642      	mov	r2, r8
 800436c:	464b      	mov	r3, r9
 800436e:	1891      	adds	r1, r2, r2
 8004370:	6239      	str	r1, [r7, #32]
 8004372:	415b      	adcs	r3, r3
 8004374:	627b      	str	r3, [r7, #36]	@ 0x24
 8004376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800437a:	4641      	mov	r1, r8
 800437c:	1854      	adds	r4, r2, r1
 800437e:	4649      	mov	r1, r9
 8004380:	eb43 0501 	adc.w	r5, r3, r1
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	00eb      	lsls	r3, r5, #3
 800438e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004392:	00e2      	lsls	r2, r4, #3
 8004394:	4614      	mov	r4, r2
 8004396:	461d      	mov	r5, r3
 8004398:	4643      	mov	r3, r8
 800439a:	18e3      	adds	r3, r4, r3
 800439c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043a0:	464b      	mov	r3, r9
 80043a2:	eb45 0303 	adc.w	r3, r5, r3
 80043a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043c6:	4629      	mov	r1, r5
 80043c8:	008b      	lsls	r3, r1, #2
 80043ca:	4621      	mov	r1, r4
 80043cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043d0:	4621      	mov	r1, r4
 80043d2:	008a      	lsls	r2, r1, #2
 80043d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043d8:	f7fc fb48 	bl	8000a6c <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4b60      	ldr	r3, [pc, #384]	@ (8004564 <UART_SetConfig+0x4e4>)
 80043e2:	fba3 2302 	umull	r2, r3, r3, r2
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	011c      	lsls	r4, r3, #4
 80043ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043fc:	4642      	mov	r2, r8
 80043fe:	464b      	mov	r3, r9
 8004400:	1891      	adds	r1, r2, r2
 8004402:	61b9      	str	r1, [r7, #24]
 8004404:	415b      	adcs	r3, r3
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800440c:	4641      	mov	r1, r8
 800440e:	1851      	adds	r1, r2, r1
 8004410:	6139      	str	r1, [r7, #16]
 8004412:	4649      	mov	r1, r9
 8004414:	414b      	adcs	r3, r1
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004424:	4659      	mov	r1, fp
 8004426:	00cb      	lsls	r3, r1, #3
 8004428:	4651      	mov	r1, sl
 800442a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800442e:	4651      	mov	r1, sl
 8004430:	00ca      	lsls	r2, r1, #3
 8004432:	4610      	mov	r0, r2
 8004434:	4619      	mov	r1, r3
 8004436:	4603      	mov	r3, r0
 8004438:	4642      	mov	r2, r8
 800443a:	189b      	adds	r3, r3, r2
 800443c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004440:	464b      	mov	r3, r9
 8004442:	460a      	mov	r2, r1
 8004444:	eb42 0303 	adc.w	r3, r2, r3
 8004448:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004456:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004464:	4649      	mov	r1, r9
 8004466:	008b      	lsls	r3, r1, #2
 8004468:	4641      	mov	r1, r8
 800446a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800446e:	4641      	mov	r1, r8
 8004470:	008a      	lsls	r2, r1, #2
 8004472:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004476:	f7fc faf9 	bl	8000a6c <__aeabi_uldivmod>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4611      	mov	r1, r2
 8004480:	4b38      	ldr	r3, [pc, #224]	@ (8004564 <UART_SetConfig+0x4e4>)
 8004482:	fba3 2301 	umull	r2, r3, r3, r1
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	2264      	movs	r2, #100	@ 0x64
 800448a:	fb02 f303 	mul.w	r3, r2, r3
 800448e:	1acb      	subs	r3, r1, r3
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	3332      	adds	r3, #50	@ 0x32
 8004494:	4a33      	ldr	r2, [pc, #204]	@ (8004564 <UART_SetConfig+0x4e4>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044a0:	441c      	add	r4, r3
 80044a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a6:	2200      	movs	r2, #0
 80044a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80044aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80044ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044b0:	4642      	mov	r2, r8
 80044b2:	464b      	mov	r3, r9
 80044b4:	1891      	adds	r1, r2, r2
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	415b      	adcs	r3, r3
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044c0:	4641      	mov	r1, r8
 80044c2:	1851      	adds	r1, r2, r1
 80044c4:	6039      	str	r1, [r7, #0]
 80044c6:	4649      	mov	r1, r9
 80044c8:	414b      	adcs	r3, r1
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044d8:	4659      	mov	r1, fp
 80044da:	00cb      	lsls	r3, r1, #3
 80044dc:	4651      	mov	r1, sl
 80044de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e2:	4651      	mov	r1, sl
 80044e4:	00ca      	lsls	r2, r1, #3
 80044e6:	4610      	mov	r0, r2
 80044e8:	4619      	mov	r1, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	4642      	mov	r2, r8
 80044ee:	189b      	adds	r3, r3, r2
 80044f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044f2:	464b      	mov	r3, r9
 80044f4:	460a      	mov	r2, r1
 80044f6:	eb42 0303 	adc.w	r3, r2, r3
 80044fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	663b      	str	r3, [r7, #96]	@ 0x60
 8004506:	667a      	str	r2, [r7, #100]	@ 0x64
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004514:	4649      	mov	r1, r9
 8004516:	008b      	lsls	r3, r1, #2
 8004518:	4641      	mov	r1, r8
 800451a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800451e:	4641      	mov	r1, r8
 8004520:	008a      	lsls	r2, r1, #2
 8004522:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004526:	f7fc faa1 	bl	8000a6c <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4b0d      	ldr	r3, [pc, #52]	@ (8004564 <UART_SetConfig+0x4e4>)
 8004530:	fba3 1302 	umull	r1, r3, r3, r2
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	2164      	movs	r1, #100	@ 0x64
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	3332      	adds	r3, #50	@ 0x32
 8004542:	4a08      	ldr	r2, [pc, #32]	@ (8004564 <UART_SetConfig+0x4e4>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	f003 020f 	and.w	r2, r3, #15
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4422      	add	r2, r4
 8004556:	609a      	str	r2, [r3, #8]
}
 8004558:	bf00      	nop
 800455a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800455e:	46bd      	mov	sp, r7
 8004560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004564:	51eb851f 	.word	0x51eb851f

08004568 <__NVIC_SetPriority>:
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004578:	2b00      	cmp	r3, #0
 800457a:	db0a      	blt.n	8004592 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	b2da      	uxtb	r2, r3
 8004580:	490c      	ldr	r1, [pc, #48]	@ (80045b4 <__NVIC_SetPriority+0x4c>)
 8004582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004586:	0112      	lsls	r2, r2, #4
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	440b      	add	r3, r1
 800458c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004590:	e00a      	b.n	80045a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	4908      	ldr	r1, [pc, #32]	@ (80045b8 <__NVIC_SetPriority+0x50>)
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	3b04      	subs	r3, #4
 80045a0:	0112      	lsls	r2, r2, #4
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	440b      	add	r3, r1
 80045a6:	761a      	strb	r2, [r3, #24]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	e000e100 	.word	0xe000e100
 80045b8:	e000ed00 	.word	0xe000ed00

080045bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045c0:	4b05      	ldr	r3, [pc, #20]	@ (80045d8 <SysTick_Handler+0x1c>)
 80045c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045c4:	f001 fd18 	bl	8005ff8 <xTaskGetSchedulerState>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d001      	beq.n	80045d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045ce:	f002 fb13 	bl	8006bf8 <xPortSysTickHandler>
  }
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	e000e010 	.word	0xe000e010

080045dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045e0:	2100      	movs	r1, #0
 80045e2:	f06f 0004 	mvn.w	r0, #4
 80045e6:	f7ff ffbf 	bl	8004568 <__NVIC_SetPriority>
#endif
}
 80045ea:	bf00      	nop
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f6:	f3ef 8305 	mrs	r3, IPSR
 80045fa:	603b      	str	r3, [r7, #0]
  return(result);
 80045fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004602:	f06f 0305 	mvn.w	r3, #5
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	e00c      	b.n	8004624 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800460a:	4b0a      	ldr	r3, [pc, #40]	@ (8004634 <osKernelInitialize+0x44>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d105      	bne.n	800461e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004612:	4b08      	ldr	r3, [pc, #32]	@ (8004634 <osKernelInitialize+0x44>)
 8004614:	2201      	movs	r2, #1
 8004616:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004618:	2300      	movs	r3, #0
 800461a:	607b      	str	r3, [r7, #4]
 800461c:	e002      	b.n	8004624 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800461e:	f04f 33ff 	mov.w	r3, #4294967295
 8004622:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004624:	687b      	ldr	r3, [r7, #4]
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000338 	.word	0x20000338

08004638 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800463e:	f3ef 8305 	mrs	r3, IPSR
 8004642:	603b      	str	r3, [r7, #0]
  return(result);
 8004644:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <osKernelStart+0x1a>
    stat = osErrorISR;
 800464a:	f06f 0305 	mvn.w	r3, #5
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	e010      	b.n	8004674 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004652:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <osKernelStart+0x48>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d109      	bne.n	800466e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800465a:	f7ff ffbf 	bl	80045dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800465e:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <osKernelStart+0x48>)
 8004660:	2202      	movs	r2, #2
 8004662:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004664:	f001 f87a 	bl	800575c <vTaskStartScheduler>
      stat = osOK;
 8004668:	2300      	movs	r3, #0
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	e002      	b.n	8004674 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800466e:	f04f 33ff 	mov.w	r3, #4294967295
 8004672:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004674:	687b      	ldr	r3, [r7, #4]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000338 	.word	0x20000338

08004684 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b08e      	sub	sp, #56	@ 0x38
 8004688:	af04      	add	r7, sp, #16
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004690:	2300      	movs	r3, #0
 8004692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004694:	f3ef 8305 	mrs	r3, IPSR
 8004698:	617b      	str	r3, [r7, #20]
  return(result);
 800469a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800469c:	2b00      	cmp	r3, #0
 800469e:	d17e      	bne.n	800479e <osThreadNew+0x11a>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d07b      	beq.n	800479e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046a6:	2380      	movs	r3, #128	@ 0x80
 80046a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046aa:	2318      	movs	r3, #24
 80046ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80046b2:	f04f 33ff 	mov.w	r3, #4294967295
 80046b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d045      	beq.n	800474a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <osThreadNew+0x48>
        name = attr->name;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <osThreadNew+0x6e>
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	2b38      	cmp	r3, #56	@ 0x38
 80046e4:	d805      	bhi.n	80046f2 <osThreadNew+0x6e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <osThreadNew+0x72>
        return (NULL);
 80046f2:	2300      	movs	r3, #0
 80046f4:	e054      	b.n	80047a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00e      	beq.n	800472c <osThreadNew+0xa8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	2b5b      	cmp	r3, #91	@ 0x5b
 8004714:	d90a      	bls.n	800472c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800471a:	2b00      	cmp	r3, #0
 800471c:	d006      	beq.n	800472c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <osThreadNew+0xa8>
        mem = 1;
 8004726:	2301      	movs	r3, #1
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	e010      	b.n	800474e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10c      	bne.n	800474e <osThreadNew+0xca>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d108      	bne.n	800474e <osThreadNew+0xca>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d104      	bne.n	800474e <osThreadNew+0xca>
          mem = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	e001      	b.n	800474e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d110      	bne.n	8004776 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800475c:	9202      	str	r2, [sp, #8]
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	6a3a      	ldr	r2, [r7, #32]
 8004768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 fe1a 	bl	80053a4 <xTaskCreateStatic>
 8004770:	4603      	mov	r3, r0
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	e013      	b.n	800479e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d110      	bne.n	800479e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	b29a      	uxth	r2, r3
 8004780:	f107 0310 	add.w	r3, r7, #16
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fe68 	bl	8005464 <xTaskCreate>
 8004794:	4603      	mov	r3, r0
 8004796:	2b01      	cmp	r3, #1
 8004798:	d001      	beq.n	800479e <osThreadNew+0x11a>
            hTask = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800479e:	693b      	ldr	r3, [r7, #16]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3728      	adds	r7, #40	@ 0x28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047b0:	f3ef 8305 	mrs	r3, IPSR
 80047b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80047b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <osDelay+0x1c>
    stat = osErrorISR;
 80047bc:	f06f 0305 	mvn.w	r3, #5
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	e007      	b.n	80047d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 ff8e 	bl	80056f0 <vTaskDelay>
    }
  }

  return (stat);
 80047d4:	68fb      	ldr	r3, [r7, #12]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a07      	ldr	r2, [pc, #28]	@ (800480c <vApplicationGetIdleTaskMemory+0x2c>)
 80047f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4a06      	ldr	r2, [pc, #24]	@ (8004810 <vApplicationGetIdleTaskMemory+0x30>)
 80047f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2280      	movs	r2, #128	@ 0x80
 80047fc:	601a      	str	r2, [r3, #0]
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	2000033c 	.word	0x2000033c
 8004810:	20000398 	.word	0x20000398

08004814 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a07      	ldr	r2, [pc, #28]	@ (8004840 <vApplicationGetTimerTaskMemory+0x2c>)
 8004824:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4a06      	ldr	r2, [pc, #24]	@ (8004844 <vApplicationGetTimerTaskMemory+0x30>)
 800482a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004832:	601a      	str	r2, [r3, #0]
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	20000598 	.word	0x20000598
 8004844:	200005f4 	.word	0x200005f4

08004848 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f103 0208 	add.w	r2, r3, #8
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f04f 32ff 	mov.w	r2, #4294967295
 8004860:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f103 0208 	add.w	r2, r3, #8
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f103 0208 	add.w	r2, r3, #8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	601a      	str	r2, [r3, #0]
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d103      	bne.n	800490a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e00c      	b.n	8004924 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3308      	adds	r3, #8
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	e002      	b.n	8004918 <vListInsert+0x2e>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	429a      	cmp	r2, r3
 8004922:	d2f6      	bcs.n	8004912 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	601a      	str	r2, [r3, #0]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6892      	ldr	r2, [r2, #8]
 8004972:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6852      	ldr	r2, [r2, #4]
 800497c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	d103      	bne.n	8004990 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	1e5a      	subs	r2, r3, #1
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049d6:	bf00      	nop
 80049d8:	bf00      	nop
 80049da:	e7fd      	b.n	80049d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049dc:	f002 f87c 	bl	8006ad8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	441a      	add	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	68f9      	ldr	r1, [r7, #12]
 8004a10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	441a      	add	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	22ff      	movs	r2, #255	@ 0xff
 8004a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	22ff      	movs	r2, #255	@ 0xff
 8004a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d114      	bne.n	8004a5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d01a      	beq.n	8004a70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3310      	adds	r3, #16
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f001 f91a 	bl	8005c78 <xTaskRemoveFromEventList>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d012      	beq.n	8004a70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a80 <xQueueGenericReset+0xd0>)
 8004a4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	e009      	b.n	8004a70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3310      	adds	r3, #16
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fef1 	bl	8004848 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3324      	adds	r3, #36	@ 0x24
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff feec 	bl	8004848 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a70:	f002 f864 	bl	8006b3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a74:	2301      	movs	r3, #1
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	e000ed04 	.word	0xe000ed04

08004a84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08e      	sub	sp, #56	@ 0x38
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	e7fd      	b.n	8004aac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	e7fd      	b.n	8004aca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <xQueueGenericCreateStatic+0x56>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <xQueueGenericCreateStatic+0x5a>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <xQueueGenericCreateStatic+0x5c>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	623b      	str	r3, [r7, #32]
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	e7fd      	b.n	8004af8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d102      	bne.n	8004b08 <xQueueGenericCreateStatic+0x84>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <xQueueGenericCreateStatic+0x88>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <xQueueGenericCreateStatic+0x8a>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10b      	bne.n	8004b2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	61fb      	str	r3, [r7, #28]
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop
 8004b28:	e7fd      	b.n	8004b26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b2a:	2350      	movs	r3, #80	@ 0x50
 8004b2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b50      	cmp	r3, #80	@ 0x50
 8004b32:	d00b      	beq.n	8004b4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	61bb      	str	r3, [r7, #24]
}
 8004b46:	bf00      	nop
 8004b48:	bf00      	nop
 8004b4a:	e7fd      	b.n	8004b48 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00d      	beq.n	8004b74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f805 	bl	8004b7e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3730      	adds	r7, #48	@ 0x30
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d103      	bne.n	8004b9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e002      	b.n	8004ba0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bac:	2101      	movs	r1, #1
 8004bae:	69b8      	ldr	r0, [r7, #24]
 8004bb0:	f7ff fefe 	bl	80049b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bbc:	bf00      	nop
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08e      	sub	sp, #56	@ 0x38
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10b      	bne.n	8004bf8 <xQueueGenericSend+0x34>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bf2:	bf00      	nop
 8004bf4:	bf00      	nop
 8004bf6:	e7fd      	b.n	8004bf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <xQueueGenericSend+0x42>
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <xQueueGenericSend+0x46>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <xQueueGenericSend+0x48>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10b      	bne.n	8004c28 <xQueueGenericSend+0x64>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c22:	bf00      	nop
 8004c24:	bf00      	nop
 8004c26:	e7fd      	b.n	8004c24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d103      	bne.n	8004c36 <xQueueGenericSend+0x72>
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <xQueueGenericSend+0x76>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <xQueueGenericSend+0x78>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10b      	bne.n	8004c58 <xQueueGenericSend+0x94>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	623b      	str	r3, [r7, #32]
}
 8004c52:	bf00      	nop
 8004c54:	bf00      	nop
 8004c56:	e7fd      	b.n	8004c54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c58:	f001 f9ce 	bl	8005ff8 <xTaskGetSchedulerState>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <xQueueGenericSend+0xa4>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <xQueueGenericSend+0xa8>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <xQueueGenericSend+0xaa>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10b      	bne.n	8004c8a <xQueueGenericSend+0xc6>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	61fb      	str	r3, [r7, #28]
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	e7fd      	b.n	8004c86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c8a:	f001 ff25 	bl	8006ad8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d302      	bcc.n	8004ca0 <xQueueGenericSend+0xdc>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d129      	bne.n	8004cf4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ca6:	f000 fa0f 	bl	80050c8 <prvCopyDataToQueue>
 8004caa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d010      	beq.n	8004cd6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb6:	3324      	adds	r3, #36	@ 0x24
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 ffdd 	bl	8005c78 <xTaskRemoveFromEventList>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d013      	beq.n	8004cec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004cc4:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc4 <xQueueGenericSend+0x200>)
 8004cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	e00a      	b.n	8004cec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004cdc:	4b39      	ldr	r3, [pc, #228]	@ (8004dc4 <xQueueGenericSend+0x200>)
 8004cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cec:	f001 ff26 	bl	8006b3c <vPortExitCritical>
				return pdPASS;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e063      	b.n	8004dbc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d103      	bne.n	8004d02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cfa:	f001 ff1f 	bl	8006b3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e05c      	b.n	8004dbc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d08:	f107 0314 	add.w	r3, r7, #20
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 f817 	bl	8005d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d12:	2301      	movs	r3, #1
 8004d14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d16:	f001 ff11 	bl	8006b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d1a:	f000 fd87 	bl	800582c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d1e:	f001 fedb 	bl	8006ad8 <vPortEnterCritical>
 8004d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d28:	b25b      	sxtb	r3, r3
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2e:	d103      	bne.n	8004d38 <xQueueGenericSend+0x174>
 8004d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d3e:	b25b      	sxtb	r3, r3
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d103      	bne.n	8004d4e <xQueueGenericSend+0x18a>
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d4e:	f001 fef5 	bl	8006b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d52:	1d3a      	adds	r2, r7, #4
 8004d54:	f107 0314 	add.w	r3, r7, #20
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 f806 	bl	8005d6c <xTaskCheckForTimeOut>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d124      	bne.n	8004db0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d68:	f000 faa6 	bl	80052b8 <prvIsQueueFull>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d018      	beq.n	8004da4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	3310      	adds	r3, #16
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 ff2a 	bl	8005bd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d82:	f000 fa31 	bl	80051e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d86:	f000 fd5f 	bl	8005848 <xTaskResumeAll>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f47f af7c 	bne.w	8004c8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004d92:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <xQueueGenericSend+0x200>)
 8004d94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	e772      	b.n	8004c8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004da4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004da6:	f000 fa1f 	bl	80051e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004daa:	f000 fd4d 	bl	8005848 <xTaskResumeAll>
 8004dae:	e76c      	b.n	8004c8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004db0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004db2:	f000 fa19 	bl	80051e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004db6:	f000 fd47 	bl	8005848 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004dba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3738      	adds	r7, #56	@ 0x38
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b090      	sub	sp, #64	@ 0x40
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10b      	bne.n	8004df8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004df2:	bf00      	nop
 8004df4:	bf00      	nop
 8004df6:	e7fd      	b.n	8004df4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <xQueueGenericSendFromISR+0x3e>
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <xQueueGenericSendFromISR+0x42>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <xQueueGenericSendFromISR+0x44>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e22:	bf00      	nop
 8004e24:	bf00      	nop
 8004e26:	e7fd      	b.n	8004e24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d103      	bne.n	8004e36 <xQueueGenericSendFromISR+0x6e>
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <xQueueGenericSendFromISR+0x72>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <xQueueGenericSendFromISR+0x74>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	623b      	str	r3, [r7, #32]
}
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	e7fd      	b.n	8004e54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e58:	f001 ff1e 	bl	8006c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e5c:	f3ef 8211 	mrs	r2, BASEPRI
 8004e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	61fa      	str	r2, [r7, #28]
 8004e72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d302      	bcc.n	8004e8a <xQueueGenericSendFromISR+0xc2>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d12f      	bne.n	8004eea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ea0:	f000 f912 	bl	80050c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ea4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eac:	d112      	bne.n	8004ed4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d016      	beq.n	8004ee4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb8:	3324      	adds	r3, #36	@ 0x24
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fedc 	bl	8005c78 <xTaskRemoveFromEventList>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00e      	beq.n	8004ee4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00b      	beq.n	8004ee4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e007      	b.n	8004ee4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004ed8:	3301      	adds	r3, #1
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	b25a      	sxtb	r2, r3
 8004ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004ee8:	e001      	b.n	8004eee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ef8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3740      	adds	r7, #64	@ 0x40
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08c      	sub	sp, #48	@ 0x30
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f10:	2300      	movs	r3, #0
 8004f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <xQueueReceive+0x32>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	623b      	str	r3, [r7, #32]
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	e7fd      	b.n	8004f32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d103      	bne.n	8004f44 <xQueueReceive+0x40>
 8004f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <xQueueReceive+0x44>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <xQueueReceive+0x46>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <xQueueReceive+0x62>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	61fb      	str	r3, [r7, #28]
}
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	e7fd      	b.n	8004f62 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f66:	f001 f847 	bl	8005ff8 <xTaskGetSchedulerState>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <xQueueReceive+0x72>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <xQueueReceive+0x76>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <xQueueReceive+0x78>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10b      	bne.n	8004f98 <xQueueReceive+0x94>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	61bb      	str	r3, [r7, #24]
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f98:	f001 fd9e 	bl	8006ad8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01f      	beq.n	8004fe8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fac:	f000 f8f6 	bl	800519c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb2:	1e5a      	subs	r2, r3, #1
 8004fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00f      	beq.n	8004fe0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc2:	3310      	adds	r3, #16
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fe57 	bl	8005c78 <xTaskRemoveFromEventList>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d007      	beq.n	8004fe0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80050c4 <xQueueReceive+0x1c0>)
 8004fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fe0:	f001 fdac 	bl	8006b3c <vPortExitCritical>
				return pdPASS;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e069      	b.n	80050bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fee:	f001 fda5 	bl	8006b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e062      	b.n	80050bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d106      	bne.n	800500a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ffc:	f107 0310 	add.w	r3, r7, #16
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fe9d 	bl	8005d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005006:	2301      	movs	r3, #1
 8005008:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800500a:	f001 fd97 	bl	8006b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800500e:	f000 fc0d 	bl	800582c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005012:	f001 fd61 	bl	8006ad8 <vPortEnterCritical>
 8005016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800501c:	b25b      	sxtb	r3, r3
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005022:	d103      	bne.n	800502c <xQueueReceive+0x128>
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005032:	b25b      	sxtb	r3, r3
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d103      	bne.n	8005042 <xQueueReceive+0x13e>
 800503a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005042:	f001 fd7b 	bl	8006b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005046:	1d3a      	adds	r2, r7, #4
 8005048:	f107 0310 	add.w	r3, r7, #16
 800504c:	4611      	mov	r1, r2
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fe8c 	bl	8005d6c <xTaskCheckForTimeOut>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d123      	bne.n	80050a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800505a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800505c:	f000 f916 	bl	800528c <prvIsQueueEmpty>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d017      	beq.n	8005096 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005068:	3324      	adds	r3, #36	@ 0x24
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	4611      	mov	r1, r2
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fdb0 	bl	8005bd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005074:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005076:	f000 f8b7 	bl	80051e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800507a:	f000 fbe5 	bl	8005848 <xTaskResumeAll>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d189      	bne.n	8004f98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005084:	4b0f      	ldr	r3, [pc, #60]	@ (80050c4 <xQueueReceive+0x1c0>)
 8005086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	e780      	b.n	8004f98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005096:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005098:	f000 f8a6 	bl	80051e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800509c:	f000 fbd4 	bl	8005848 <xTaskResumeAll>
 80050a0:	e77a      	b.n	8004f98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050a4:	f000 f8a0 	bl	80051e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050a8:	f000 fbce 	bl	8005848 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050ae:	f000 f8ed 	bl	800528c <prvIsQueueEmpty>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f43f af6f 	beq.w	8004f98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3730      	adds	r7, #48	@ 0x30
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10d      	bne.n	8005102 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d14d      	bne.n	800518a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 ff9e 	bl	8006034 <xTaskPriorityDisinherit>
 80050f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	609a      	str	r2, [r3, #8]
 8005100:	e043      	b.n	800518a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d119      	bne.n	800513c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6858      	ldr	r0, [r3, #4]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	461a      	mov	r2, r3
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	f002 f844 	bl	80071a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005120:	441a      	add	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	d32b      	bcc.n	800518a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	e026      	b.n	800518a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	68d8      	ldr	r0, [r3, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005144:	461a      	mov	r2, r3
 8005146:	68b9      	ldr	r1, [r7, #8]
 8005148:	f002 f82a 	bl	80071a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005154:	425b      	negs	r3, r3
 8005156:	441a      	add	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d207      	bcs.n	8005178 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005170:	425b      	negs	r3, r3
 8005172:	441a      	add	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d105      	bne.n	800518a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	3b01      	subs	r3, #1
 8005188:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005192:	697b      	ldr	r3, [r7, #20]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d018      	beq.n	80051e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	441a      	add	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d303      	bcc.n	80051d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68d9      	ldr	r1, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	461a      	mov	r2, r3
 80051da:	6838      	ldr	r0, [r7, #0]
 80051dc:	f001 ffe0 	bl	80071a0 <memcpy>
	}
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051f0:	f001 fc72 	bl	8006ad8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051fc:	e011      	b.n	8005222 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	2b00      	cmp	r3, #0
 8005204:	d012      	beq.n	800522c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3324      	adds	r3, #36	@ 0x24
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fd34 	bl	8005c78 <xTaskRemoveFromEventList>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005216:	f000 fe0d 	bl	8005e34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
 800521c:	3b01      	subs	r3, #1
 800521e:	b2db      	uxtb	r3, r3
 8005220:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005226:	2b00      	cmp	r3, #0
 8005228:	dce9      	bgt.n	80051fe <prvUnlockQueue+0x16>
 800522a:	e000      	b.n	800522e <prvUnlockQueue+0x46>
					break;
 800522c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	22ff      	movs	r2, #255	@ 0xff
 8005232:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005236:	f001 fc81 	bl	8006b3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800523a:	f001 fc4d 	bl	8006ad8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005244:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005246:	e011      	b.n	800526c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d012      	beq.n	8005276 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3310      	adds	r3, #16
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fd0f 	bl	8005c78 <xTaskRemoveFromEventList>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005260:	f000 fde8 	bl	8005e34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005264:	7bbb      	ldrb	r3, [r7, #14]
 8005266:	3b01      	subs	r3, #1
 8005268:	b2db      	uxtb	r3, r3
 800526a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800526c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005270:	2b00      	cmp	r3, #0
 8005272:	dce9      	bgt.n	8005248 <prvUnlockQueue+0x60>
 8005274:	e000      	b.n	8005278 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005276:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	22ff      	movs	r2, #255	@ 0xff
 800527c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005280:	f001 fc5c 	bl	8006b3c <vPortExitCritical>
}
 8005284:	bf00      	nop
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005294:	f001 fc20 	bl	8006ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	2b00      	cmp	r3, #0
 800529e:	d102      	bne.n	80052a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052a0:	2301      	movs	r3, #1
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e001      	b.n	80052aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052aa:	f001 fc47 	bl	8006b3c <vPortExitCritical>

	return xReturn;
 80052ae:	68fb      	ldr	r3, [r7, #12]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052c0:	f001 fc0a 	bl	8006ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d102      	bne.n	80052d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052d0:	2301      	movs	r3, #1
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	e001      	b.n	80052da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052da:	f001 fc2f 	bl	8006b3c <vPortExitCritical>

	return xReturn;
 80052de:	68fb      	ldr	r3, [r7, #12]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	e014      	b.n	8005322 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052f8:	4a0f      	ldr	r2, [pc, #60]	@ (8005338 <vQueueAddToRegistry+0x50>)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10b      	bne.n	800531c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005304:	490c      	ldr	r1, [pc, #48]	@ (8005338 <vQueueAddToRegistry+0x50>)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800530e:	4a0a      	ldr	r2, [pc, #40]	@ (8005338 <vQueueAddToRegistry+0x50>)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800531a:	e006      	b.n	800532a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3301      	adds	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b07      	cmp	r3, #7
 8005326:	d9e7      	bls.n	80052f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	200009f4 	.word	0x200009f4

0800533c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800534c:	f001 fbc4 	bl	8006ad8 <vPortEnterCritical>
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005356:	b25b      	sxtb	r3, r3
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d103      	bne.n	8005366 <vQueueWaitForMessageRestricted+0x2a>
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800536c:	b25b      	sxtb	r3, r3
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d103      	bne.n	800537c <vQueueWaitForMessageRestricted+0x40>
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800537c:	f001 fbde 	bl	8006b3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	2b00      	cmp	r3, #0
 8005386:	d106      	bne.n	8005396 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	3324      	adds	r3, #36	@ 0x24
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	4618      	mov	r0, r3
 8005392:	f000 fc45 	bl	8005c20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005396:	6978      	ldr	r0, [r7, #20]
 8005398:	f7ff ff26 	bl	80051e8 <prvUnlockQueue>
	}
 800539c:	bf00      	nop
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08e      	sub	sp, #56	@ 0x38
 80053a8:	af04      	add	r7, sp, #16
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10b      	bne.n	80053d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	623b      	str	r3, [r7, #32]
}
 80053ca:	bf00      	nop
 80053cc:	bf00      	nop
 80053ce:	e7fd      	b.n	80053cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10b      	bne.n	80053ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	61fb      	str	r3, [r7, #28]
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	e7fd      	b.n	80053ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053ee:	235c      	movs	r3, #92	@ 0x5c
 80053f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80053f6:	d00b      	beq.n	8005410 <xTaskCreateStatic+0x6c>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	61bb      	str	r3, [r7, #24]
}
 800540a:	bf00      	nop
 800540c:	bf00      	nop
 800540e:	e7fd      	b.n	800540c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005410:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01e      	beq.n	8005456 <xTaskCreateStatic+0xb2>
 8005418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01b      	beq.n	8005456 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800541e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005420:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005430:	2300      	movs	r3, #0
 8005432:	9303      	str	r3, [sp, #12]
 8005434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005436:	9302      	str	r3, [sp, #8]
 8005438:	f107 0314 	add.w	r3, r7, #20
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f850 	bl	80054ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800544e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005450:	f000 f8de 	bl	8005610 <prvAddNewTaskToReadyList>
 8005454:	e001      	b.n	800545a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800545a:	697b      	ldr	r3, [r7, #20]
	}
 800545c:	4618      	mov	r0, r3
 800545e:	3728      	adds	r7, #40	@ 0x28
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08c      	sub	sp, #48	@ 0x30
 8005468:	af04      	add	r7, sp, #16
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	4613      	mov	r3, r2
 8005472:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005474:	88fb      	ldrh	r3, [r7, #6]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4618      	mov	r0, r3
 800547a:	f001 fc4f 	bl	8006d1c <pvPortMalloc>
 800547e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00e      	beq.n	80054a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005486:	205c      	movs	r0, #92	@ 0x5c
 8005488:	f001 fc48 	bl	8006d1c <pvPortMalloc>
 800548c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	631a      	str	r2, [r3, #48]	@ 0x30
 800549a:	e005      	b.n	80054a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800549c:	6978      	ldr	r0, [r7, #20]
 800549e:	f001 fd0b 	bl	8006eb8 <vPortFree>
 80054a2:	e001      	b.n	80054a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d017      	beq.n	80054de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	2300      	movs	r3, #0
 80054ba:	9303      	str	r3, [sp, #12]
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	9302      	str	r3, [sp, #8]
 80054c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f80e 	bl	80054ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054d2:	69f8      	ldr	r0, [r7, #28]
 80054d4:	f000 f89c 	bl	8005610 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054d8:	2301      	movs	r3, #1
 80054da:	61bb      	str	r3, [r7, #24]
 80054dc:	e002      	b.n	80054e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054de:	f04f 33ff 	mov.w	r3, #4294967295
 80054e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054e4:	69bb      	ldr	r3, [r7, #24]
	}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3720      	adds	r7, #32
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b088      	sub	sp, #32
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	461a      	mov	r2, r3
 8005506:	21a5      	movs	r1, #165	@ 0xa5
 8005508:	f001 fe16 	bl	8007138 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005516:	3b01      	subs	r3, #1
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f023 0307 	bic.w	r3, r3, #7
 8005524:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00b      	beq.n	8005548 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	617b      	str	r3, [r7, #20]
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	e7fd      	b.n	8005544 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d01f      	beq.n	800558e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
 8005552:	e012      	b.n	800557a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4413      	add	r3, r2
 800555a:	7819      	ldrb	r1, [r3, #0]
 800555c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	3334      	adds	r3, #52	@ 0x34
 8005564:	460a      	mov	r2, r1
 8005566:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d006      	beq.n	8005582 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	3301      	adds	r3, #1
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	2b0f      	cmp	r3, #15
 800557e:	d9e9      	bls.n	8005554 <prvInitialiseNewTask+0x66>
 8005580:	e000      	b.n	8005584 <prvInitialiseNewTask+0x96>
			{
				break;
 8005582:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800558c:	e003      	b.n	8005596 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800558e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005598:	2b37      	cmp	r3, #55	@ 0x37
 800559a:	d901      	bls.n	80055a0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800559c:	2337      	movs	r3, #55	@ 0x37
 800559e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055aa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ae:	2200      	movs	r2, #0
 80055b0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	3304      	adds	r3, #4
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff f966 	bl	8004888 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055be:	3318      	adds	r3, #24
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff f961 	bl	8004888 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055da:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055de:	2200      	movs	r2, #0
 80055e0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	68f9      	ldr	r1, [r7, #12]
 80055ee:	69b8      	ldr	r0, [r7, #24]
 80055f0:	f001 f93e 	bl	8006870 <pxPortInitialiseStack>
 80055f4:	4602      	mov	r2, r0
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005606:	bf00      	nop
 8005608:	3720      	adds	r7, #32
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005618:	f001 fa5e 	bl	8006ad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800561c:	4b2d      	ldr	r3, [pc, #180]	@ (80056d4 <prvAddNewTaskToReadyList+0xc4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3301      	adds	r3, #1
 8005622:	4a2c      	ldr	r2, [pc, #176]	@ (80056d4 <prvAddNewTaskToReadyList+0xc4>)
 8005624:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005626:	4b2c      	ldr	r3, [pc, #176]	@ (80056d8 <prvAddNewTaskToReadyList+0xc8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800562e:	4a2a      	ldr	r2, [pc, #168]	@ (80056d8 <prvAddNewTaskToReadyList+0xc8>)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005634:	4b27      	ldr	r3, [pc, #156]	@ (80056d4 <prvAddNewTaskToReadyList+0xc4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d110      	bne.n	800565e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800563c:	f000 fc1e 	bl	8005e7c <prvInitialiseTaskLists>
 8005640:	e00d      	b.n	800565e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005642:	4b26      	ldr	r3, [pc, #152]	@ (80056dc <prvAddNewTaskToReadyList+0xcc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800564a:	4b23      	ldr	r3, [pc, #140]	@ (80056d8 <prvAddNewTaskToReadyList+0xc8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	429a      	cmp	r2, r3
 8005656:	d802      	bhi.n	800565e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005658:	4a1f      	ldr	r2, [pc, #124]	@ (80056d8 <prvAddNewTaskToReadyList+0xc8>)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800565e:	4b20      	ldr	r3, [pc, #128]	@ (80056e0 <prvAddNewTaskToReadyList+0xd0>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3301      	adds	r3, #1
 8005664:	4a1e      	ldr	r2, [pc, #120]	@ (80056e0 <prvAddNewTaskToReadyList+0xd0>)
 8005666:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005668:	4b1d      	ldr	r3, [pc, #116]	@ (80056e0 <prvAddNewTaskToReadyList+0xd0>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005674:	4b1b      	ldr	r3, [pc, #108]	@ (80056e4 <prvAddNewTaskToReadyList+0xd4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d903      	bls.n	8005684 <prvAddNewTaskToReadyList+0x74>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005680:	4a18      	ldr	r2, [pc, #96]	@ (80056e4 <prvAddNewTaskToReadyList+0xd4>)
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4a15      	ldr	r2, [pc, #84]	@ (80056e8 <prvAddNewTaskToReadyList+0xd8>)
 8005692:	441a      	add	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3304      	adds	r3, #4
 8005698:	4619      	mov	r1, r3
 800569a:	4610      	mov	r0, r2
 800569c:	f7ff f901 	bl	80048a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056a0:	f001 fa4c 	bl	8006b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056a4:	4b0d      	ldr	r3, [pc, #52]	@ (80056dc <prvAddNewTaskToReadyList+0xcc>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00e      	beq.n	80056ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056ac:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <prvAddNewTaskToReadyList+0xc8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d207      	bcs.n	80056ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056ba:	4b0c      	ldr	r3, [pc, #48]	@ (80056ec <prvAddNewTaskToReadyList+0xdc>)
 80056bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000f08 	.word	0x20000f08
 80056d8:	20000a34 	.word	0x20000a34
 80056dc:	20000f14 	.word	0x20000f14
 80056e0:	20000f24 	.word	0x20000f24
 80056e4:	20000f10 	.word	0x20000f10
 80056e8:	20000a38 	.word	0x20000a38
 80056ec:	e000ed04 	.word	0xe000ed04

080056f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d018      	beq.n	8005734 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005702:	4b14      	ldr	r3, [pc, #80]	@ (8005754 <vTaskDelay+0x64>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <vTaskDelay+0x32>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	60bb      	str	r3, [r7, #8]
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	e7fd      	b.n	800571e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005722:	f000 f883 	bl	800582c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005726:	2100      	movs	r1, #0
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fcf3 	bl	8006114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800572e:	f000 f88b 	bl	8005848 <xTaskResumeAll>
 8005732:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d107      	bne.n	800574a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800573a:	4b07      	ldr	r3, [pc, #28]	@ (8005758 <vTaskDelay+0x68>)
 800573c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000f30 	.word	0x20000f30
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08a      	sub	sp, #40	@ 0x28
 8005760:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800576a:	463a      	mov	r2, r7
 800576c:	1d39      	adds	r1, r7, #4
 800576e:	f107 0308 	add.w	r3, r7, #8
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff f834 	bl	80047e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	9202      	str	r2, [sp, #8]
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	2300      	movs	r3, #0
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	2300      	movs	r3, #0
 8005788:	460a      	mov	r2, r1
 800578a:	4922      	ldr	r1, [pc, #136]	@ (8005814 <vTaskStartScheduler+0xb8>)
 800578c:	4822      	ldr	r0, [pc, #136]	@ (8005818 <vTaskStartScheduler+0xbc>)
 800578e:	f7ff fe09 	bl	80053a4 <xTaskCreateStatic>
 8005792:	4603      	mov	r3, r0
 8005794:	4a21      	ldr	r2, [pc, #132]	@ (800581c <vTaskStartScheduler+0xc0>)
 8005796:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005798:	4b20      	ldr	r3, [pc, #128]	@ (800581c <vTaskStartScheduler+0xc0>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057a0:	2301      	movs	r3, #1
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	e001      	b.n	80057aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d102      	bne.n	80057b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80057b0:	f000 fd04 	bl	80061bc <xTimerCreateTimerTask>
 80057b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d116      	bne.n	80057ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	613b      	str	r3, [r7, #16]
}
 80057ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057d0:	4b13      	ldr	r3, [pc, #76]	@ (8005820 <vTaskStartScheduler+0xc4>)
 80057d2:	f04f 32ff 	mov.w	r2, #4294967295
 80057d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057d8:	4b12      	ldr	r3, [pc, #72]	@ (8005824 <vTaskStartScheduler+0xc8>)
 80057da:	2201      	movs	r2, #1
 80057dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057de:	4b12      	ldr	r3, [pc, #72]	@ (8005828 <vTaskStartScheduler+0xcc>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057e4:	f001 f8d4 	bl	8006990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057e8:	e00f      	b.n	800580a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f0:	d10b      	bne.n	800580a <vTaskStartScheduler+0xae>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	60fb      	str	r3, [r7, #12]
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	e7fd      	b.n	8005806 <vTaskStartScheduler+0xaa>
}
 800580a:	bf00      	nop
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	08007ac8 	.word	0x08007ac8
 8005818:	08005e4d 	.word	0x08005e4d
 800581c:	20000f2c 	.word	0x20000f2c
 8005820:	20000f28 	.word	0x20000f28
 8005824:	20000f14 	.word	0x20000f14
 8005828:	20000f0c 	.word	0x20000f0c

0800582c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005830:	4b04      	ldr	r3, [pc, #16]	@ (8005844 <vTaskSuspendAll+0x18>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3301      	adds	r3, #1
 8005836:	4a03      	ldr	r2, [pc, #12]	@ (8005844 <vTaskSuspendAll+0x18>)
 8005838:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800583a:	bf00      	nop
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	20000f30 	.word	0x20000f30

08005848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005852:	2300      	movs	r3, #0
 8005854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005856:	4b42      	ldr	r3, [pc, #264]	@ (8005960 <xTaskResumeAll+0x118>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10b      	bne.n	8005876 <xTaskResumeAll+0x2e>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	603b      	str	r3, [r7, #0]
}
 8005870:	bf00      	nop
 8005872:	bf00      	nop
 8005874:	e7fd      	b.n	8005872 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005876:	f001 f92f 	bl	8006ad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800587a:	4b39      	ldr	r3, [pc, #228]	@ (8005960 <xTaskResumeAll+0x118>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3b01      	subs	r3, #1
 8005880:	4a37      	ldr	r2, [pc, #220]	@ (8005960 <xTaskResumeAll+0x118>)
 8005882:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005884:	4b36      	ldr	r3, [pc, #216]	@ (8005960 <xTaskResumeAll+0x118>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d162      	bne.n	8005952 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800588c:	4b35      	ldr	r3, [pc, #212]	@ (8005964 <xTaskResumeAll+0x11c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d05e      	beq.n	8005952 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005894:	e02f      	b.n	80058f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005896:	4b34      	ldr	r3, [pc, #208]	@ (8005968 <xTaskResumeAll+0x120>)
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3318      	adds	r3, #24
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff f85a 	bl	800495c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff f855 	bl	800495c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b6:	4b2d      	ldr	r3, [pc, #180]	@ (800596c <xTaskResumeAll+0x124>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d903      	bls.n	80058c6 <xTaskResumeAll+0x7e>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c2:	4a2a      	ldr	r2, [pc, #168]	@ (800596c <xTaskResumeAll+0x124>)
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4a27      	ldr	r2, [pc, #156]	@ (8005970 <xTaskResumeAll+0x128>)
 80058d4:	441a      	add	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3304      	adds	r3, #4
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f7fe ffe0 	bl	80048a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e6:	4b23      	ldr	r3, [pc, #140]	@ (8005974 <xTaskResumeAll+0x12c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d302      	bcc.n	80058f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80058f0:	4b21      	ldr	r3, [pc, #132]	@ (8005978 <xTaskResumeAll+0x130>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005968 <xTaskResumeAll+0x120>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1cb      	bne.n	8005896 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005904:	f000 fb58 	bl	8005fb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005908:	4b1c      	ldr	r3, [pc, #112]	@ (800597c <xTaskResumeAll+0x134>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d010      	beq.n	8005936 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005914:	f000 f846 	bl	80059a4 <xTaskIncrementTick>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800591e:	4b16      	ldr	r3, [pc, #88]	@ (8005978 <xTaskResumeAll+0x130>)
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3b01      	subs	r3, #1
 8005928:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f1      	bne.n	8005914 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005930:	4b12      	ldr	r3, [pc, #72]	@ (800597c <xTaskResumeAll+0x134>)
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005936:	4b10      	ldr	r3, [pc, #64]	@ (8005978 <xTaskResumeAll+0x130>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800593e:	2301      	movs	r3, #1
 8005940:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005942:	4b0f      	ldr	r3, [pc, #60]	@ (8005980 <xTaskResumeAll+0x138>)
 8005944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005952:	f001 f8f3 	bl	8006b3c <vPortExitCritical>

	return xAlreadyYielded;
 8005956:	68bb      	ldr	r3, [r7, #8]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	20000f30 	.word	0x20000f30
 8005964:	20000f08 	.word	0x20000f08
 8005968:	20000ec8 	.word	0x20000ec8
 800596c:	20000f10 	.word	0x20000f10
 8005970:	20000a38 	.word	0x20000a38
 8005974:	20000a34 	.word	0x20000a34
 8005978:	20000f1c 	.word	0x20000f1c
 800597c:	20000f18 	.word	0x20000f18
 8005980:	e000ed04 	.word	0xe000ed04

08005984 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800598a:	4b05      	ldr	r3, [pc, #20]	@ (80059a0 <xTaskGetTickCount+0x1c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005990:	687b      	ldr	r3, [r7, #4]
}
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	20000f0c 	.word	0x20000f0c

080059a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ae:	4b4f      	ldr	r3, [pc, #316]	@ (8005aec <xTaskIncrementTick+0x148>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f040 8090 	bne.w	8005ad8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059b8:	4b4d      	ldr	r3, [pc, #308]	@ (8005af0 <xTaskIncrementTick+0x14c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3301      	adds	r3, #1
 80059be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059c0:	4a4b      	ldr	r2, [pc, #300]	@ (8005af0 <xTaskIncrementTick+0x14c>)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d121      	bne.n	8005a10 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059cc:	4b49      	ldr	r3, [pc, #292]	@ (8005af4 <xTaskIncrementTick+0x150>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00b      	beq.n	80059ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	603b      	str	r3, [r7, #0]
}
 80059e8:	bf00      	nop
 80059ea:	bf00      	nop
 80059ec:	e7fd      	b.n	80059ea <xTaskIncrementTick+0x46>
 80059ee:	4b41      	ldr	r3, [pc, #260]	@ (8005af4 <xTaskIncrementTick+0x150>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	4b40      	ldr	r3, [pc, #256]	@ (8005af8 <xTaskIncrementTick+0x154>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a3e      	ldr	r2, [pc, #248]	@ (8005af4 <xTaskIncrementTick+0x150>)
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	4a3e      	ldr	r2, [pc, #248]	@ (8005af8 <xTaskIncrementTick+0x154>)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	4b3e      	ldr	r3, [pc, #248]	@ (8005afc <xTaskIncrementTick+0x158>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3301      	adds	r3, #1
 8005a08:	4a3c      	ldr	r2, [pc, #240]	@ (8005afc <xTaskIncrementTick+0x158>)
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	f000 fad4 	bl	8005fb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a10:	4b3b      	ldr	r3, [pc, #236]	@ (8005b00 <xTaskIncrementTick+0x15c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d349      	bcc.n	8005aae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a1a:	4b36      	ldr	r3, [pc, #216]	@ (8005af4 <xTaskIncrementTick+0x150>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d104      	bne.n	8005a2e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a24:	4b36      	ldr	r3, [pc, #216]	@ (8005b00 <xTaskIncrementTick+0x15c>)
 8005a26:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2a:	601a      	str	r2, [r3, #0]
					break;
 8005a2c:	e03f      	b.n	8005aae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a2e:	4b31      	ldr	r3, [pc, #196]	@ (8005af4 <xTaskIncrementTick+0x150>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d203      	bcs.n	8005a4e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a46:	4a2e      	ldr	r2, [pc, #184]	@ (8005b00 <xTaskIncrementTick+0x15c>)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a4c:	e02f      	b.n	8005aae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	3304      	adds	r3, #4
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe ff82 	bl	800495c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	3318      	adds	r3, #24
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe ff79 	bl	800495c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6e:	4b25      	ldr	r3, [pc, #148]	@ (8005b04 <xTaskIncrementTick+0x160>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d903      	bls.n	8005a7e <xTaskIncrementTick+0xda>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7a:	4a22      	ldr	r2, [pc, #136]	@ (8005b04 <xTaskIncrementTick+0x160>)
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005b08 <xTaskIncrementTick+0x164>)
 8005a8c:	441a      	add	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f7fe ff04 	bl	80048a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005b0c <xTaskIncrementTick+0x168>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d3b8      	bcc.n	8005a1a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aac:	e7b5      	b.n	8005a1a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005aae:	4b17      	ldr	r3, [pc, #92]	@ (8005b0c <xTaskIncrementTick+0x168>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab4:	4914      	ldr	r1, [pc, #80]	@ (8005b08 <xTaskIncrementTick+0x164>)
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d901      	bls.n	8005aca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005aca:	4b11      	ldr	r3, [pc, #68]	@ (8005b10 <xTaskIncrementTick+0x16c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	e004      	b.n	8005ae2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b14 <xTaskIncrementTick+0x170>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3301      	adds	r3, #1
 8005ade:	4a0d      	ldr	r2, [pc, #52]	@ (8005b14 <xTaskIncrementTick+0x170>)
 8005ae0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ae2:	697b      	ldr	r3, [r7, #20]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	20000f30 	.word	0x20000f30
 8005af0:	20000f0c 	.word	0x20000f0c
 8005af4:	20000ec0 	.word	0x20000ec0
 8005af8:	20000ec4 	.word	0x20000ec4
 8005afc:	20000f20 	.word	0x20000f20
 8005b00:	20000f28 	.word	0x20000f28
 8005b04:	20000f10 	.word	0x20000f10
 8005b08:	20000a38 	.word	0x20000a38
 8005b0c:	20000a34 	.word	0x20000a34
 8005b10:	20000f1c 	.word	0x20000f1c
 8005b14:	20000f18 	.word	0x20000f18

08005b18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b1e:	4b28      	ldr	r3, [pc, #160]	@ (8005bc0 <vTaskSwitchContext+0xa8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b26:	4b27      	ldr	r3, [pc, #156]	@ (8005bc4 <vTaskSwitchContext+0xac>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b2c:	e042      	b.n	8005bb4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005b2e:	4b25      	ldr	r3, [pc, #148]	@ (8005bc4 <vTaskSwitchContext+0xac>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b34:	4b24      	ldr	r3, [pc, #144]	@ (8005bc8 <vTaskSwitchContext+0xb0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	e011      	b.n	8005b60 <vTaskSwitchContext+0x48>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10b      	bne.n	8005b5a <vTaskSwitchContext+0x42>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	607b      	str	r3, [r7, #4]
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop
 8005b58:	e7fd      	b.n	8005b56 <vTaskSwitchContext+0x3e>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	491a      	ldr	r1, [pc, #104]	@ (8005bcc <vTaskSwitchContext+0xb4>)
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0e3      	beq.n	8005b3c <vTaskSwitchContext+0x24>
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4a13      	ldr	r2, [pc, #76]	@ (8005bcc <vTaskSwitchContext+0xb4>)
 8005b80:	4413      	add	r3, r2
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	605a      	str	r2, [r3, #4]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	3308      	adds	r3, #8
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d104      	bne.n	8005ba4 <vTaskSwitchContext+0x8c>
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	605a      	str	r2, [r3, #4]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	4a09      	ldr	r2, [pc, #36]	@ (8005bd0 <vTaskSwitchContext+0xb8>)
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	4a06      	ldr	r2, [pc, #24]	@ (8005bc8 <vTaskSwitchContext+0xb0>)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6013      	str	r3, [r2, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	20000f30 	.word	0x20000f30
 8005bc4:	20000f1c 	.word	0x20000f1c
 8005bc8:	20000f10 	.word	0x20000f10
 8005bcc:	20000a38 	.word	0x20000a38
 8005bd0:	20000a34 	.word	0x20000a34

08005bd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	60fb      	str	r3, [r7, #12]
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bfc:	4b07      	ldr	r3, [pc, #28]	@ (8005c1c <vTaskPlaceOnEventList+0x48>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3318      	adds	r3, #24
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fe fe70 	bl	80048ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	6838      	ldr	r0, [r7, #0]
 8005c0e:	f000 fa81 	bl	8006114 <prvAddCurrentTaskToDelayedList>
}
 8005c12:	bf00      	nop
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000a34 	.word	0x20000a34

08005c20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10b      	bne.n	8005c4a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	617b      	str	r3, [r7, #20]
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop
 8005c48:	e7fd      	b.n	8005c46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c74 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3318      	adds	r3, #24
 8005c50:	4619      	mov	r1, r3
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f7fe fe25 	bl	80048a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	68b8      	ldr	r0, [r7, #8]
 8005c68:	f000 fa54 	bl	8006114 <prvAddCurrentTaskToDelayedList>
	}
 8005c6c:	bf00      	nop
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20000a34 	.word	0x20000a34

08005c78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10b      	bne.n	8005ca6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	60fb      	str	r3, [r7, #12]
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	e7fd      	b.n	8005ca2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3318      	adds	r3, #24
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe fe56 	bl	800495c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d28 <xTaskRemoveFromEventList+0xb0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d11d      	bne.n	8005cf4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fe fe4d 	bl	800495c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc6:	4b19      	ldr	r3, [pc, #100]	@ (8005d2c <xTaskRemoveFromEventList+0xb4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d903      	bls.n	8005cd6 <xTaskRemoveFromEventList+0x5e>
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd2:	4a16      	ldr	r2, [pc, #88]	@ (8005d2c <xTaskRemoveFromEventList+0xb4>)
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4a13      	ldr	r2, [pc, #76]	@ (8005d30 <xTaskRemoveFromEventList+0xb8>)
 8005ce4:	441a      	add	r2, r3
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	4619      	mov	r1, r3
 8005cec:	4610      	mov	r0, r2
 8005cee:	f7fe fdd8 	bl	80048a2 <vListInsertEnd>
 8005cf2:	e005      	b.n	8005d00 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	3318      	adds	r3, #24
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	480e      	ldr	r0, [pc, #56]	@ (8005d34 <xTaskRemoveFromEventList+0xbc>)
 8005cfc:	f7fe fdd1 	bl	80048a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d04:	4b0c      	ldr	r3, [pc, #48]	@ (8005d38 <xTaskRemoveFromEventList+0xc0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d905      	bls.n	8005d1a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d12:	4b0a      	ldr	r3, [pc, #40]	@ (8005d3c <xTaskRemoveFromEventList+0xc4>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	e001      	b.n	8005d1e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d1e:	697b      	ldr	r3, [r7, #20]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20000f30 	.word	0x20000f30
 8005d2c:	20000f10 	.word	0x20000f10
 8005d30:	20000a38 	.word	0x20000a38
 8005d34:	20000ec8 	.word	0x20000ec8
 8005d38:	20000a34 	.word	0x20000a34
 8005d3c:	20000f1c 	.word	0x20000f1c

08005d40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d48:	4b06      	ldr	r3, [pc, #24]	@ (8005d64 <vTaskInternalSetTimeOutState+0x24>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d50:	4b05      	ldr	r3, [pc, #20]	@ (8005d68 <vTaskInternalSetTimeOutState+0x28>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	605a      	str	r2, [r3, #4]
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	20000f20 	.word	0x20000f20
 8005d68:	20000f0c 	.word	0x20000f0c

08005d6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10b      	bne.n	8005d94 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	613b      	str	r3, [r7, #16]
}
 8005d8e:	bf00      	nop
 8005d90:	bf00      	nop
 8005d92:	e7fd      	b.n	8005d90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10b      	bne.n	8005db2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	60fb      	str	r3, [r7, #12]
}
 8005dac:	bf00      	nop
 8005dae:	bf00      	nop
 8005db0:	e7fd      	b.n	8005dae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005db2:	f000 fe91 	bl	8006ad8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005db6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e2c <xTaskCheckForTimeOut+0xc0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d102      	bne.n	8005dd6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	e023      	b.n	8005e1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b15      	ldr	r3, [pc, #84]	@ (8005e30 <xTaskCheckForTimeOut+0xc4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d007      	beq.n	8005df2 <xTaskCheckForTimeOut+0x86>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d302      	bcc.n	8005df2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005dec:	2301      	movs	r3, #1
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	e015      	b.n	8005e1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d20b      	bcs.n	8005e14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	1ad2      	subs	r2, r2, r3
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff ff99 	bl	8005d40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
 8005e12:	e004      	b.n	8005e1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e1e:	f000 fe8d 	bl	8006b3c <vPortExitCritical>

	return xReturn;
 8005e22:	69fb      	ldr	r3, [r7, #28]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3720      	adds	r7, #32
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20000f0c 	.word	0x20000f0c
 8005e30:	20000f20 	.word	0x20000f20

08005e34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e38:	4b03      	ldr	r3, [pc, #12]	@ (8005e48 <vTaskMissedYield+0x14>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
}
 8005e3e:	bf00      	nop
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	20000f1c 	.word	0x20000f1c

08005e4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e54:	f000 f852 	bl	8005efc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e58:	4b06      	ldr	r3, [pc, #24]	@ (8005e74 <prvIdleTask+0x28>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d9f9      	bls.n	8005e54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e60:	4b05      	ldr	r3, [pc, #20]	@ (8005e78 <prvIdleTask+0x2c>)
 8005e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e70:	e7f0      	b.n	8005e54 <prvIdleTask+0x8>
 8005e72:	bf00      	nop
 8005e74:	20000a38 	.word	0x20000a38
 8005e78:	e000ed04 	.word	0xe000ed04

08005e7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e82:	2300      	movs	r3, #0
 8005e84:	607b      	str	r3, [r7, #4]
 8005e86:	e00c      	b.n	8005ea2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4a12      	ldr	r2, [pc, #72]	@ (8005edc <prvInitialiseTaskLists+0x60>)
 8005e94:	4413      	add	r3, r2
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fcd6 	bl	8004848 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	607b      	str	r3, [r7, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b37      	cmp	r3, #55	@ 0x37
 8005ea6:	d9ef      	bls.n	8005e88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ea8:	480d      	ldr	r0, [pc, #52]	@ (8005ee0 <prvInitialiseTaskLists+0x64>)
 8005eaa:	f7fe fccd 	bl	8004848 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eae:	480d      	ldr	r0, [pc, #52]	@ (8005ee4 <prvInitialiseTaskLists+0x68>)
 8005eb0:	f7fe fcca 	bl	8004848 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005eb4:	480c      	ldr	r0, [pc, #48]	@ (8005ee8 <prvInitialiseTaskLists+0x6c>)
 8005eb6:	f7fe fcc7 	bl	8004848 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005eba:	480c      	ldr	r0, [pc, #48]	@ (8005eec <prvInitialiseTaskLists+0x70>)
 8005ebc:	f7fe fcc4 	bl	8004848 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ec0:	480b      	ldr	r0, [pc, #44]	@ (8005ef0 <prvInitialiseTaskLists+0x74>)
 8005ec2:	f7fe fcc1 	bl	8004848 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef4 <prvInitialiseTaskLists+0x78>)
 8005ec8:	4a05      	ldr	r2, [pc, #20]	@ (8005ee0 <prvInitialiseTaskLists+0x64>)
 8005eca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef8 <prvInitialiseTaskLists+0x7c>)
 8005ece:	4a05      	ldr	r2, [pc, #20]	@ (8005ee4 <prvInitialiseTaskLists+0x68>)
 8005ed0:	601a      	str	r2, [r3, #0]
}
 8005ed2:	bf00      	nop
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000a38 	.word	0x20000a38
 8005ee0:	20000e98 	.word	0x20000e98
 8005ee4:	20000eac 	.word	0x20000eac
 8005ee8:	20000ec8 	.word	0x20000ec8
 8005eec:	20000edc 	.word	0x20000edc
 8005ef0:	20000ef4 	.word	0x20000ef4
 8005ef4:	20000ec0 	.word	0x20000ec0
 8005ef8:	20000ec4 	.word	0x20000ec4

08005efc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f02:	e019      	b.n	8005f38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f04:	f000 fde8 	bl	8006ad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f08:	4b10      	ldr	r3, [pc, #64]	@ (8005f4c <prvCheckTasksWaitingTermination+0x50>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fe fd21 	bl	800495c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f50 <prvCheckTasksWaitingTermination+0x54>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	4a0b      	ldr	r2, [pc, #44]	@ (8005f50 <prvCheckTasksWaitingTermination+0x54>)
 8005f22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f24:	4b0b      	ldr	r3, [pc, #44]	@ (8005f54 <prvCheckTasksWaitingTermination+0x58>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f54 <prvCheckTasksWaitingTermination+0x58>)
 8005f2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f2e:	f000 fe05 	bl	8006b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f810 	bl	8005f58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f38:	4b06      	ldr	r3, [pc, #24]	@ (8005f54 <prvCheckTasksWaitingTermination+0x58>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e1      	bne.n	8005f04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f40:	bf00      	nop
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000edc 	.word	0x20000edc
 8005f50:	20000f08 	.word	0x20000f08
 8005f54:	20000ef0 	.word	0x20000ef0

08005f58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d108      	bne.n	8005f7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 ffa2 	bl	8006eb8 <vPortFree>
				vPortFree( pxTCB );
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 ff9f 	bl	8006eb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f7a:	e019      	b.n	8005fb0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d103      	bne.n	8005f8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 ff96 	bl	8006eb8 <vPortFree>
	}
 8005f8c:	e010      	b.n	8005fb0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d00b      	beq.n	8005fb0 <prvDeleteTCB+0x58>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	60fb      	str	r3, [r7, #12]
}
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
 8005fae:	e7fd      	b.n	8005fac <prvDeleteTCB+0x54>
	}
 8005fb0:	bf00      	nop
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff0 <prvResetNextTaskUnblockTime+0x38>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d104      	bne.n	8005fd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff4 <prvResetNextTaskUnblockTime+0x3c>)
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295
 8005fce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fd0:	e008      	b.n	8005fe4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd2:	4b07      	ldr	r3, [pc, #28]	@ (8005ff0 <prvResetNextTaskUnblockTime+0x38>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	4a04      	ldr	r2, [pc, #16]	@ (8005ff4 <prvResetNextTaskUnblockTime+0x3c>)
 8005fe2:	6013      	str	r3, [r2, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	20000ec0 	.word	0x20000ec0
 8005ff4:	20000f28 	.word	0x20000f28

08005ff8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800602c <xTaskGetSchedulerState+0x34>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006006:	2301      	movs	r3, #1
 8006008:	607b      	str	r3, [r7, #4]
 800600a:	e008      	b.n	800601e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800600c:	4b08      	ldr	r3, [pc, #32]	@ (8006030 <xTaskGetSchedulerState+0x38>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d102      	bne.n	800601a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006014:	2302      	movs	r3, #2
 8006016:	607b      	str	r3, [r7, #4]
 8006018:	e001      	b.n	800601e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800601a:	2300      	movs	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800601e:	687b      	ldr	r3, [r7, #4]
	}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000f14 	.word	0x20000f14
 8006030:	20000f30 	.word	0x20000f30

08006034 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006040:	2300      	movs	r3, #0
 8006042:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d058      	beq.n	80060fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800604a:	4b2f      	ldr	r3, [pc, #188]	@ (8006108 <xTaskPriorityDisinherit+0xd4>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	429a      	cmp	r2, r3
 8006052:	d00b      	beq.n	800606c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	60fb      	str	r3, [r7, #12]
}
 8006066:	bf00      	nop
 8006068:	bf00      	nop
 800606a:	e7fd      	b.n	8006068 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10b      	bne.n	800608c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	60bb      	str	r3, [r7, #8]
}
 8006086:	bf00      	nop
 8006088:	bf00      	nop
 800608a:	e7fd      	b.n	8006088 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006090:	1e5a      	subs	r2, r3, #1
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800609e:	429a      	cmp	r2, r3
 80060a0:	d02c      	beq.n	80060fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d128      	bne.n	80060fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	3304      	adds	r3, #4
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe fc54 	bl	800495c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060cc:	4b0f      	ldr	r3, [pc, #60]	@ (800610c <xTaskPriorityDisinherit+0xd8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d903      	bls.n	80060dc <xTaskPriorityDisinherit+0xa8>
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d8:	4a0c      	ldr	r2, [pc, #48]	@ (800610c <xTaskPriorityDisinherit+0xd8>)
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4a09      	ldr	r2, [pc, #36]	@ (8006110 <xTaskPriorityDisinherit+0xdc>)
 80060ea:	441a      	add	r2, r3
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f7fe fbd5 	bl	80048a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060f8:	2301      	movs	r3, #1
 80060fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060fc:	697b      	ldr	r3, [r7, #20]
	}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000a34 	.word	0x20000a34
 800610c:	20000f10 	.word	0x20000f10
 8006110:	20000a38 	.word	0x20000a38

08006114 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800611e:	4b21      	ldr	r3, [pc, #132]	@ (80061a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006124:	4b20      	ldr	r3, [pc, #128]	@ (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3304      	adds	r3, #4
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fc16 	bl	800495c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006136:	d10a      	bne.n	800614e <prvAddCurrentTaskToDelayedList+0x3a>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800613e:	4b1a      	ldr	r3, [pc, #104]	@ (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3304      	adds	r3, #4
 8006144:	4619      	mov	r1, r3
 8006146:	4819      	ldr	r0, [pc, #100]	@ (80061ac <prvAddCurrentTaskToDelayedList+0x98>)
 8006148:	f7fe fbab 	bl	80048a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800614c:	e026      	b.n	800619c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4413      	add	r3, r2
 8006154:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006156:	4b14      	ldr	r3, [pc, #80]	@ (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	429a      	cmp	r2, r3
 8006164:	d209      	bcs.n	800617a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006166:	4b12      	ldr	r3, [pc, #72]	@ (80061b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	4b0f      	ldr	r3, [pc, #60]	@ (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f7fe fbb9 	bl	80048ea <vListInsert>
}
 8006178:	e010      	b.n	800619c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800617a:	4b0e      	ldr	r3, [pc, #56]	@ (80061b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	4b0a      	ldr	r3, [pc, #40]	@ (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7fe fbaf 	bl	80048ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800618c:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	429a      	cmp	r2, r3
 8006194:	d202      	bcs.n	800619c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006196:	4a08      	ldr	r2, [pc, #32]	@ (80061b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	6013      	str	r3, [r2, #0]
}
 800619c:	bf00      	nop
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20000f0c 	.word	0x20000f0c
 80061a8:	20000a34 	.word	0x20000a34
 80061ac:	20000ef4 	.word	0x20000ef4
 80061b0:	20000ec4 	.word	0x20000ec4
 80061b4:	20000ec0 	.word	0x20000ec0
 80061b8:	20000f28 	.word	0x20000f28

080061bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08a      	sub	sp, #40	@ 0x28
 80061c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061c6:	f000 fb13 	bl	80067f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006240 <xTimerCreateTimerTask+0x84>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d021      	beq.n	8006216 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061da:	1d3a      	adds	r2, r7, #4
 80061dc:	f107 0108 	add.w	r1, r7, #8
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fe fb15 	bl	8004814 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	9202      	str	r2, [sp, #8]
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	2302      	movs	r3, #2
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2300      	movs	r3, #0
 80061fa:	460a      	mov	r2, r1
 80061fc:	4911      	ldr	r1, [pc, #68]	@ (8006244 <xTimerCreateTimerTask+0x88>)
 80061fe:	4812      	ldr	r0, [pc, #72]	@ (8006248 <xTimerCreateTimerTask+0x8c>)
 8006200:	f7ff f8d0 	bl	80053a4 <xTaskCreateStatic>
 8006204:	4603      	mov	r3, r0
 8006206:	4a11      	ldr	r2, [pc, #68]	@ (800624c <xTimerCreateTimerTask+0x90>)
 8006208:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800620a:	4b10      	ldr	r3, [pc, #64]	@ (800624c <xTimerCreateTimerTask+0x90>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006212:	2301      	movs	r3, #1
 8006214:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	613b      	str	r3, [r7, #16]
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	e7fd      	b.n	8006230 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006234:	697b      	ldr	r3, [r7, #20]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20000f64 	.word	0x20000f64
 8006244:	08007ad0 	.word	0x08007ad0
 8006248:	08006389 	.word	0x08006389
 800624c:	20000f68 	.word	0x20000f68

08006250 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	@ 0x28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800625e:	2300      	movs	r3, #0
 8006260:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10b      	bne.n	8006280 <xTimerGenericCommand+0x30>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	623b      	str	r3, [r7, #32]
}
 800627a:	bf00      	nop
 800627c:	bf00      	nop
 800627e:	e7fd      	b.n	800627c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006280:	4b19      	ldr	r3, [pc, #100]	@ (80062e8 <xTimerGenericCommand+0x98>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d02a      	beq.n	80062de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b05      	cmp	r3, #5
 8006298:	dc18      	bgt.n	80062cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800629a:	f7ff fead 	bl	8005ff8 <xTaskGetSchedulerState>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d109      	bne.n	80062b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062a4:	4b10      	ldr	r3, [pc, #64]	@ (80062e8 <xTimerGenericCommand+0x98>)
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	f107 0110 	add.w	r1, r7, #16
 80062ac:	2300      	movs	r3, #0
 80062ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062b0:	f7fe fc88 	bl	8004bc4 <xQueueGenericSend>
 80062b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80062b6:	e012      	b.n	80062de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062b8:	4b0b      	ldr	r3, [pc, #44]	@ (80062e8 <xTimerGenericCommand+0x98>)
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	f107 0110 	add.w	r1, r7, #16
 80062c0:	2300      	movs	r3, #0
 80062c2:	2200      	movs	r2, #0
 80062c4:	f7fe fc7e 	bl	8004bc4 <xQueueGenericSend>
 80062c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80062ca:	e008      	b.n	80062de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062cc:	4b06      	ldr	r3, [pc, #24]	@ (80062e8 <xTimerGenericCommand+0x98>)
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	f107 0110 	add.w	r1, r7, #16
 80062d4:	2300      	movs	r3, #0
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	f7fe fd76 	bl	8004dc8 <xQueueGenericSendFromISR>
 80062dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3728      	adds	r7, #40	@ 0x28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20000f64 	.word	0x20000f64

080062ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f6:	4b23      	ldr	r3, [pc, #140]	@ (8006384 <prvProcessExpiredTimer+0x98>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	3304      	adds	r3, #4
 8006304:	4618      	mov	r0, r3
 8006306:	f7fe fb29 	bl	800495c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d023      	beq.n	8006360 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	699a      	ldr	r2, [r3, #24]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	18d1      	adds	r1, r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	6978      	ldr	r0, [r7, #20]
 8006326:	f000 f8d5 	bl	80064d4 <prvInsertTimerInActiveList>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d020      	beq.n	8006372 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006330:	2300      	movs	r3, #0
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	2300      	movs	r3, #0
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	2100      	movs	r1, #0
 800633a:	6978      	ldr	r0, [r7, #20]
 800633c:	f7ff ff88 	bl	8006250 <xTimerGenericCommand>
 8006340:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d114      	bne.n	8006372 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	60fb      	str	r3, [r7, #12]
}
 800635a:	bf00      	nop
 800635c:	bf00      	nop
 800635e:	e7fd      	b.n	800635c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	b2da      	uxtb	r2, r3
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	6978      	ldr	r0, [r7, #20]
 8006378:	4798      	blx	r3
}
 800637a:	bf00      	nop
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000f5c 	.word	0x20000f5c

08006388 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006390:	f107 0308 	add.w	r3, r7, #8
 8006394:	4618      	mov	r0, r3
 8006396:	f000 f859 	bl	800644c <prvGetNextExpireTime>
 800639a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4619      	mov	r1, r3
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f805 	bl	80063b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063a6:	f000 f8d7 	bl	8006558 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063aa:	bf00      	nop
 80063ac:	e7f0      	b.n	8006390 <prvTimerTask+0x8>
	...

080063b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063ba:	f7ff fa37 	bl	800582c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063be:	f107 0308 	add.w	r3, r7, #8
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 f866 	bl	8006494 <prvSampleTimeNow>
 80063c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d130      	bne.n	8006432 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <prvProcessTimerOrBlockTask+0x3c>
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d806      	bhi.n	80063ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063de:	f7ff fa33 	bl	8005848 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063e2:	68f9      	ldr	r1, [r7, #12]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7ff ff81 	bl	80062ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063ea:	e024      	b.n	8006436 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d008      	beq.n	8006404 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063f2:	4b13      	ldr	r3, [pc, #76]	@ (8006440 <prvProcessTimerOrBlockTask+0x90>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <prvProcessTimerOrBlockTask+0x50>
 80063fc:	2301      	movs	r3, #1
 80063fe:	e000      	b.n	8006402 <prvProcessTimerOrBlockTask+0x52>
 8006400:	2300      	movs	r3, #0
 8006402:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006404:	4b0f      	ldr	r3, [pc, #60]	@ (8006444 <prvProcessTimerOrBlockTask+0x94>)
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	4619      	mov	r1, r3
 8006412:	f7fe ff93 	bl	800533c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006416:	f7ff fa17 	bl	8005848 <xTaskResumeAll>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006420:	4b09      	ldr	r3, [pc, #36]	@ (8006448 <prvProcessTimerOrBlockTask+0x98>)
 8006422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
}
 8006430:	e001      	b.n	8006436 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006432:	f7ff fa09 	bl	8005848 <xTaskResumeAll>
}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000f60 	.word	0x20000f60
 8006444:	20000f64 	.word	0x20000f64
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006454:	4b0e      	ldr	r3, [pc, #56]	@ (8006490 <prvGetNextExpireTime+0x44>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <prvGetNextExpireTime+0x16>
 800645e:	2201      	movs	r2, #1
 8006460:	e000      	b.n	8006464 <prvGetNextExpireTime+0x18>
 8006462:	2200      	movs	r2, #0
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d105      	bne.n	800647c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006470:	4b07      	ldr	r3, [pc, #28]	@ (8006490 <prvGetNextExpireTime+0x44>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	e001      	b.n	8006480 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006480:	68fb      	ldr	r3, [r7, #12]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	20000f5c 	.word	0x20000f5c

08006494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800649c:	f7ff fa72 	bl	8005984 <xTaskGetTickCount>
 80064a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064a2:	4b0b      	ldr	r3, [pc, #44]	@ (80064d0 <prvSampleTimeNow+0x3c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d205      	bcs.n	80064b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064ac:	f000 f93a 	bl	8006724 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	e002      	b.n	80064be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064be:	4a04      	ldr	r2, [pc, #16]	@ (80064d0 <prvSampleTimeNow+0x3c>)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064c4:	68fb      	ldr	r3, [r7, #12]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20000f6c 	.word	0x20000f6c

080064d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d812      	bhi.n	8006520 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	1ad2      	subs	r2, r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	429a      	cmp	r2, r3
 8006506:	d302      	bcc.n	800650e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006508:	2301      	movs	r3, #1
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	e01b      	b.n	8006546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800650e:	4b10      	ldr	r3, [pc, #64]	@ (8006550 <prvInsertTimerInActiveList+0x7c>)
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3304      	adds	r3, #4
 8006516:	4619      	mov	r1, r3
 8006518:	4610      	mov	r0, r2
 800651a:	f7fe f9e6 	bl	80048ea <vListInsert>
 800651e:	e012      	b.n	8006546 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d206      	bcs.n	8006536 <prvInsertTimerInActiveList+0x62>
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d302      	bcc.n	8006536 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006530:	2301      	movs	r3, #1
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	e007      	b.n	8006546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006536:	4b07      	ldr	r3, [pc, #28]	@ (8006554 <prvInsertTimerInActiveList+0x80>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3304      	adds	r3, #4
 800653e:	4619      	mov	r1, r3
 8006540:	4610      	mov	r0, r2
 8006542:	f7fe f9d2 	bl	80048ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006546:	697b      	ldr	r3, [r7, #20]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000f60 	.word	0x20000f60
 8006554:	20000f5c 	.word	0x20000f5c

08006558 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08e      	sub	sp, #56	@ 0x38
 800655c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800655e:	e0ce      	b.n	80066fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	da19      	bge.n	800659a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006566:	1d3b      	adds	r3, r7, #4
 8006568:	3304      	adds	r3, #4
 800656a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800656c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10b      	bne.n	800658a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	61fb      	str	r3, [r7, #28]
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop
 8006588:	e7fd      	b.n	8006586 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800658a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006590:	6850      	ldr	r0, [r2, #4]
 8006592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006594:	6892      	ldr	r2, [r2, #8]
 8006596:	4611      	mov	r1, r2
 8006598:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f2c0 80ae 	blt.w	80066fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d004      	beq.n	80065b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b0:	3304      	adds	r3, #4
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe f9d2 	bl	800495c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065b8:	463b      	mov	r3, r7
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff ff6a 	bl	8006494 <prvSampleTimeNow>
 80065c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b09      	cmp	r3, #9
 80065c6:	f200 8097 	bhi.w	80066f8 <prvProcessReceivedCommands+0x1a0>
 80065ca:	a201      	add	r2, pc, #4	@ (adr r2, 80065d0 <prvProcessReceivedCommands+0x78>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	080065f9 	.word	0x080065f9
 80065d4:	080065f9 	.word	0x080065f9
 80065d8:	080065f9 	.word	0x080065f9
 80065dc:	0800666f 	.word	0x0800666f
 80065e0:	08006683 	.word	0x08006683
 80065e4:	080066cf 	.word	0x080066cf
 80065e8:	080065f9 	.word	0x080065f9
 80065ec:	080065f9 	.word	0x080065f9
 80065f0:	0800666f 	.word	0x0800666f
 80065f4:	08006683 	.word	0x08006683
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	b2da      	uxtb	r2, r3
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	18d1      	adds	r1, r2, r3
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006618:	f7ff ff5c 	bl	80064d4 <prvInsertTimerInActiveList>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d06c      	beq.n	80066fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006628:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d061      	beq.n	80066fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	441a      	add	r2, r3
 8006640:	2300      	movs	r3, #0
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	2300      	movs	r3, #0
 8006646:	2100      	movs	r1, #0
 8006648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800664a:	f7ff fe01 	bl	8006250 <xTimerGenericCommand>
 800664e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d152      	bne.n	80066fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	61bb      	str	r3, [r7, #24]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006670:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006674:	f023 0301 	bic.w	r3, r3, #1
 8006678:	b2da      	uxtb	r2, r3
 800667a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006680:	e03d      	b.n	80066fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	b2da      	uxtb	r2, r3
 800668e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006690:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006698:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800669a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10b      	bne.n	80066ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	617b      	str	r3, [r7, #20]
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	e7fd      	b.n	80066b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066bc:	699a      	ldr	r2, [r3, #24]
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	18d1      	adds	r1, r2, r3
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066c8:	f7ff ff04 	bl	80064d4 <prvInsertTimerInActiveList>
					break;
 80066cc:	e017      	b.n	80066fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80066dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066de:	f000 fbeb 	bl	8006eb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066e2:	e00c      	b.n	80066fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066ea:	f023 0301 	bic.w	r3, r3, #1
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80066f6:	e002      	b.n	80066fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80066f8:	bf00      	nop
 80066fa:	e000      	b.n	80066fe <prvProcessReceivedCommands+0x1a6>
					break;
 80066fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066fe:	4b08      	ldr	r3, [pc, #32]	@ (8006720 <prvProcessReceivedCommands+0x1c8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	1d39      	adds	r1, r7, #4
 8006704:	2200      	movs	r2, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe fbfc 	bl	8004f04 <xQueueReceive>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	f47f af26 	bne.w	8006560 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop
 8006718:	3730      	adds	r7, #48	@ 0x30
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000f64 	.word	0x20000f64

08006724 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800672a:	e049      	b.n	80067c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800672c:	4b2e      	ldr	r3, [pc, #184]	@ (80067e8 <prvSwitchTimerLists+0xc4>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006736:	4b2c      	ldr	r3, [pc, #176]	@ (80067e8 <prvSwitchTimerLists+0xc4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3304      	adds	r3, #4
 8006744:	4618      	mov	r0, r3
 8006746:	f7fe f909 	bl	800495c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d02f      	beq.n	80067c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4413      	add	r3, r2
 8006768:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	429a      	cmp	r2, r3
 8006770:	d90e      	bls.n	8006790 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800677e:	4b1a      	ldr	r3, [pc, #104]	@ (80067e8 <prvSwitchTimerLists+0xc4>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3304      	adds	r3, #4
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7fe f8ae 	bl	80048ea <vListInsert>
 800678e:	e017      	b.n	80067c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006790:	2300      	movs	r3, #0
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	2300      	movs	r3, #0
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	2100      	movs	r1, #0
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f7ff fd58 	bl	8006250 <xTimerGenericCommand>
 80067a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10b      	bne.n	80067c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	603b      	str	r3, [r7, #0]
}
 80067ba:	bf00      	nop
 80067bc:	bf00      	nop
 80067be:	e7fd      	b.n	80067bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067c0:	4b09      	ldr	r3, [pc, #36]	@ (80067e8 <prvSwitchTimerLists+0xc4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1b0      	bne.n	800672c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067ca:	4b07      	ldr	r3, [pc, #28]	@ (80067e8 <prvSwitchTimerLists+0xc4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067d0:	4b06      	ldr	r3, [pc, #24]	@ (80067ec <prvSwitchTimerLists+0xc8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a04      	ldr	r2, [pc, #16]	@ (80067e8 <prvSwitchTimerLists+0xc4>)
 80067d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067d8:	4a04      	ldr	r2, [pc, #16]	@ (80067ec <prvSwitchTimerLists+0xc8>)
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	6013      	str	r3, [r2, #0]
}
 80067de:	bf00      	nop
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000f5c 	.word	0x20000f5c
 80067ec:	20000f60 	.word	0x20000f60

080067f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067f6:	f000 f96f 	bl	8006ad8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067fa:	4b15      	ldr	r3, [pc, #84]	@ (8006850 <prvCheckForValidListAndQueue+0x60>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d120      	bne.n	8006844 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006802:	4814      	ldr	r0, [pc, #80]	@ (8006854 <prvCheckForValidListAndQueue+0x64>)
 8006804:	f7fe f820 	bl	8004848 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006808:	4813      	ldr	r0, [pc, #76]	@ (8006858 <prvCheckForValidListAndQueue+0x68>)
 800680a:	f7fe f81d 	bl	8004848 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800680e:	4b13      	ldr	r3, [pc, #76]	@ (800685c <prvCheckForValidListAndQueue+0x6c>)
 8006810:	4a10      	ldr	r2, [pc, #64]	@ (8006854 <prvCheckForValidListAndQueue+0x64>)
 8006812:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006814:	4b12      	ldr	r3, [pc, #72]	@ (8006860 <prvCheckForValidListAndQueue+0x70>)
 8006816:	4a10      	ldr	r2, [pc, #64]	@ (8006858 <prvCheckForValidListAndQueue+0x68>)
 8006818:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800681a:	2300      	movs	r3, #0
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	4b11      	ldr	r3, [pc, #68]	@ (8006864 <prvCheckForValidListAndQueue+0x74>)
 8006820:	4a11      	ldr	r2, [pc, #68]	@ (8006868 <prvCheckForValidListAndQueue+0x78>)
 8006822:	2110      	movs	r1, #16
 8006824:	200a      	movs	r0, #10
 8006826:	f7fe f92d 	bl	8004a84 <xQueueGenericCreateStatic>
 800682a:	4603      	mov	r3, r0
 800682c:	4a08      	ldr	r2, [pc, #32]	@ (8006850 <prvCheckForValidListAndQueue+0x60>)
 800682e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006830:	4b07      	ldr	r3, [pc, #28]	@ (8006850 <prvCheckForValidListAndQueue+0x60>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006838:	4b05      	ldr	r3, [pc, #20]	@ (8006850 <prvCheckForValidListAndQueue+0x60>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	490b      	ldr	r1, [pc, #44]	@ (800686c <prvCheckForValidListAndQueue+0x7c>)
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe fd52 	bl	80052e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006844:	f000 f97a 	bl	8006b3c <vPortExitCritical>
}
 8006848:	bf00      	nop
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000f64 	.word	0x20000f64
 8006854:	20000f34 	.word	0x20000f34
 8006858:	20000f48 	.word	0x20000f48
 800685c:	20000f5c 	.word	0x20000f5c
 8006860:	20000f60 	.word	0x20000f60
 8006864:	20001010 	.word	0x20001010
 8006868:	20000f70 	.word	0x20000f70
 800686c:	08007ad8 	.word	0x08007ad8

08006870 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3b04      	subs	r3, #4
 8006880:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3b04      	subs	r3, #4
 800688e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f023 0201 	bic.w	r2, r3, #1
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3b04      	subs	r3, #4
 800689e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068a0:	4a0c      	ldr	r2, [pc, #48]	@ (80068d4 <pxPortInitialiseStack+0x64>)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3b14      	subs	r3, #20
 80068aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3b04      	subs	r3, #4
 80068b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f06f 0202 	mvn.w	r2, #2
 80068be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3b20      	subs	r3, #32
 80068c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068c6:	68fb      	ldr	r3, [r7, #12]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	080068d9 	.word	0x080068d9

080068d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068e2:	4b13      	ldr	r3, [pc, #76]	@ (8006930 <prvTaskExitError+0x58>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d00b      	beq.n	8006904 <prvTaskExitError+0x2c>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	60fb      	str	r3, [r7, #12]
}
 80068fe:	bf00      	nop
 8006900:	bf00      	nop
 8006902:	e7fd      	b.n	8006900 <prvTaskExitError+0x28>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	60bb      	str	r3, [r7, #8]
}
 8006916:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006918:	bf00      	nop
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0fc      	beq.n	800691a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006920:	bf00      	nop
 8006922:	bf00      	nop
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	20000018 	.word	0x20000018
	...

08006940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006940:	4b07      	ldr	r3, [pc, #28]	@ (8006960 <pxCurrentTCBConst2>)
 8006942:	6819      	ldr	r1, [r3, #0]
 8006944:	6808      	ldr	r0, [r1, #0]
 8006946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694a:	f380 8809 	msr	PSP, r0
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f04f 0000 	mov.w	r0, #0
 8006956:	f380 8811 	msr	BASEPRI, r0
 800695a:	4770      	bx	lr
 800695c:	f3af 8000 	nop.w

08006960 <pxCurrentTCBConst2>:
 8006960:	20000a34 	.word	0x20000a34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop

08006968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006968:	4808      	ldr	r0, [pc, #32]	@ (800698c <prvPortStartFirstTask+0x24>)
 800696a:	6800      	ldr	r0, [r0, #0]
 800696c:	6800      	ldr	r0, [r0, #0]
 800696e:	f380 8808 	msr	MSP, r0
 8006972:	f04f 0000 	mov.w	r0, #0
 8006976:	f380 8814 	msr	CONTROL, r0
 800697a:	b662      	cpsie	i
 800697c:	b661      	cpsie	f
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	df00      	svc	0
 8006988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800698a:	bf00      	nop
 800698c:	e000ed08 	.word	0xe000ed08

08006990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006996:	4b47      	ldr	r3, [pc, #284]	@ (8006ab4 <xPortStartScheduler+0x124>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a47      	ldr	r2, [pc, #284]	@ (8006ab8 <xPortStartScheduler+0x128>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d10b      	bne.n	80069b8 <xPortStartScheduler+0x28>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	613b      	str	r3, [r7, #16]
}
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	e7fd      	b.n	80069b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069b8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ab4 <xPortStartScheduler+0x124>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a3f      	ldr	r2, [pc, #252]	@ (8006abc <xPortStartScheduler+0x12c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d10b      	bne.n	80069da <xPortStartScheduler+0x4a>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	60fb      	str	r3, [r7, #12]
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	e7fd      	b.n	80069d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069da:	4b39      	ldr	r3, [pc, #228]	@ (8006ac0 <xPortStartScheduler+0x130>)
 80069dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	22ff      	movs	r2, #255	@ 0xff
 80069ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	4b31      	ldr	r3, [pc, #196]	@ (8006ac4 <xPortStartScheduler+0x134>)
 8006a00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a02:	4b31      	ldr	r3, [pc, #196]	@ (8006ac8 <xPortStartScheduler+0x138>)
 8006a04:	2207      	movs	r2, #7
 8006a06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a08:	e009      	b.n	8006a1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ac8 <xPortStartScheduler+0x138>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	4a2d      	ldr	r2, [pc, #180]	@ (8006ac8 <xPortStartScheduler+0x138>)
 8006a12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a26:	2b80      	cmp	r3, #128	@ 0x80
 8006a28:	d0ef      	beq.n	8006a0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a2a:	4b27      	ldr	r3, [pc, #156]	@ (8006ac8 <xPortStartScheduler+0x138>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f1c3 0307 	rsb	r3, r3, #7
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d00b      	beq.n	8006a4e <xPortStartScheduler+0xbe>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	60bb      	str	r3, [r7, #8]
}
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
 8006a4c:	e7fd      	b.n	8006a4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ac8 <xPortStartScheduler+0x138>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	4a1c      	ldr	r2, [pc, #112]	@ (8006ac8 <xPortStartScheduler+0x138>)
 8006a56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a58:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac8 <xPortStartScheduler+0x138>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a60:	4a19      	ldr	r2, [pc, #100]	@ (8006ac8 <xPortStartScheduler+0x138>)
 8006a62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a6c:	4b17      	ldr	r3, [pc, #92]	@ (8006acc <xPortStartScheduler+0x13c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a16      	ldr	r2, [pc, #88]	@ (8006acc <xPortStartScheduler+0x13c>)
 8006a72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a78:	4b14      	ldr	r3, [pc, #80]	@ (8006acc <xPortStartScheduler+0x13c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a13      	ldr	r2, [pc, #76]	@ (8006acc <xPortStartScheduler+0x13c>)
 8006a7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a84:	f000 f8da 	bl	8006c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a88:	4b11      	ldr	r3, [pc, #68]	@ (8006ad0 <xPortStartScheduler+0x140>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a8e:	f000 f8f9 	bl	8006c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a92:	4b10      	ldr	r3, [pc, #64]	@ (8006ad4 <xPortStartScheduler+0x144>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a0f      	ldr	r2, [pc, #60]	@ (8006ad4 <xPortStartScheduler+0x144>)
 8006a98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006a9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a9e:	f7ff ff63 	bl	8006968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006aa2:	f7ff f839 	bl	8005b18 <vTaskSwitchContext>
	prvTaskExitError();
 8006aa6:	f7ff ff17 	bl	80068d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	e000ed00 	.word	0xe000ed00
 8006ab8:	410fc271 	.word	0x410fc271
 8006abc:	410fc270 	.word	0x410fc270
 8006ac0:	e000e400 	.word	0xe000e400
 8006ac4:	20001060 	.word	0x20001060
 8006ac8:	20001064 	.word	0x20001064
 8006acc:	e000ed20 	.word	0xe000ed20
 8006ad0:	20000018 	.word	0x20000018
 8006ad4:	e000ef34 	.word	0xe000ef34

08006ad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	607b      	str	r3, [r7, #4]
}
 8006af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006af2:	4b10      	ldr	r3, [pc, #64]	@ (8006b34 <vPortEnterCritical+0x5c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3301      	adds	r3, #1
 8006af8:	4a0e      	ldr	r2, [pc, #56]	@ (8006b34 <vPortEnterCritical+0x5c>)
 8006afa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006afc:	4b0d      	ldr	r3, [pc, #52]	@ (8006b34 <vPortEnterCritical+0x5c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d110      	bne.n	8006b26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b04:	4b0c      	ldr	r3, [pc, #48]	@ (8006b38 <vPortEnterCritical+0x60>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <vPortEnterCritical+0x4e>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	603b      	str	r3, [r7, #0]
}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	e7fd      	b.n	8006b22 <vPortEnterCritical+0x4a>
	}
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	20000018 	.word	0x20000018
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b42:	4b12      	ldr	r3, [pc, #72]	@ (8006b8c <vPortExitCritical+0x50>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <vPortExitCritical+0x26>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	607b      	str	r3, [r7, #4]
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	e7fd      	b.n	8006b5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b62:	4b0a      	ldr	r3, [pc, #40]	@ (8006b8c <vPortExitCritical+0x50>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	4a08      	ldr	r2, [pc, #32]	@ (8006b8c <vPortExitCritical+0x50>)
 8006b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b6c:	4b07      	ldr	r3, [pc, #28]	@ (8006b8c <vPortExitCritical+0x50>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d105      	bne.n	8006b80 <vPortExitCritical+0x44>
 8006b74:	2300      	movs	r3, #0
 8006b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	f383 8811 	msr	BASEPRI, r3
}
 8006b7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	20000018 	.word	0x20000018

08006b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b90:	f3ef 8009 	mrs	r0, PSP
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	4b15      	ldr	r3, [pc, #84]	@ (8006bf0 <pxCurrentTCBConst>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	f01e 0f10 	tst.w	lr, #16
 8006ba0:	bf08      	it	eq
 8006ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006baa:	6010      	str	r0, [r2, #0]
 8006bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006bb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006bb4:	f380 8811 	msr	BASEPRI, r0
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f7fe ffaa 	bl	8005b18 <vTaskSwitchContext>
 8006bc4:	f04f 0000 	mov.w	r0, #0
 8006bc8:	f380 8811 	msr	BASEPRI, r0
 8006bcc:	bc09      	pop	{r0, r3}
 8006bce:	6819      	ldr	r1, [r3, #0]
 8006bd0:	6808      	ldr	r0, [r1, #0]
 8006bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd6:	f01e 0f10 	tst.w	lr, #16
 8006bda:	bf08      	it	eq
 8006bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006be0:	f380 8809 	msr	PSP, r0
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	f3af 8000 	nop.w

08006bf0 <pxCurrentTCBConst>:
 8006bf0:	20000a34 	.word	0x20000a34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop

08006bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	607b      	str	r3, [r7, #4]
}
 8006c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c12:	f7fe fec7 	bl	80059a4 <xTaskIncrementTick>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c1c:	4b06      	ldr	r3, [pc, #24]	@ (8006c38 <xPortSysTickHandler+0x40>)
 8006c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	2300      	movs	r3, #0
 8006c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	f383 8811 	msr	BASEPRI, r3
}
 8006c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c40:	4b0b      	ldr	r3, [pc, #44]	@ (8006c70 <vPortSetupTimerInterrupt+0x34>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c46:	4b0b      	ldr	r3, [pc, #44]	@ (8006c74 <vPortSetupTimerInterrupt+0x38>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c78 <vPortSetupTimerInterrupt+0x3c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a0a      	ldr	r2, [pc, #40]	@ (8006c7c <vPortSetupTimerInterrupt+0x40>)
 8006c52:	fba2 2303 	umull	r2, r3, r2, r3
 8006c56:	099b      	lsrs	r3, r3, #6
 8006c58:	4a09      	ldr	r2, [pc, #36]	@ (8006c80 <vPortSetupTimerInterrupt+0x44>)
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c5e:	4b04      	ldr	r3, [pc, #16]	@ (8006c70 <vPortSetupTimerInterrupt+0x34>)
 8006c60:	2207      	movs	r2, #7
 8006c62:	601a      	str	r2, [r3, #0]
}
 8006c64:	bf00      	nop
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	e000e010 	.word	0xe000e010
 8006c74:	e000e018 	.word	0xe000e018
 8006c78:	2000000c 	.word	0x2000000c
 8006c7c:	10624dd3 	.word	0x10624dd3
 8006c80:	e000e014 	.word	0xe000e014

08006c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006c94 <vPortEnableVFP+0x10>
 8006c88:	6801      	ldr	r1, [r0, #0]
 8006c8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006c8e:	6001      	str	r1, [r0, #0]
 8006c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c92:	bf00      	nop
 8006c94:	e000ed88 	.word	0xe000ed88

08006c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c9e:	f3ef 8305 	mrs	r3, IPSR
 8006ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b0f      	cmp	r3, #15
 8006ca8:	d915      	bls.n	8006cd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006caa:	4a18      	ldr	r2, [pc, #96]	@ (8006d0c <vPortValidateInterruptPriority+0x74>)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cb4:	4b16      	ldr	r3, [pc, #88]	@ (8006d10 <vPortValidateInterruptPriority+0x78>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	7afa      	ldrb	r2, [r7, #11]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d20b      	bcs.n	8006cd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
}
 8006cd0:	bf00      	nop
 8006cd2:	bf00      	nop
 8006cd4:	e7fd      	b.n	8006cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d14 <vPortValidateInterruptPriority+0x7c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006cde:	4b0e      	ldr	r3, [pc, #56]	@ (8006d18 <vPortValidateInterruptPriority+0x80>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d90b      	bls.n	8006cfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	603b      	str	r3, [r7, #0]
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	e7fd      	b.n	8006cfa <vPortValidateInterruptPriority+0x62>
	}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	e000e3f0 	.word	0xe000e3f0
 8006d10:	20001060 	.word	0x20001060
 8006d14:	e000ed0c 	.word	0xe000ed0c
 8006d18:	20001064 	.word	0x20001064

08006d1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08a      	sub	sp, #40	@ 0x28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d28:	f7fe fd80 	bl	800582c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ea0 <pvPortMalloc+0x184>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d34:	f000 f924 	bl	8006f80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d38:	4b5a      	ldr	r3, [pc, #360]	@ (8006ea4 <pvPortMalloc+0x188>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f040 8095 	bne.w	8006e70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01e      	beq.n	8006d8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4413      	add	r3, r2
 8006d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d015      	beq.n	8006d8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f023 0307 	bic.w	r3, r3, #7
 8006d64:	3308      	adds	r3, #8
 8006d66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00b      	beq.n	8006d8a <pvPortMalloc+0x6e>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	617b      	str	r3, [r7, #20]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d06f      	beq.n	8006e70 <pvPortMalloc+0x154>
 8006d90:	4b45      	ldr	r3, [pc, #276]	@ (8006ea8 <pvPortMalloc+0x18c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d86a      	bhi.n	8006e70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d9a:	4b44      	ldr	r3, [pc, #272]	@ (8006eac <pvPortMalloc+0x190>)
 8006d9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d9e:	4b43      	ldr	r3, [pc, #268]	@ (8006eac <pvPortMalloc+0x190>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006da4:	e004      	b.n	8006db0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d903      	bls.n	8006dc2 <pvPortMalloc+0xa6>
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1f1      	bne.n	8006da6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dc2:	4b37      	ldr	r3, [pc, #220]	@ (8006ea0 <pvPortMalloc+0x184>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d051      	beq.n	8006e70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	4413      	add	r3, r2
 8006dd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	1ad2      	subs	r2, r2, r3
 8006de6:	2308      	movs	r3, #8
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d920      	bls.n	8006e30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4413      	add	r3, r2
 8006df4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00b      	beq.n	8006e18 <pvPortMalloc+0xfc>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	613b      	str	r3, [r7, #16]
}
 8006e12:	bf00      	nop
 8006e14:	bf00      	nop
 8006e16:	e7fd      	b.n	8006e14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	1ad2      	subs	r2, r2, r3
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e2a:	69b8      	ldr	r0, [r7, #24]
 8006e2c:	f000 f90a 	bl	8007044 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e30:	4b1d      	ldr	r3, [pc, #116]	@ (8006ea8 <pvPortMalloc+0x18c>)
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ea8 <pvPortMalloc+0x18c>)
 8006e3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ea8 <pvPortMalloc+0x18c>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	4b1b      	ldr	r3, [pc, #108]	@ (8006eb0 <pvPortMalloc+0x194>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d203      	bcs.n	8006e52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e4a:	4b17      	ldr	r3, [pc, #92]	@ (8006ea8 <pvPortMalloc+0x18c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a18      	ldr	r2, [pc, #96]	@ (8006eb0 <pvPortMalloc+0x194>)
 8006e50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	4b13      	ldr	r3, [pc, #76]	@ (8006ea4 <pvPortMalloc+0x188>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e62:	2200      	movs	r2, #0
 8006e64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e66:	4b13      	ldr	r3, [pc, #76]	@ (8006eb4 <pvPortMalloc+0x198>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	4a11      	ldr	r2, [pc, #68]	@ (8006eb4 <pvPortMalloc+0x198>)
 8006e6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e70:	f7fe fcea 	bl	8005848 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00b      	beq.n	8006e96 <pvPortMalloc+0x17a>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	60fb      	str	r3, [r7, #12]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <pvPortMalloc+0x176>
	return pvReturn;
 8006e96:	69fb      	ldr	r3, [r7, #28]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3728      	adds	r7, #40	@ 0x28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	20004c70 	.word	0x20004c70
 8006ea4:	20004c84 	.word	0x20004c84
 8006ea8:	20004c74 	.word	0x20004c74
 8006eac:	20004c68 	.word	0x20004c68
 8006eb0:	20004c78 	.word	0x20004c78
 8006eb4:	20004c7c 	.word	0x20004c7c

08006eb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d04f      	beq.n	8006f6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006eca:	2308      	movs	r3, #8
 8006ecc:	425b      	negs	r3, r3
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	4b25      	ldr	r3, [pc, #148]	@ (8006f74 <vPortFree+0xbc>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10b      	bne.n	8006efe <vPortFree+0x46>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	60fb      	str	r3, [r7, #12]
}
 8006ef8:	bf00      	nop
 8006efa:	bf00      	nop
 8006efc:	e7fd      	b.n	8006efa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00b      	beq.n	8006f1e <vPortFree+0x66>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	60bb      	str	r3, [r7, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	bf00      	nop
 8006f1c:	e7fd      	b.n	8006f1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	4b14      	ldr	r3, [pc, #80]	@ (8006f74 <vPortFree+0xbc>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4013      	ands	r3, r2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01e      	beq.n	8006f6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d11a      	bne.n	8006f6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	4b0e      	ldr	r3, [pc, #56]	@ (8006f74 <vPortFree+0xbc>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	401a      	ands	r2, r3
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f44:	f7fe fc72 	bl	800582c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f78 <vPortFree+0xc0>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4413      	add	r3, r2
 8006f52:	4a09      	ldr	r2, [pc, #36]	@ (8006f78 <vPortFree+0xc0>)
 8006f54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f56:	6938      	ldr	r0, [r7, #16]
 8006f58:	f000 f874 	bl	8007044 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f5c:	4b07      	ldr	r3, [pc, #28]	@ (8006f7c <vPortFree+0xc4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3301      	adds	r3, #1
 8006f62:	4a06      	ldr	r2, [pc, #24]	@ (8006f7c <vPortFree+0xc4>)
 8006f64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f66:	f7fe fc6f 	bl	8005848 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f6a:	bf00      	nop
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20004c84 	.word	0x20004c84
 8006f78:	20004c74 	.word	0x20004c74
 8006f7c:	20004c80 	.word	0x20004c80

08006f80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006f8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f8c:	4b27      	ldr	r3, [pc, #156]	@ (800702c <prvHeapInit+0xac>)
 8006f8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00c      	beq.n	8006fb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3307      	adds	r3, #7
 8006f9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 0307 	bic.w	r3, r3, #7
 8006fa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	4a1f      	ldr	r2, [pc, #124]	@ (800702c <prvHeapInit+0xac>)
 8006fb0:	4413      	add	r3, r2
 8006fb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8007030 <prvHeapInit+0xb0>)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8007030 <prvHeapInit+0xb0>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	4413      	add	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fcc:	2208      	movs	r2, #8
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0307 	bic.w	r3, r3, #7
 8006fda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4a15      	ldr	r2, [pc, #84]	@ (8007034 <prvHeapInit+0xb4>)
 8006fe0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fe2:	4b14      	ldr	r3, [pc, #80]	@ (8007034 <prvHeapInit+0xb4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fea:	4b12      	ldr	r3, [pc, #72]	@ (8007034 <prvHeapInit+0xb4>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	1ad2      	subs	r2, r2, r3
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007000:	4b0c      	ldr	r3, [pc, #48]	@ (8007034 <prvHeapInit+0xb4>)
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	4a0a      	ldr	r2, [pc, #40]	@ (8007038 <prvHeapInit+0xb8>)
 800700e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	4a09      	ldr	r2, [pc, #36]	@ (800703c <prvHeapInit+0xbc>)
 8007016:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007018:	4b09      	ldr	r3, [pc, #36]	@ (8007040 <prvHeapInit+0xc0>)
 800701a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800701e:	601a      	str	r2, [r3, #0]
}
 8007020:	bf00      	nop
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	20001068 	.word	0x20001068
 8007030:	20004c68 	.word	0x20004c68
 8007034:	20004c70 	.word	0x20004c70
 8007038:	20004c78 	.word	0x20004c78
 800703c:	20004c74 	.word	0x20004c74
 8007040:	20004c84 	.word	0x20004c84

08007044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800704c:	4b28      	ldr	r3, [pc, #160]	@ (80070f0 <prvInsertBlockIntoFreeList+0xac>)
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	e002      	b.n	8007058 <prvInsertBlockIntoFreeList+0x14>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	429a      	cmp	r2, r3
 8007060:	d8f7      	bhi.n	8007052 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	4413      	add	r3, r2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	429a      	cmp	r2, r3
 8007072:	d108      	bne.n	8007086 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	441a      	add	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	441a      	add	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d118      	bne.n	80070cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	4b15      	ldr	r3, [pc, #84]	@ (80070f4 <prvInsertBlockIntoFreeList+0xb0>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d00d      	beq.n	80070c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	441a      	add	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	e008      	b.n	80070d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070c2:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <prvInsertBlockIntoFreeList+0xb0>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e003      	b.n	80070d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d002      	beq.n	80070e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070e2:	bf00      	nop
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20004c68 	.word	0x20004c68
 80070f4:	20004c70 	.word	0x20004c70

080070f8 <siprintf>:
 80070f8:	b40e      	push	{r1, r2, r3}
 80070fa:	b500      	push	{lr}
 80070fc:	b09c      	sub	sp, #112	@ 0x70
 80070fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8007100:	9002      	str	r0, [sp, #8]
 8007102:	9006      	str	r0, [sp, #24]
 8007104:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007108:	4809      	ldr	r0, [pc, #36]	@ (8007130 <siprintf+0x38>)
 800710a:	9107      	str	r1, [sp, #28]
 800710c:	9104      	str	r1, [sp, #16]
 800710e:	4909      	ldr	r1, [pc, #36]	@ (8007134 <siprintf+0x3c>)
 8007110:	f853 2b04 	ldr.w	r2, [r3], #4
 8007114:	9105      	str	r1, [sp, #20]
 8007116:	6800      	ldr	r0, [r0, #0]
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	a902      	add	r1, sp, #8
 800711c:	f000 f9a2 	bl	8007464 <_svfiprintf_r>
 8007120:	9b02      	ldr	r3, [sp, #8]
 8007122:	2200      	movs	r2, #0
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	b01c      	add	sp, #112	@ 0x70
 8007128:	f85d eb04 	ldr.w	lr, [sp], #4
 800712c:	b003      	add	sp, #12
 800712e:	4770      	bx	lr
 8007130:	2000001c 	.word	0x2000001c
 8007134:	ffff0208 	.word	0xffff0208

08007138 <memset>:
 8007138:	4402      	add	r2, r0
 800713a:	4603      	mov	r3, r0
 800713c:	4293      	cmp	r3, r2
 800713e:	d100      	bne.n	8007142 <memset+0xa>
 8007140:	4770      	bx	lr
 8007142:	f803 1b01 	strb.w	r1, [r3], #1
 8007146:	e7f9      	b.n	800713c <memset+0x4>

08007148 <__errno>:
 8007148:	4b01      	ldr	r3, [pc, #4]	@ (8007150 <__errno+0x8>)
 800714a:	6818      	ldr	r0, [r3, #0]
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	2000001c 	.word	0x2000001c

08007154 <__libc_init_array>:
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	4d0d      	ldr	r5, [pc, #52]	@ (800718c <__libc_init_array+0x38>)
 8007158:	4c0d      	ldr	r4, [pc, #52]	@ (8007190 <__libc_init_array+0x3c>)
 800715a:	1b64      	subs	r4, r4, r5
 800715c:	10a4      	asrs	r4, r4, #2
 800715e:	2600      	movs	r6, #0
 8007160:	42a6      	cmp	r6, r4
 8007162:	d109      	bne.n	8007178 <__libc_init_array+0x24>
 8007164:	4d0b      	ldr	r5, [pc, #44]	@ (8007194 <__libc_init_array+0x40>)
 8007166:	4c0c      	ldr	r4, [pc, #48]	@ (8007198 <__libc_init_array+0x44>)
 8007168:	f000 fc66 	bl	8007a38 <_init>
 800716c:	1b64      	subs	r4, r4, r5
 800716e:	10a4      	asrs	r4, r4, #2
 8007170:	2600      	movs	r6, #0
 8007172:	42a6      	cmp	r6, r4
 8007174:	d105      	bne.n	8007182 <__libc_init_array+0x2e>
 8007176:	bd70      	pop	{r4, r5, r6, pc}
 8007178:	f855 3b04 	ldr.w	r3, [r5], #4
 800717c:	4798      	blx	r3
 800717e:	3601      	adds	r6, #1
 8007180:	e7ee      	b.n	8007160 <__libc_init_array+0xc>
 8007182:	f855 3b04 	ldr.w	r3, [r5], #4
 8007186:	4798      	blx	r3
 8007188:	3601      	adds	r6, #1
 800718a:	e7f2      	b.n	8007172 <__libc_init_array+0x1e>
 800718c:	08007b58 	.word	0x08007b58
 8007190:	08007b58 	.word	0x08007b58
 8007194:	08007b58 	.word	0x08007b58
 8007198:	08007b5c 	.word	0x08007b5c

0800719c <__retarget_lock_acquire_recursive>:
 800719c:	4770      	bx	lr

0800719e <__retarget_lock_release_recursive>:
 800719e:	4770      	bx	lr

080071a0 <memcpy>:
 80071a0:	440a      	add	r2, r1
 80071a2:	4291      	cmp	r1, r2
 80071a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071a8:	d100      	bne.n	80071ac <memcpy+0xc>
 80071aa:	4770      	bx	lr
 80071ac:	b510      	push	{r4, lr}
 80071ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071b6:	4291      	cmp	r1, r2
 80071b8:	d1f9      	bne.n	80071ae <memcpy+0xe>
 80071ba:	bd10      	pop	{r4, pc}

080071bc <_free_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4605      	mov	r5, r0
 80071c0:	2900      	cmp	r1, #0
 80071c2:	d041      	beq.n	8007248 <_free_r+0x8c>
 80071c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071c8:	1f0c      	subs	r4, r1, #4
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bfb8      	it	lt
 80071ce:	18e4      	addlt	r4, r4, r3
 80071d0:	f000 f8e0 	bl	8007394 <__malloc_lock>
 80071d4:	4a1d      	ldr	r2, [pc, #116]	@ (800724c <_free_r+0x90>)
 80071d6:	6813      	ldr	r3, [r2, #0]
 80071d8:	b933      	cbnz	r3, 80071e8 <_free_r+0x2c>
 80071da:	6063      	str	r3, [r4, #4]
 80071dc:	6014      	str	r4, [r2, #0]
 80071de:	4628      	mov	r0, r5
 80071e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071e4:	f000 b8dc 	b.w	80073a0 <__malloc_unlock>
 80071e8:	42a3      	cmp	r3, r4
 80071ea:	d908      	bls.n	80071fe <_free_r+0x42>
 80071ec:	6820      	ldr	r0, [r4, #0]
 80071ee:	1821      	adds	r1, r4, r0
 80071f0:	428b      	cmp	r3, r1
 80071f2:	bf01      	itttt	eq
 80071f4:	6819      	ldreq	r1, [r3, #0]
 80071f6:	685b      	ldreq	r3, [r3, #4]
 80071f8:	1809      	addeq	r1, r1, r0
 80071fa:	6021      	streq	r1, [r4, #0]
 80071fc:	e7ed      	b.n	80071da <_free_r+0x1e>
 80071fe:	461a      	mov	r2, r3
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	b10b      	cbz	r3, 8007208 <_free_r+0x4c>
 8007204:	42a3      	cmp	r3, r4
 8007206:	d9fa      	bls.n	80071fe <_free_r+0x42>
 8007208:	6811      	ldr	r1, [r2, #0]
 800720a:	1850      	adds	r0, r2, r1
 800720c:	42a0      	cmp	r0, r4
 800720e:	d10b      	bne.n	8007228 <_free_r+0x6c>
 8007210:	6820      	ldr	r0, [r4, #0]
 8007212:	4401      	add	r1, r0
 8007214:	1850      	adds	r0, r2, r1
 8007216:	4283      	cmp	r3, r0
 8007218:	6011      	str	r1, [r2, #0]
 800721a:	d1e0      	bne.n	80071de <_free_r+0x22>
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	6053      	str	r3, [r2, #4]
 8007222:	4408      	add	r0, r1
 8007224:	6010      	str	r0, [r2, #0]
 8007226:	e7da      	b.n	80071de <_free_r+0x22>
 8007228:	d902      	bls.n	8007230 <_free_r+0x74>
 800722a:	230c      	movs	r3, #12
 800722c:	602b      	str	r3, [r5, #0]
 800722e:	e7d6      	b.n	80071de <_free_r+0x22>
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	1821      	adds	r1, r4, r0
 8007234:	428b      	cmp	r3, r1
 8007236:	bf04      	itt	eq
 8007238:	6819      	ldreq	r1, [r3, #0]
 800723a:	685b      	ldreq	r3, [r3, #4]
 800723c:	6063      	str	r3, [r4, #4]
 800723e:	bf04      	itt	eq
 8007240:	1809      	addeq	r1, r1, r0
 8007242:	6021      	streq	r1, [r4, #0]
 8007244:	6054      	str	r4, [r2, #4]
 8007246:	e7ca      	b.n	80071de <_free_r+0x22>
 8007248:	bd38      	pop	{r3, r4, r5, pc}
 800724a:	bf00      	nop
 800724c:	20004dcc 	.word	0x20004dcc

08007250 <sbrk_aligned>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	4e0f      	ldr	r6, [pc, #60]	@ (8007290 <sbrk_aligned+0x40>)
 8007254:	460c      	mov	r4, r1
 8007256:	6831      	ldr	r1, [r6, #0]
 8007258:	4605      	mov	r5, r0
 800725a:	b911      	cbnz	r1, 8007262 <sbrk_aligned+0x12>
 800725c:	f000 fba6 	bl	80079ac <_sbrk_r>
 8007260:	6030      	str	r0, [r6, #0]
 8007262:	4621      	mov	r1, r4
 8007264:	4628      	mov	r0, r5
 8007266:	f000 fba1 	bl	80079ac <_sbrk_r>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	d103      	bne.n	8007276 <sbrk_aligned+0x26>
 800726e:	f04f 34ff 	mov.w	r4, #4294967295
 8007272:	4620      	mov	r0, r4
 8007274:	bd70      	pop	{r4, r5, r6, pc}
 8007276:	1cc4      	adds	r4, r0, #3
 8007278:	f024 0403 	bic.w	r4, r4, #3
 800727c:	42a0      	cmp	r0, r4
 800727e:	d0f8      	beq.n	8007272 <sbrk_aligned+0x22>
 8007280:	1a21      	subs	r1, r4, r0
 8007282:	4628      	mov	r0, r5
 8007284:	f000 fb92 	bl	80079ac <_sbrk_r>
 8007288:	3001      	adds	r0, #1
 800728a:	d1f2      	bne.n	8007272 <sbrk_aligned+0x22>
 800728c:	e7ef      	b.n	800726e <sbrk_aligned+0x1e>
 800728e:	bf00      	nop
 8007290:	20004dc8 	.word	0x20004dc8

08007294 <_malloc_r>:
 8007294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007298:	1ccd      	adds	r5, r1, #3
 800729a:	f025 0503 	bic.w	r5, r5, #3
 800729e:	3508      	adds	r5, #8
 80072a0:	2d0c      	cmp	r5, #12
 80072a2:	bf38      	it	cc
 80072a4:	250c      	movcc	r5, #12
 80072a6:	2d00      	cmp	r5, #0
 80072a8:	4606      	mov	r6, r0
 80072aa:	db01      	blt.n	80072b0 <_malloc_r+0x1c>
 80072ac:	42a9      	cmp	r1, r5
 80072ae:	d904      	bls.n	80072ba <_malloc_r+0x26>
 80072b0:	230c      	movs	r3, #12
 80072b2:	6033      	str	r3, [r6, #0]
 80072b4:	2000      	movs	r0, #0
 80072b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007390 <_malloc_r+0xfc>
 80072be:	f000 f869 	bl	8007394 <__malloc_lock>
 80072c2:	f8d8 3000 	ldr.w	r3, [r8]
 80072c6:	461c      	mov	r4, r3
 80072c8:	bb44      	cbnz	r4, 800731c <_malloc_r+0x88>
 80072ca:	4629      	mov	r1, r5
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff ffbf 	bl	8007250 <sbrk_aligned>
 80072d2:	1c43      	adds	r3, r0, #1
 80072d4:	4604      	mov	r4, r0
 80072d6:	d158      	bne.n	800738a <_malloc_r+0xf6>
 80072d8:	f8d8 4000 	ldr.w	r4, [r8]
 80072dc:	4627      	mov	r7, r4
 80072de:	2f00      	cmp	r7, #0
 80072e0:	d143      	bne.n	800736a <_malloc_r+0xd6>
 80072e2:	2c00      	cmp	r4, #0
 80072e4:	d04b      	beq.n	800737e <_malloc_r+0xea>
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	4639      	mov	r1, r7
 80072ea:	4630      	mov	r0, r6
 80072ec:	eb04 0903 	add.w	r9, r4, r3
 80072f0:	f000 fb5c 	bl	80079ac <_sbrk_r>
 80072f4:	4581      	cmp	r9, r0
 80072f6:	d142      	bne.n	800737e <_malloc_r+0xea>
 80072f8:	6821      	ldr	r1, [r4, #0]
 80072fa:	1a6d      	subs	r5, r5, r1
 80072fc:	4629      	mov	r1, r5
 80072fe:	4630      	mov	r0, r6
 8007300:	f7ff ffa6 	bl	8007250 <sbrk_aligned>
 8007304:	3001      	adds	r0, #1
 8007306:	d03a      	beq.n	800737e <_malloc_r+0xea>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	442b      	add	r3, r5
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	f8d8 3000 	ldr.w	r3, [r8]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	bb62      	cbnz	r2, 8007370 <_malloc_r+0xdc>
 8007316:	f8c8 7000 	str.w	r7, [r8]
 800731a:	e00f      	b.n	800733c <_malloc_r+0xa8>
 800731c:	6822      	ldr	r2, [r4, #0]
 800731e:	1b52      	subs	r2, r2, r5
 8007320:	d420      	bmi.n	8007364 <_malloc_r+0xd0>
 8007322:	2a0b      	cmp	r2, #11
 8007324:	d917      	bls.n	8007356 <_malloc_r+0xc2>
 8007326:	1961      	adds	r1, r4, r5
 8007328:	42a3      	cmp	r3, r4
 800732a:	6025      	str	r5, [r4, #0]
 800732c:	bf18      	it	ne
 800732e:	6059      	strne	r1, [r3, #4]
 8007330:	6863      	ldr	r3, [r4, #4]
 8007332:	bf08      	it	eq
 8007334:	f8c8 1000 	streq.w	r1, [r8]
 8007338:	5162      	str	r2, [r4, r5]
 800733a:	604b      	str	r3, [r1, #4]
 800733c:	4630      	mov	r0, r6
 800733e:	f000 f82f 	bl	80073a0 <__malloc_unlock>
 8007342:	f104 000b 	add.w	r0, r4, #11
 8007346:	1d23      	adds	r3, r4, #4
 8007348:	f020 0007 	bic.w	r0, r0, #7
 800734c:	1ac2      	subs	r2, r0, r3
 800734e:	bf1c      	itt	ne
 8007350:	1a1b      	subne	r3, r3, r0
 8007352:	50a3      	strne	r3, [r4, r2]
 8007354:	e7af      	b.n	80072b6 <_malloc_r+0x22>
 8007356:	6862      	ldr	r2, [r4, #4]
 8007358:	42a3      	cmp	r3, r4
 800735a:	bf0c      	ite	eq
 800735c:	f8c8 2000 	streq.w	r2, [r8]
 8007360:	605a      	strne	r2, [r3, #4]
 8007362:	e7eb      	b.n	800733c <_malloc_r+0xa8>
 8007364:	4623      	mov	r3, r4
 8007366:	6864      	ldr	r4, [r4, #4]
 8007368:	e7ae      	b.n	80072c8 <_malloc_r+0x34>
 800736a:	463c      	mov	r4, r7
 800736c:	687f      	ldr	r7, [r7, #4]
 800736e:	e7b6      	b.n	80072de <_malloc_r+0x4a>
 8007370:	461a      	mov	r2, r3
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	42a3      	cmp	r3, r4
 8007376:	d1fb      	bne.n	8007370 <_malloc_r+0xdc>
 8007378:	2300      	movs	r3, #0
 800737a:	6053      	str	r3, [r2, #4]
 800737c:	e7de      	b.n	800733c <_malloc_r+0xa8>
 800737e:	230c      	movs	r3, #12
 8007380:	6033      	str	r3, [r6, #0]
 8007382:	4630      	mov	r0, r6
 8007384:	f000 f80c 	bl	80073a0 <__malloc_unlock>
 8007388:	e794      	b.n	80072b4 <_malloc_r+0x20>
 800738a:	6005      	str	r5, [r0, #0]
 800738c:	e7d6      	b.n	800733c <_malloc_r+0xa8>
 800738e:	bf00      	nop
 8007390:	20004dcc 	.word	0x20004dcc

08007394 <__malloc_lock>:
 8007394:	4801      	ldr	r0, [pc, #4]	@ (800739c <__malloc_lock+0x8>)
 8007396:	f7ff bf01 	b.w	800719c <__retarget_lock_acquire_recursive>
 800739a:	bf00      	nop
 800739c:	20004dc4 	.word	0x20004dc4

080073a0 <__malloc_unlock>:
 80073a0:	4801      	ldr	r0, [pc, #4]	@ (80073a8 <__malloc_unlock+0x8>)
 80073a2:	f7ff befc 	b.w	800719e <__retarget_lock_release_recursive>
 80073a6:	bf00      	nop
 80073a8:	20004dc4 	.word	0x20004dc4

080073ac <__ssputs_r>:
 80073ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b0:	688e      	ldr	r6, [r1, #8]
 80073b2:	461f      	mov	r7, r3
 80073b4:	42be      	cmp	r6, r7
 80073b6:	680b      	ldr	r3, [r1, #0]
 80073b8:	4682      	mov	sl, r0
 80073ba:	460c      	mov	r4, r1
 80073bc:	4690      	mov	r8, r2
 80073be:	d82d      	bhi.n	800741c <__ssputs_r+0x70>
 80073c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80073c8:	d026      	beq.n	8007418 <__ssputs_r+0x6c>
 80073ca:	6965      	ldr	r5, [r4, #20]
 80073cc:	6909      	ldr	r1, [r1, #16]
 80073ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073d2:	eba3 0901 	sub.w	r9, r3, r1
 80073d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073da:	1c7b      	adds	r3, r7, #1
 80073dc:	444b      	add	r3, r9
 80073de:	106d      	asrs	r5, r5, #1
 80073e0:	429d      	cmp	r5, r3
 80073e2:	bf38      	it	cc
 80073e4:	461d      	movcc	r5, r3
 80073e6:	0553      	lsls	r3, r2, #21
 80073e8:	d527      	bpl.n	800743a <__ssputs_r+0x8e>
 80073ea:	4629      	mov	r1, r5
 80073ec:	f7ff ff52 	bl	8007294 <_malloc_r>
 80073f0:	4606      	mov	r6, r0
 80073f2:	b360      	cbz	r0, 800744e <__ssputs_r+0xa2>
 80073f4:	6921      	ldr	r1, [r4, #16]
 80073f6:	464a      	mov	r2, r9
 80073f8:	f7ff fed2 	bl	80071a0 <memcpy>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007406:	81a3      	strh	r3, [r4, #12]
 8007408:	6126      	str	r6, [r4, #16]
 800740a:	6165      	str	r5, [r4, #20]
 800740c:	444e      	add	r6, r9
 800740e:	eba5 0509 	sub.w	r5, r5, r9
 8007412:	6026      	str	r6, [r4, #0]
 8007414:	60a5      	str	r5, [r4, #8]
 8007416:	463e      	mov	r6, r7
 8007418:	42be      	cmp	r6, r7
 800741a:	d900      	bls.n	800741e <__ssputs_r+0x72>
 800741c:	463e      	mov	r6, r7
 800741e:	6820      	ldr	r0, [r4, #0]
 8007420:	4632      	mov	r2, r6
 8007422:	4641      	mov	r1, r8
 8007424:	f000 faa8 	bl	8007978 <memmove>
 8007428:	68a3      	ldr	r3, [r4, #8]
 800742a:	1b9b      	subs	r3, r3, r6
 800742c:	60a3      	str	r3, [r4, #8]
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	4433      	add	r3, r6
 8007432:	6023      	str	r3, [r4, #0]
 8007434:	2000      	movs	r0, #0
 8007436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800743a:	462a      	mov	r2, r5
 800743c:	f000 fac6 	bl	80079cc <_realloc_r>
 8007440:	4606      	mov	r6, r0
 8007442:	2800      	cmp	r0, #0
 8007444:	d1e0      	bne.n	8007408 <__ssputs_r+0x5c>
 8007446:	6921      	ldr	r1, [r4, #16]
 8007448:	4650      	mov	r0, sl
 800744a:	f7ff feb7 	bl	80071bc <_free_r>
 800744e:	230c      	movs	r3, #12
 8007450:	f8ca 3000 	str.w	r3, [sl]
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800745a:	81a3      	strh	r3, [r4, #12]
 800745c:	f04f 30ff 	mov.w	r0, #4294967295
 8007460:	e7e9      	b.n	8007436 <__ssputs_r+0x8a>
	...

08007464 <_svfiprintf_r>:
 8007464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007468:	4698      	mov	r8, r3
 800746a:	898b      	ldrh	r3, [r1, #12]
 800746c:	061b      	lsls	r3, r3, #24
 800746e:	b09d      	sub	sp, #116	@ 0x74
 8007470:	4607      	mov	r7, r0
 8007472:	460d      	mov	r5, r1
 8007474:	4614      	mov	r4, r2
 8007476:	d510      	bpl.n	800749a <_svfiprintf_r+0x36>
 8007478:	690b      	ldr	r3, [r1, #16]
 800747a:	b973      	cbnz	r3, 800749a <_svfiprintf_r+0x36>
 800747c:	2140      	movs	r1, #64	@ 0x40
 800747e:	f7ff ff09 	bl	8007294 <_malloc_r>
 8007482:	6028      	str	r0, [r5, #0]
 8007484:	6128      	str	r0, [r5, #16]
 8007486:	b930      	cbnz	r0, 8007496 <_svfiprintf_r+0x32>
 8007488:	230c      	movs	r3, #12
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	b01d      	add	sp, #116	@ 0x74
 8007492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007496:	2340      	movs	r3, #64	@ 0x40
 8007498:	616b      	str	r3, [r5, #20]
 800749a:	2300      	movs	r3, #0
 800749c:	9309      	str	r3, [sp, #36]	@ 0x24
 800749e:	2320      	movs	r3, #32
 80074a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80074a8:	2330      	movs	r3, #48	@ 0x30
 80074aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007648 <_svfiprintf_r+0x1e4>
 80074ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074b2:	f04f 0901 	mov.w	r9, #1
 80074b6:	4623      	mov	r3, r4
 80074b8:	469a      	mov	sl, r3
 80074ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074be:	b10a      	cbz	r2, 80074c4 <_svfiprintf_r+0x60>
 80074c0:	2a25      	cmp	r2, #37	@ 0x25
 80074c2:	d1f9      	bne.n	80074b8 <_svfiprintf_r+0x54>
 80074c4:	ebba 0b04 	subs.w	fp, sl, r4
 80074c8:	d00b      	beq.n	80074e2 <_svfiprintf_r+0x7e>
 80074ca:	465b      	mov	r3, fp
 80074cc:	4622      	mov	r2, r4
 80074ce:	4629      	mov	r1, r5
 80074d0:	4638      	mov	r0, r7
 80074d2:	f7ff ff6b 	bl	80073ac <__ssputs_r>
 80074d6:	3001      	adds	r0, #1
 80074d8:	f000 80a7 	beq.w	800762a <_svfiprintf_r+0x1c6>
 80074dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074de:	445a      	add	r2, fp
 80074e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80074e2:	f89a 3000 	ldrb.w	r3, [sl]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 809f 	beq.w	800762a <_svfiprintf_r+0x1c6>
 80074ec:	2300      	movs	r3, #0
 80074ee:	f04f 32ff 	mov.w	r2, #4294967295
 80074f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074f6:	f10a 0a01 	add.w	sl, sl, #1
 80074fa:	9304      	str	r3, [sp, #16]
 80074fc:	9307      	str	r3, [sp, #28]
 80074fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007502:	931a      	str	r3, [sp, #104]	@ 0x68
 8007504:	4654      	mov	r4, sl
 8007506:	2205      	movs	r2, #5
 8007508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800750c:	484e      	ldr	r0, [pc, #312]	@ (8007648 <_svfiprintf_r+0x1e4>)
 800750e:	f7f8 fe6f 	bl	80001f0 <memchr>
 8007512:	9a04      	ldr	r2, [sp, #16]
 8007514:	b9d8      	cbnz	r0, 800754e <_svfiprintf_r+0xea>
 8007516:	06d0      	lsls	r0, r2, #27
 8007518:	bf44      	itt	mi
 800751a:	2320      	movmi	r3, #32
 800751c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007520:	0711      	lsls	r1, r2, #28
 8007522:	bf44      	itt	mi
 8007524:	232b      	movmi	r3, #43	@ 0x2b
 8007526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800752a:	f89a 3000 	ldrb.w	r3, [sl]
 800752e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007530:	d015      	beq.n	800755e <_svfiprintf_r+0xfa>
 8007532:	9a07      	ldr	r2, [sp, #28]
 8007534:	4654      	mov	r4, sl
 8007536:	2000      	movs	r0, #0
 8007538:	f04f 0c0a 	mov.w	ip, #10
 800753c:	4621      	mov	r1, r4
 800753e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007542:	3b30      	subs	r3, #48	@ 0x30
 8007544:	2b09      	cmp	r3, #9
 8007546:	d94b      	bls.n	80075e0 <_svfiprintf_r+0x17c>
 8007548:	b1b0      	cbz	r0, 8007578 <_svfiprintf_r+0x114>
 800754a:	9207      	str	r2, [sp, #28]
 800754c:	e014      	b.n	8007578 <_svfiprintf_r+0x114>
 800754e:	eba0 0308 	sub.w	r3, r0, r8
 8007552:	fa09 f303 	lsl.w	r3, r9, r3
 8007556:	4313      	orrs	r3, r2
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	46a2      	mov	sl, r4
 800755c:	e7d2      	b.n	8007504 <_svfiprintf_r+0xa0>
 800755e:	9b03      	ldr	r3, [sp, #12]
 8007560:	1d19      	adds	r1, r3, #4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	9103      	str	r1, [sp, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	bfbb      	ittet	lt
 800756a:	425b      	neglt	r3, r3
 800756c:	f042 0202 	orrlt.w	r2, r2, #2
 8007570:	9307      	strge	r3, [sp, #28]
 8007572:	9307      	strlt	r3, [sp, #28]
 8007574:	bfb8      	it	lt
 8007576:	9204      	strlt	r2, [sp, #16]
 8007578:	7823      	ldrb	r3, [r4, #0]
 800757a:	2b2e      	cmp	r3, #46	@ 0x2e
 800757c:	d10a      	bne.n	8007594 <_svfiprintf_r+0x130>
 800757e:	7863      	ldrb	r3, [r4, #1]
 8007580:	2b2a      	cmp	r3, #42	@ 0x2a
 8007582:	d132      	bne.n	80075ea <_svfiprintf_r+0x186>
 8007584:	9b03      	ldr	r3, [sp, #12]
 8007586:	1d1a      	adds	r2, r3, #4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	9203      	str	r2, [sp, #12]
 800758c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007590:	3402      	adds	r4, #2
 8007592:	9305      	str	r3, [sp, #20]
 8007594:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007658 <_svfiprintf_r+0x1f4>
 8007598:	7821      	ldrb	r1, [r4, #0]
 800759a:	2203      	movs	r2, #3
 800759c:	4650      	mov	r0, sl
 800759e:	f7f8 fe27 	bl	80001f0 <memchr>
 80075a2:	b138      	cbz	r0, 80075b4 <_svfiprintf_r+0x150>
 80075a4:	9b04      	ldr	r3, [sp, #16]
 80075a6:	eba0 000a 	sub.w	r0, r0, sl
 80075aa:	2240      	movs	r2, #64	@ 0x40
 80075ac:	4082      	lsls	r2, r0
 80075ae:	4313      	orrs	r3, r2
 80075b0:	3401      	adds	r4, #1
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b8:	4824      	ldr	r0, [pc, #144]	@ (800764c <_svfiprintf_r+0x1e8>)
 80075ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075be:	2206      	movs	r2, #6
 80075c0:	f7f8 fe16 	bl	80001f0 <memchr>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d036      	beq.n	8007636 <_svfiprintf_r+0x1d2>
 80075c8:	4b21      	ldr	r3, [pc, #132]	@ (8007650 <_svfiprintf_r+0x1ec>)
 80075ca:	bb1b      	cbnz	r3, 8007614 <_svfiprintf_r+0x1b0>
 80075cc:	9b03      	ldr	r3, [sp, #12]
 80075ce:	3307      	adds	r3, #7
 80075d0:	f023 0307 	bic.w	r3, r3, #7
 80075d4:	3308      	adds	r3, #8
 80075d6:	9303      	str	r3, [sp, #12]
 80075d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075da:	4433      	add	r3, r6
 80075dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80075de:	e76a      	b.n	80074b6 <_svfiprintf_r+0x52>
 80075e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80075e4:	460c      	mov	r4, r1
 80075e6:	2001      	movs	r0, #1
 80075e8:	e7a8      	b.n	800753c <_svfiprintf_r+0xd8>
 80075ea:	2300      	movs	r3, #0
 80075ec:	3401      	adds	r4, #1
 80075ee:	9305      	str	r3, [sp, #20]
 80075f0:	4619      	mov	r1, r3
 80075f2:	f04f 0c0a 	mov.w	ip, #10
 80075f6:	4620      	mov	r0, r4
 80075f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075fc:	3a30      	subs	r2, #48	@ 0x30
 80075fe:	2a09      	cmp	r2, #9
 8007600:	d903      	bls.n	800760a <_svfiprintf_r+0x1a6>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0c6      	beq.n	8007594 <_svfiprintf_r+0x130>
 8007606:	9105      	str	r1, [sp, #20]
 8007608:	e7c4      	b.n	8007594 <_svfiprintf_r+0x130>
 800760a:	fb0c 2101 	mla	r1, ip, r1, r2
 800760e:	4604      	mov	r4, r0
 8007610:	2301      	movs	r3, #1
 8007612:	e7f0      	b.n	80075f6 <_svfiprintf_r+0x192>
 8007614:	ab03      	add	r3, sp, #12
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	462a      	mov	r2, r5
 800761a:	4b0e      	ldr	r3, [pc, #56]	@ (8007654 <_svfiprintf_r+0x1f0>)
 800761c:	a904      	add	r1, sp, #16
 800761e:	4638      	mov	r0, r7
 8007620:	f3af 8000 	nop.w
 8007624:	1c42      	adds	r2, r0, #1
 8007626:	4606      	mov	r6, r0
 8007628:	d1d6      	bne.n	80075d8 <_svfiprintf_r+0x174>
 800762a:	89ab      	ldrh	r3, [r5, #12]
 800762c:	065b      	lsls	r3, r3, #25
 800762e:	f53f af2d 	bmi.w	800748c <_svfiprintf_r+0x28>
 8007632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007634:	e72c      	b.n	8007490 <_svfiprintf_r+0x2c>
 8007636:	ab03      	add	r3, sp, #12
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	462a      	mov	r2, r5
 800763c:	4b05      	ldr	r3, [pc, #20]	@ (8007654 <_svfiprintf_r+0x1f0>)
 800763e:	a904      	add	r1, sp, #16
 8007640:	4638      	mov	r0, r7
 8007642:	f000 f879 	bl	8007738 <_printf_i>
 8007646:	e7ed      	b.n	8007624 <_svfiprintf_r+0x1c0>
 8007648:	08007b1c 	.word	0x08007b1c
 800764c:	08007b26 	.word	0x08007b26
 8007650:	00000000 	.word	0x00000000
 8007654:	080073ad 	.word	0x080073ad
 8007658:	08007b22 	.word	0x08007b22

0800765c <_printf_common>:
 800765c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007660:	4616      	mov	r6, r2
 8007662:	4698      	mov	r8, r3
 8007664:	688a      	ldr	r2, [r1, #8]
 8007666:	690b      	ldr	r3, [r1, #16]
 8007668:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800766c:	4293      	cmp	r3, r2
 800766e:	bfb8      	it	lt
 8007670:	4613      	movlt	r3, r2
 8007672:	6033      	str	r3, [r6, #0]
 8007674:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007678:	4607      	mov	r7, r0
 800767a:	460c      	mov	r4, r1
 800767c:	b10a      	cbz	r2, 8007682 <_printf_common+0x26>
 800767e:	3301      	adds	r3, #1
 8007680:	6033      	str	r3, [r6, #0]
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	0699      	lsls	r1, r3, #26
 8007686:	bf42      	ittt	mi
 8007688:	6833      	ldrmi	r3, [r6, #0]
 800768a:	3302      	addmi	r3, #2
 800768c:	6033      	strmi	r3, [r6, #0]
 800768e:	6825      	ldr	r5, [r4, #0]
 8007690:	f015 0506 	ands.w	r5, r5, #6
 8007694:	d106      	bne.n	80076a4 <_printf_common+0x48>
 8007696:	f104 0a19 	add.w	sl, r4, #25
 800769a:	68e3      	ldr	r3, [r4, #12]
 800769c:	6832      	ldr	r2, [r6, #0]
 800769e:	1a9b      	subs	r3, r3, r2
 80076a0:	42ab      	cmp	r3, r5
 80076a2:	dc26      	bgt.n	80076f2 <_printf_common+0x96>
 80076a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	3b00      	subs	r3, #0
 80076ac:	bf18      	it	ne
 80076ae:	2301      	movne	r3, #1
 80076b0:	0692      	lsls	r2, r2, #26
 80076b2:	d42b      	bmi.n	800770c <_printf_common+0xb0>
 80076b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076b8:	4641      	mov	r1, r8
 80076ba:	4638      	mov	r0, r7
 80076bc:	47c8      	blx	r9
 80076be:	3001      	adds	r0, #1
 80076c0:	d01e      	beq.n	8007700 <_printf_common+0xa4>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	6922      	ldr	r2, [r4, #16]
 80076c6:	f003 0306 	and.w	r3, r3, #6
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	bf02      	ittt	eq
 80076ce:	68e5      	ldreq	r5, [r4, #12]
 80076d0:	6833      	ldreq	r3, [r6, #0]
 80076d2:	1aed      	subeq	r5, r5, r3
 80076d4:	68a3      	ldr	r3, [r4, #8]
 80076d6:	bf0c      	ite	eq
 80076d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076dc:	2500      	movne	r5, #0
 80076de:	4293      	cmp	r3, r2
 80076e0:	bfc4      	itt	gt
 80076e2:	1a9b      	subgt	r3, r3, r2
 80076e4:	18ed      	addgt	r5, r5, r3
 80076e6:	2600      	movs	r6, #0
 80076e8:	341a      	adds	r4, #26
 80076ea:	42b5      	cmp	r5, r6
 80076ec:	d11a      	bne.n	8007724 <_printf_common+0xc8>
 80076ee:	2000      	movs	r0, #0
 80076f0:	e008      	b.n	8007704 <_printf_common+0xa8>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4652      	mov	r2, sl
 80076f6:	4641      	mov	r1, r8
 80076f8:	4638      	mov	r0, r7
 80076fa:	47c8      	blx	r9
 80076fc:	3001      	adds	r0, #1
 80076fe:	d103      	bne.n	8007708 <_printf_common+0xac>
 8007700:	f04f 30ff 	mov.w	r0, #4294967295
 8007704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007708:	3501      	adds	r5, #1
 800770a:	e7c6      	b.n	800769a <_printf_common+0x3e>
 800770c:	18e1      	adds	r1, r4, r3
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	2030      	movs	r0, #48	@ 0x30
 8007712:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007716:	4422      	add	r2, r4
 8007718:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800771c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007720:	3302      	adds	r3, #2
 8007722:	e7c7      	b.n	80076b4 <_printf_common+0x58>
 8007724:	2301      	movs	r3, #1
 8007726:	4622      	mov	r2, r4
 8007728:	4641      	mov	r1, r8
 800772a:	4638      	mov	r0, r7
 800772c:	47c8      	blx	r9
 800772e:	3001      	adds	r0, #1
 8007730:	d0e6      	beq.n	8007700 <_printf_common+0xa4>
 8007732:	3601      	adds	r6, #1
 8007734:	e7d9      	b.n	80076ea <_printf_common+0x8e>
	...

08007738 <_printf_i>:
 8007738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800773c:	7e0f      	ldrb	r7, [r1, #24]
 800773e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007740:	2f78      	cmp	r7, #120	@ 0x78
 8007742:	4691      	mov	r9, r2
 8007744:	4680      	mov	r8, r0
 8007746:	460c      	mov	r4, r1
 8007748:	469a      	mov	sl, r3
 800774a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800774e:	d807      	bhi.n	8007760 <_printf_i+0x28>
 8007750:	2f62      	cmp	r7, #98	@ 0x62
 8007752:	d80a      	bhi.n	800776a <_printf_i+0x32>
 8007754:	2f00      	cmp	r7, #0
 8007756:	f000 80d2 	beq.w	80078fe <_printf_i+0x1c6>
 800775a:	2f58      	cmp	r7, #88	@ 0x58
 800775c:	f000 80b9 	beq.w	80078d2 <_printf_i+0x19a>
 8007760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007764:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007768:	e03a      	b.n	80077e0 <_printf_i+0xa8>
 800776a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800776e:	2b15      	cmp	r3, #21
 8007770:	d8f6      	bhi.n	8007760 <_printf_i+0x28>
 8007772:	a101      	add	r1, pc, #4	@ (adr r1, 8007778 <_printf_i+0x40>)
 8007774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007778:	080077d1 	.word	0x080077d1
 800777c:	080077e5 	.word	0x080077e5
 8007780:	08007761 	.word	0x08007761
 8007784:	08007761 	.word	0x08007761
 8007788:	08007761 	.word	0x08007761
 800778c:	08007761 	.word	0x08007761
 8007790:	080077e5 	.word	0x080077e5
 8007794:	08007761 	.word	0x08007761
 8007798:	08007761 	.word	0x08007761
 800779c:	08007761 	.word	0x08007761
 80077a0:	08007761 	.word	0x08007761
 80077a4:	080078e5 	.word	0x080078e5
 80077a8:	0800780f 	.word	0x0800780f
 80077ac:	0800789f 	.word	0x0800789f
 80077b0:	08007761 	.word	0x08007761
 80077b4:	08007761 	.word	0x08007761
 80077b8:	08007907 	.word	0x08007907
 80077bc:	08007761 	.word	0x08007761
 80077c0:	0800780f 	.word	0x0800780f
 80077c4:	08007761 	.word	0x08007761
 80077c8:	08007761 	.word	0x08007761
 80077cc:	080078a7 	.word	0x080078a7
 80077d0:	6833      	ldr	r3, [r6, #0]
 80077d2:	1d1a      	adds	r2, r3, #4
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6032      	str	r2, [r6, #0]
 80077d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077e0:	2301      	movs	r3, #1
 80077e2:	e09d      	b.n	8007920 <_printf_i+0x1e8>
 80077e4:	6833      	ldr	r3, [r6, #0]
 80077e6:	6820      	ldr	r0, [r4, #0]
 80077e8:	1d19      	adds	r1, r3, #4
 80077ea:	6031      	str	r1, [r6, #0]
 80077ec:	0606      	lsls	r6, r0, #24
 80077ee:	d501      	bpl.n	80077f4 <_printf_i+0xbc>
 80077f0:	681d      	ldr	r5, [r3, #0]
 80077f2:	e003      	b.n	80077fc <_printf_i+0xc4>
 80077f4:	0645      	lsls	r5, r0, #25
 80077f6:	d5fb      	bpl.n	80077f0 <_printf_i+0xb8>
 80077f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077fc:	2d00      	cmp	r5, #0
 80077fe:	da03      	bge.n	8007808 <_printf_i+0xd0>
 8007800:	232d      	movs	r3, #45	@ 0x2d
 8007802:	426d      	negs	r5, r5
 8007804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007808:	4859      	ldr	r0, [pc, #356]	@ (8007970 <_printf_i+0x238>)
 800780a:	230a      	movs	r3, #10
 800780c:	e011      	b.n	8007832 <_printf_i+0xfa>
 800780e:	6821      	ldr	r1, [r4, #0]
 8007810:	6833      	ldr	r3, [r6, #0]
 8007812:	0608      	lsls	r0, r1, #24
 8007814:	f853 5b04 	ldr.w	r5, [r3], #4
 8007818:	d402      	bmi.n	8007820 <_printf_i+0xe8>
 800781a:	0649      	lsls	r1, r1, #25
 800781c:	bf48      	it	mi
 800781e:	b2ad      	uxthmi	r5, r5
 8007820:	2f6f      	cmp	r7, #111	@ 0x6f
 8007822:	4853      	ldr	r0, [pc, #332]	@ (8007970 <_printf_i+0x238>)
 8007824:	6033      	str	r3, [r6, #0]
 8007826:	bf14      	ite	ne
 8007828:	230a      	movne	r3, #10
 800782a:	2308      	moveq	r3, #8
 800782c:	2100      	movs	r1, #0
 800782e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007832:	6866      	ldr	r6, [r4, #4]
 8007834:	60a6      	str	r6, [r4, #8]
 8007836:	2e00      	cmp	r6, #0
 8007838:	bfa2      	ittt	ge
 800783a:	6821      	ldrge	r1, [r4, #0]
 800783c:	f021 0104 	bicge.w	r1, r1, #4
 8007840:	6021      	strge	r1, [r4, #0]
 8007842:	b90d      	cbnz	r5, 8007848 <_printf_i+0x110>
 8007844:	2e00      	cmp	r6, #0
 8007846:	d04b      	beq.n	80078e0 <_printf_i+0x1a8>
 8007848:	4616      	mov	r6, r2
 800784a:	fbb5 f1f3 	udiv	r1, r5, r3
 800784e:	fb03 5711 	mls	r7, r3, r1, r5
 8007852:	5dc7      	ldrb	r7, [r0, r7]
 8007854:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007858:	462f      	mov	r7, r5
 800785a:	42bb      	cmp	r3, r7
 800785c:	460d      	mov	r5, r1
 800785e:	d9f4      	bls.n	800784a <_printf_i+0x112>
 8007860:	2b08      	cmp	r3, #8
 8007862:	d10b      	bne.n	800787c <_printf_i+0x144>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	07df      	lsls	r7, r3, #31
 8007868:	d508      	bpl.n	800787c <_printf_i+0x144>
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	6861      	ldr	r1, [r4, #4]
 800786e:	4299      	cmp	r1, r3
 8007870:	bfde      	ittt	le
 8007872:	2330      	movle	r3, #48	@ 0x30
 8007874:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007878:	f106 36ff 	addle.w	r6, r6, #4294967295
 800787c:	1b92      	subs	r2, r2, r6
 800787e:	6122      	str	r2, [r4, #16]
 8007880:	f8cd a000 	str.w	sl, [sp]
 8007884:	464b      	mov	r3, r9
 8007886:	aa03      	add	r2, sp, #12
 8007888:	4621      	mov	r1, r4
 800788a:	4640      	mov	r0, r8
 800788c:	f7ff fee6 	bl	800765c <_printf_common>
 8007890:	3001      	adds	r0, #1
 8007892:	d14a      	bne.n	800792a <_printf_i+0x1f2>
 8007894:	f04f 30ff 	mov.w	r0, #4294967295
 8007898:	b004      	add	sp, #16
 800789a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	f043 0320 	orr.w	r3, r3, #32
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	4833      	ldr	r0, [pc, #204]	@ (8007974 <_printf_i+0x23c>)
 80078a8:	2778      	movs	r7, #120	@ 0x78
 80078aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	6831      	ldr	r1, [r6, #0]
 80078b2:	061f      	lsls	r7, r3, #24
 80078b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80078b8:	d402      	bmi.n	80078c0 <_printf_i+0x188>
 80078ba:	065f      	lsls	r7, r3, #25
 80078bc:	bf48      	it	mi
 80078be:	b2ad      	uxthmi	r5, r5
 80078c0:	6031      	str	r1, [r6, #0]
 80078c2:	07d9      	lsls	r1, r3, #31
 80078c4:	bf44      	itt	mi
 80078c6:	f043 0320 	orrmi.w	r3, r3, #32
 80078ca:	6023      	strmi	r3, [r4, #0]
 80078cc:	b11d      	cbz	r5, 80078d6 <_printf_i+0x19e>
 80078ce:	2310      	movs	r3, #16
 80078d0:	e7ac      	b.n	800782c <_printf_i+0xf4>
 80078d2:	4827      	ldr	r0, [pc, #156]	@ (8007970 <_printf_i+0x238>)
 80078d4:	e7e9      	b.n	80078aa <_printf_i+0x172>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	f023 0320 	bic.w	r3, r3, #32
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	e7f6      	b.n	80078ce <_printf_i+0x196>
 80078e0:	4616      	mov	r6, r2
 80078e2:	e7bd      	b.n	8007860 <_printf_i+0x128>
 80078e4:	6833      	ldr	r3, [r6, #0]
 80078e6:	6825      	ldr	r5, [r4, #0]
 80078e8:	6961      	ldr	r1, [r4, #20]
 80078ea:	1d18      	adds	r0, r3, #4
 80078ec:	6030      	str	r0, [r6, #0]
 80078ee:	062e      	lsls	r6, r5, #24
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	d501      	bpl.n	80078f8 <_printf_i+0x1c0>
 80078f4:	6019      	str	r1, [r3, #0]
 80078f6:	e002      	b.n	80078fe <_printf_i+0x1c6>
 80078f8:	0668      	lsls	r0, r5, #25
 80078fa:	d5fb      	bpl.n	80078f4 <_printf_i+0x1bc>
 80078fc:	8019      	strh	r1, [r3, #0]
 80078fe:	2300      	movs	r3, #0
 8007900:	6123      	str	r3, [r4, #16]
 8007902:	4616      	mov	r6, r2
 8007904:	e7bc      	b.n	8007880 <_printf_i+0x148>
 8007906:	6833      	ldr	r3, [r6, #0]
 8007908:	1d1a      	adds	r2, r3, #4
 800790a:	6032      	str	r2, [r6, #0]
 800790c:	681e      	ldr	r6, [r3, #0]
 800790e:	6862      	ldr	r2, [r4, #4]
 8007910:	2100      	movs	r1, #0
 8007912:	4630      	mov	r0, r6
 8007914:	f7f8 fc6c 	bl	80001f0 <memchr>
 8007918:	b108      	cbz	r0, 800791e <_printf_i+0x1e6>
 800791a:	1b80      	subs	r0, r0, r6
 800791c:	6060      	str	r0, [r4, #4]
 800791e:	6863      	ldr	r3, [r4, #4]
 8007920:	6123      	str	r3, [r4, #16]
 8007922:	2300      	movs	r3, #0
 8007924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007928:	e7aa      	b.n	8007880 <_printf_i+0x148>
 800792a:	6923      	ldr	r3, [r4, #16]
 800792c:	4632      	mov	r2, r6
 800792e:	4649      	mov	r1, r9
 8007930:	4640      	mov	r0, r8
 8007932:	47d0      	blx	sl
 8007934:	3001      	adds	r0, #1
 8007936:	d0ad      	beq.n	8007894 <_printf_i+0x15c>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	079b      	lsls	r3, r3, #30
 800793c:	d413      	bmi.n	8007966 <_printf_i+0x22e>
 800793e:	68e0      	ldr	r0, [r4, #12]
 8007940:	9b03      	ldr	r3, [sp, #12]
 8007942:	4298      	cmp	r0, r3
 8007944:	bfb8      	it	lt
 8007946:	4618      	movlt	r0, r3
 8007948:	e7a6      	b.n	8007898 <_printf_i+0x160>
 800794a:	2301      	movs	r3, #1
 800794c:	4632      	mov	r2, r6
 800794e:	4649      	mov	r1, r9
 8007950:	4640      	mov	r0, r8
 8007952:	47d0      	blx	sl
 8007954:	3001      	adds	r0, #1
 8007956:	d09d      	beq.n	8007894 <_printf_i+0x15c>
 8007958:	3501      	adds	r5, #1
 800795a:	68e3      	ldr	r3, [r4, #12]
 800795c:	9903      	ldr	r1, [sp, #12]
 800795e:	1a5b      	subs	r3, r3, r1
 8007960:	42ab      	cmp	r3, r5
 8007962:	dcf2      	bgt.n	800794a <_printf_i+0x212>
 8007964:	e7eb      	b.n	800793e <_printf_i+0x206>
 8007966:	2500      	movs	r5, #0
 8007968:	f104 0619 	add.w	r6, r4, #25
 800796c:	e7f5      	b.n	800795a <_printf_i+0x222>
 800796e:	bf00      	nop
 8007970:	08007b2d 	.word	0x08007b2d
 8007974:	08007b3e 	.word	0x08007b3e

08007978 <memmove>:
 8007978:	4288      	cmp	r0, r1
 800797a:	b510      	push	{r4, lr}
 800797c:	eb01 0402 	add.w	r4, r1, r2
 8007980:	d902      	bls.n	8007988 <memmove+0x10>
 8007982:	4284      	cmp	r4, r0
 8007984:	4623      	mov	r3, r4
 8007986:	d807      	bhi.n	8007998 <memmove+0x20>
 8007988:	1e43      	subs	r3, r0, #1
 800798a:	42a1      	cmp	r1, r4
 800798c:	d008      	beq.n	80079a0 <memmove+0x28>
 800798e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007992:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007996:	e7f8      	b.n	800798a <memmove+0x12>
 8007998:	4402      	add	r2, r0
 800799a:	4601      	mov	r1, r0
 800799c:	428a      	cmp	r2, r1
 800799e:	d100      	bne.n	80079a2 <memmove+0x2a>
 80079a0:	bd10      	pop	{r4, pc}
 80079a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079aa:	e7f7      	b.n	800799c <memmove+0x24>

080079ac <_sbrk_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4d06      	ldr	r5, [pc, #24]	@ (80079c8 <_sbrk_r+0x1c>)
 80079b0:	2300      	movs	r3, #0
 80079b2:	4604      	mov	r4, r0
 80079b4:	4608      	mov	r0, r1
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	f7fa f964 	bl	8001c84 <_sbrk>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d102      	bne.n	80079c6 <_sbrk_r+0x1a>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	b103      	cbz	r3, 80079c6 <_sbrk_r+0x1a>
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	20004dc0 	.word	0x20004dc0

080079cc <_realloc_r>:
 80079cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d0:	4680      	mov	r8, r0
 80079d2:	4615      	mov	r5, r2
 80079d4:	460c      	mov	r4, r1
 80079d6:	b921      	cbnz	r1, 80079e2 <_realloc_r+0x16>
 80079d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079dc:	4611      	mov	r1, r2
 80079de:	f7ff bc59 	b.w	8007294 <_malloc_r>
 80079e2:	b92a      	cbnz	r2, 80079f0 <_realloc_r+0x24>
 80079e4:	f7ff fbea 	bl	80071bc <_free_r>
 80079e8:	2400      	movs	r4, #0
 80079ea:	4620      	mov	r0, r4
 80079ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f0:	f000 f81a 	bl	8007a28 <_malloc_usable_size_r>
 80079f4:	4285      	cmp	r5, r0
 80079f6:	4606      	mov	r6, r0
 80079f8:	d802      	bhi.n	8007a00 <_realloc_r+0x34>
 80079fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80079fe:	d8f4      	bhi.n	80079ea <_realloc_r+0x1e>
 8007a00:	4629      	mov	r1, r5
 8007a02:	4640      	mov	r0, r8
 8007a04:	f7ff fc46 	bl	8007294 <_malloc_r>
 8007a08:	4607      	mov	r7, r0
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d0ec      	beq.n	80079e8 <_realloc_r+0x1c>
 8007a0e:	42b5      	cmp	r5, r6
 8007a10:	462a      	mov	r2, r5
 8007a12:	4621      	mov	r1, r4
 8007a14:	bf28      	it	cs
 8007a16:	4632      	movcs	r2, r6
 8007a18:	f7ff fbc2 	bl	80071a0 <memcpy>
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	4640      	mov	r0, r8
 8007a20:	f7ff fbcc 	bl	80071bc <_free_r>
 8007a24:	463c      	mov	r4, r7
 8007a26:	e7e0      	b.n	80079ea <_realloc_r+0x1e>

08007a28 <_malloc_usable_size_r>:
 8007a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a2c:	1f18      	subs	r0, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	bfbc      	itt	lt
 8007a32:	580b      	ldrlt	r3, [r1, r0]
 8007a34:	18c0      	addlt	r0, r0, r3
 8007a36:	4770      	bx	lr

08007a38 <_init>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr

08007a44 <_fini>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	bf00      	nop
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr
